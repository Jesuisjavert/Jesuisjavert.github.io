<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JesuisJavert</title>
    <link>https://jesuisjavert.github.io/</link>
    
    <atom:link href="https://jesuisjavert.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>강동훈의 블로그에 오신 것을 환영합니다.</description>
    <pubDate>Tue, 09 Mar 2021 06:51:57 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Javascript 기초문법 가물가물할 때 5분 컷 내기</title>
      <link>https://jesuisjavert.github.io/2021/03/02/javascript-grammar/</link>
      <guid>https://jesuisjavert.github.io/2021/03/02/javascript-grammar/</guid>
      <pubDate>Tue, 02 Mar 2021 06:02:04 GMT</pubDate>
      
      <description>&lt;center&gt;
&lt;img src=&quot;/gallery/post/javascript.png&quot; width=&quot;500&quot; height=&quot;500&quot;&gt;&lt;br&gt;
Javascript 오빠는 풍각쟁이야~ 오빠는 심술쟁이야~&lt;br&gt;
난 몰라 난 몰라 문법 이렇게 만들어 놓으면 난 몰라~~
&lt;/center&gt;
&lt;br&gt;

&lt;h2 id=&quot;Javascript-문법은-봐도봐도-헷갈려&quot;&gt;&lt;a href=&quot;#Javascript-문법은-봐도봐도-헷갈려&quot; class=&quot;headerlink&quot; title=&quot;Javascript 문법은 봐도봐도 헷갈려&quot;&gt;&lt;/a&gt;Javascript 문법은 봐도봐도 헷갈려&lt;/h2&gt;&lt;p&gt;Backend와 Frontend를 왔다리 갔다리 하다보면,&lt;br&gt;Python식 사고방식으로 작성한 문법이 문제 없겠지? 하고 들여다보면&lt;br&gt;Javascript 의 다양한 에러메시지를 주구장창 마주치게 된다. &lt;/p&gt;
&lt;p&gt;오죽하면, What the fuck Javascript 라는 Dev Meme (개발자 유머)도 존재하고,&lt;br&gt;Javascript의 가장 괴랄한(?) 부분만 모아놓아, 퀴즈 형식으로 풀게하는 레퍼지토리도 존재한다. 폴란드의 한 개발자 분이 만드신 것 같은데, 웃긴 건 이 페이지는 전부 Typescript로 제작 되었다는 것ㅋㅋㅋㅋㅋ &lt;del&gt;그만큼 JS를 싫어하신단거지&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/gallery/post/wtfjs.png&quot; alt=&quot;주위 개발자 친구들에게 보내보니 다들 점수가 처참했다&quot;&gt;&lt;/p&gt;
&lt;p&gt;JS의 괴랄함을 겪어보고 싶으신분들은 사이트 들어가서 직접 풀어보자! :&lt;br&gt;&lt;a href=&quot;https://wtf-js-quiz.netlify.app/&quot;&gt;https://wtf-js-quiz.netlify.app/&lt;/a&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<center><img src="/gallery/post/javascript.png" width="500" height="500"><br>Javascript 오빠는 풍각쟁이야~ 오빠는 심술쟁이야~<br>난 몰라 난 몰라 문법 이렇게 만들어 놓으면 난 몰라~~</center><br><h2 id="Javascript-문법은-봐도봐도-헷갈려"><a href="#Javascript-문법은-봐도봐도-헷갈려" class="headerlink" title="Javascript 문법은 봐도봐도 헷갈려"></a>Javascript 문법은 봐도봐도 헷갈려</h2><p>Backend와 Frontend를 왔다리 갔다리 하다보면,<br>Python식 사고방식으로 작성한 문법이 문제 없겠지? 하고 들여다보면<br>Javascript 의 다양한 에러메시지를 주구장창 마주치게 된다. </p><p>오죽하면, What the fuck Javascript 라는 Dev Meme (개발자 유머)도 존재하고,<br>Javascript의 가장 괴랄한(?) 부분만 모아놓아, 퀴즈 형식으로 풀게하는 레퍼지토리도 존재한다. 폴란드의 한 개발자 분이 만드신 것 같은데, 웃긴 건 이 페이지는 전부 Typescript로 제작 되었다는 것ㅋㅋㅋㅋㅋ <del>그만큼 JS를 싫어하신단거지</del></p><p><img src="/gallery/post/wtfjs.png" alt="주위 개발자 친구들에게 보내보니 다들 점수가 처참했다"></p><p>JS의 괴랄함을 겪어보고 싶으신분들은 사이트 들어가서 직접 풀어보자! :<br><a href="https://wtf-js-quiz.netlify.app/">https://wtf-js-quiz.netlify.app/</a></p><a id="more"></a><h2 id="Javascript-문법이-가물가물한-분들을-위해"><a href="#Javascript-문법이-가물가물한-분들을-위해" class="headerlink" title="Javascript 문법이 가물가물한 분들을 위해"></a>Javascript 문법이 가물가물한 분들을 위해</h2><p>그래서, Javascript 문법을 처음 배우는 사람 말고! 봐도봐도 헷갈리는 사람을 위해, 5분만에 스윽 다시 읽어보고 아 맞다 이거였지! 할 수 있도록, 기초 JS 문법을 정리해봤다.</p><p>이미 아는 내용일거라 전제하에, 주석은 정말 기억을 되살릴 만큼만 적고, 설명을 최소화해서 5분만에 Javascript의 Type, For문, Function, Object 구조를 읽을 수 있도록 만들었다. 레쓰기릿</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Javascript 의 Data Type </span></span><br><span class="line"><span class="comment">// - 아무리 바빠도 Hello world 정도는 괜찮잖아?</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// let 과 const는 둘다 중복 생성 X</span></span><br><span class="line"><span class="comment">// let은 재할당 가능 </span></span><br><span class="line"><span class="keyword">let</span> a =<span class="number">123</span></span><br><span class="line">a = <span class="number">456</span></span><br><span class="line"><span class="comment">// const 는 재할당 불가능</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="comment">// b = &#x27;world</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">123</span>)</span><br><span class="line"><span class="comment">// number라고 나온다!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;javert&#x27;</span></span><br><span class="line"><span class="keyword">let</span> hello_msg = <span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line"><span class="comment">// hello_msg = f&#x27;hello &#123;name&#125;&#x27; 과 같다(python f스트링)</span></span><br><span class="line"><span class="comment">// 다만 따옴표가 아닌 백틱을 사용한다</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hello_msg)</span><br><span class="line"></span><br><span class="line"><span class="comment">// True, False 는 소문자다</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span>)</span><br><span class="line"><span class="comment">// and 랑 or 는 &amp;&amp; , ||로 쓴다</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> &amp;&amp; <span class="literal">true</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> || <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 삼항 연상자</span></span><br><span class="line">result = <span class="literal">true</span> ? <span class="number">1</span>: <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Javascript 의 for 문</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> a = <span class="number">0</span> ; a &lt; <span class="number">5</span> ; a++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> menus = [<span class="string">&#x27;짜장면&#x27;</span>, <span class="string">&#x27;짬뽕&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> menu <span class="keyword">of</span> menus)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(menu)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> menu <span class="keyword">in</span> menus)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(menu)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numbers = &#123;</span><br><span class="line">    <span class="string">&#x27;gj&#x27;</span>: <span class="number">062</span>,</span><br><span class="line">    <span class="string">&#x27;seoul&#x27;</span>: <span class="number">02</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// key가 출력 (key값)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> number <span class="keyword">in</span> numbers)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(number)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// // 에러가 발생 (value값)</span></span><br><span class="line"><span class="comment">// for (let number of numbers)&#123;</span></span><br><span class="line"><span class="comment">//     console.log(number)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// list는 for of / 오브젝트 형태는 for in</span></span><br><span class="line"></span><br><span class="line">menus.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">menu</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(menu)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Javascript의 함수 선언</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// def hello():</span></span><br><span class="line"><span class="comment">// print(&#x27;hello&#x27;)</span></span><br><span class="line"><span class="comment">// hello()</span></span><br><span class="line"><span class="comment">// 함수 선언식</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">hello()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 표현식</span></span><br><span class="line"><span class="keyword">const</span> world = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">world()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 화살표 함수</span></span><br><span class="line"><span class="keyword">const</span> js = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;js&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">js()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 화살표 함수가 한줄 밖에 없을땐 이렇게도 표현가능하다</span></span><br><span class="line"><span class="keyword">const</span> python = <span class="function"><span class="params">a</span> =&gt;</span> <span class="built_in">console</span>.log(a)</span><br><span class="line">python(<span class="string">&#x27;hello python&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 자바스크립트의 함수란?</span></span><br><span class="line"><span class="comment">//   1. 변수에 저장할 수 있다.</span></span><br><span class="line"><span class="comment">//   2. 함수의 리턴값이 될 수 있다.</span></span><br><span class="line"><span class="comment">//   3. 함수의 인자가 될 수 있다.</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> number <span class="keyword">of</span> numbers) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(number*<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hello = <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num*<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">hello(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// numbers.forEach(hello)</span></span><br><span class="line"><span class="comment">// numbers.forEach((num)=&gt;&#123;console.log(num*2)&#125;)</span></span><br><span class="line">numbers.forEach(<span class="function"><span class="params">num</span>=&gt;</span><span class="built_in">console</span>.log(num*<span class="number">2</span>))</span><br><span class="line"><span class="comment">// 익명함수(파이썬의 람다)는 재사용을 할 수 없다</span></span><br><span class="line"><span class="comment">// 콜백함수 일회용으로만 사용할때 많이 사용</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. Javascript의 Object 구조 (Python 의 Dictionary)</span></span><br><span class="line"><span class="keyword">const</span> me = &#123;</span><br><span class="line">    name: <span class="string">&#x27;javert&#x27;</span>,</span><br><span class="line">    location: <span class="string">&#x27;gj&#x27;</span>,</span><br><span class="line">    language: [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;sql&#x27;</span>],</span><br><span class="line">    products: &#123;</span><br><span class="line">        phone: <span class="string">&#x27;iphone&#x27;</span>,</span><br><span class="line">        computer: <span class="string">&#x27;desktop&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    greeting: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="string">&#x27;hihi&#x27;</span>&#125;,</span><br><span class="line">    double: <span class="function">(<span class="params">age</span>) =&gt;</span> &#123;<span class="built_in">console</span>.log(age*<span class="number">2</span>)&#125;,</span><br><span class="line">    double2: <span class="function"><span class="keyword">function</span>(<span class="params">age</span>)</span>&#123;<span class="keyword">return</span> age*<span class="number">2</span>&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(me.greeting)</span></span><br><span class="line"><span class="comment">// console.log(me.double(100))</span></span><br><span class="line"><span class="comment">// console.log(me.double2(100))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(me)</span><br><span class="line"></span><br><span class="line"><span class="comment">// json</span></span><br><span class="line"><span class="keyword">let</span> meJson = <span class="built_in">JSON</span>.stringify(me)</span><br><span class="line"><span class="built_in">console</span>.log(meJson)</span><br><span class="line"><span class="comment">// 함수는 string화가 안된다</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.parse()</span><br></pre></td></tr></table></figure><p>중간중간 console.log 값이 뭐가 나오는지 궁금하다구요?<br>구글 크롬 Console창을 킨 뒤, 직접 입력해 보자!</p><p>아니, 그냥 우리 .. Typescript 쓰자 … The End</p>]]></content:encoded>
      
      
      <category domain="https://jesuisjavert.github.io/categories/Javascript/">Javascript</category>
      
      <category domain="https://jesuisjavert.github.io/categories/Javascript/Grammar/">Grammar</category>
      
      
      <category domain="https://jesuisjavert.github.io/tags/Javascript/">Javascript</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Grammar/">Grammar</category>
      
      
      <comments>https://jesuisjavert.github.io/2021/03/02/javascript-grammar/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS AI/ML Innovate Online Conference 참가후기</title>
      <link>https://jesuisjavert.github.io/2021/02/24/aws-innovative/</link>
      <guid>https://jesuisjavert.github.io/2021/02/24/aws-innovative/</guid>
      <pubDate>Wed, 24 Feb 2021 06:54:29 GMT</pubDate>
      
      <description>&lt;center&gt;
&lt;img src=&quot;/gallery/post/machinelearning/model_train.jpg&quot;&gt;&lt;br&gt;
Machine Learning 뽕에 취한다...
&lt;/center&gt;

&lt;h2 id=&quot;AWS-AI-ML-Innovate-Online-Conference-참가-후기&quot;&gt;&lt;a href=&quot;#AWS-AI-ML-Innovate-Online-Conference-참가-후기&quot; class=&quot;headerlink&quot; title=&quot;AWS AI / ML Innovate Online Conference 참가 후기&quot;&gt;&lt;/a&gt;AWS AI / ML Innovate Online Conference 참가 후기&lt;/h2&gt;&lt;p&gt;때는 코로나 시국, Offline Conference들이 Online으로 많이 이루어진다.&lt;br&gt;하지만, &lt;strong&gt;오히려 좋아.&lt;/strong&gt; Online 이니까, 참가비도, 교통비도 &lt;strong&gt;0원!&lt;/strong&gt;&lt;br&gt;올해 이루어졌던, &lt;strong&gt;AWS re:invent&lt;/strong&gt; 도 참여했었고 (re:invent 는 System Architecture쪽 위주)&lt;br&gt;도키도키한 마음으로 아기다리 고기다리&lt;br&gt;&lt;strong&gt;AWS AI (Artificial Intelligence) &amp;amp; ML (Machine Learning) Innovate Online Conference&lt;/strong&gt; 의 날이 밝았다 !&lt;/p&gt;
&lt;p&gt;기조연설의 캡쳐본으로 어떤 내용이 진행 되었는지 Summary 해보았다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<center><img src="/gallery/post/machinelearning/model_train.jpg"><br>Machine Learning 뽕에 취한다...</center><h2 id="AWS-AI-ML-Innovate-Online-Conference-참가-후기"><a href="#AWS-AI-ML-Innovate-Online-Conference-참가-후기" class="headerlink" title="AWS AI / ML Innovate Online Conference 참가 후기"></a>AWS AI / ML Innovate Online Conference 참가 후기</h2><p>때는 코로나 시국, Offline Conference들이 Online으로 많이 이루어진다.<br>하지만, <strong>오히려 좋아.</strong> Online 이니까, 참가비도, 교통비도 <strong>0원!</strong><br>올해 이루어졌던, <strong>AWS re:invent</strong> 도 참여했었고 (re:invent 는 System Architecture쪽 위주)<br>도키도키한 마음으로 아기다리 고기다리<br><strong>AWS AI (Artificial Intelligence) &amp; ML (Machine Learning) Innovate Online Conference</strong> 의 날이 밝았다 !</p><p>기조연설의 캡쳐본으로 어떤 내용이 진행 되었는지 Summary 해보았다.</p><a id="more"></a><h2 id="T1-기조연설-Summary"><a href="#T1-기조연설-Summary" class="headerlink" title="T1 기조연설 Summary"></a>T1 기조연설 Summary</h2><p><img src="/gallery/post/aws_ml/awsml1.png" alt="왜 AI 와 ML 인가?"><br><img src="/gallery/post/aws_ml/awsml2.png" alt="AI/ML의 5가지 목적"><br><img src="/gallery/post/aws_ml/awsml3.png" alt="ML 트레이닝 구조"><br><img src="/gallery/post/aws_ml/awsml4.png" alt="ML 전용 GPU의 학습 속도는 놀라웠다 !"><br><img src="/gallery/post/aws_ml/awsml6.png" alt="Amazon SageMaker.. 고거슨 Future.."><br><img src="/gallery/post/aws_ml/awsml7.png" alt="자체 AWS ML IDE 제공 환경"><br><img src="/gallery/post/aws_ml/awsml8.png" alt="시각화/검증툴 뿐 아니라 DevOps Services까지"><br><img src="/gallery/post/aws_ml/awsml10.png" alt="ML 기반 예측 기능을 단순 SQL문 요청을 통해 얻을수 있다!? 삐슝빠슝"><br><img src="/gallery/post/aws_ml/awsml11.png" alt="SQL문으로 S3 내의를 바로바로 가져와 ML 적용 할 수 있다"><br><img src="/gallery/post/aws_ml/awsml12.png" alt="ML을 통해 BI(Business Intelligence)향상으로"><br><img src="/gallery/post/aws_ml/awsml13.png" alt="강력한 ML 자연어처리 Visualization 도구. Javert 픽 필수 학습 도구!"><br><img src="/gallery/post/aws_ml/awsml14.png" alt="이외에도 이미 완성된 AI 기능을 API 형태로 쉽게 활용가능! 활용방안이 무궁무진할 듯"><br><img src="/gallery/post/aws_ml/awsml15.png" alt="AWS DeepLens-&gt;Rekognition Imagae-&gt;Transcribe-&gt;Polly&lt;-&gt;Translate로 구현한 AI Smart Application 예제"><br><img src="/gallery/post/aws_ml/awsml16.png" alt="Personalized Recommendation Algorithm"><br><img src="/gallery/post/aws_ml/awsml17.png" alt="다양한 비즈니스 현장의 모니터링 솔루션"><br><img src="/gallery/post/aws_ml/awsml18.png" alt="ML기반 차세대 DevOps 서비스까지"><br><img src="/gallery/post/aws_ml/awsml19.png" alt="ML 기반 자율주행 레이싱? 가상 ML로 최적의 자율주행 모델 학습까지!"></p><hr><h2 id="후기-및-대댓글-받은-썰-푼다"><a href="#후기-및-대댓글-받은-썰-푼다" class="headerlink" title="후기 및 대댓글 받은 썰 푼다.."></a>후기 및 대댓글 받은 썰 푼다..</h2><p>정말 다양한 산업 분야에 적용될 수 있고, 개발자 입장에서 써보고 싶은 라이브러리들이 API 형태로 손쉽게 제공되기 때문에, ML의 거대한 이론에 지레 겁 먹고 공부를 포기할 것이 아니라, 실제 적용 되는 서비스들을 만들어보고, 적용시키는 것이 너무 쉽고 용이 할 것 같아 가슴이 두근두근 해지는 Conference였다.</p><p>다음 프로젝트는 AWS ML 을 이용한 토이프로젝트로 바로 다아알려그아ㅏㅏㅏ - </p><p>그리고!!!!</p><hr><center><img src="/gallery/post/slackcomment.png"><br>실시간으로 성덕이 되었따.. 🙈</center><br><p><strong>AWS 한국인 사용자 Slack 채널에 기조연설을 하신<br>윤석찬(AWS 수석 테크 에반젤리스트)</strong> 님에게, 오늘 연설 너무 잘봤다고 댓글 달았더니 친절한 <strong>대댓글</strong>도 받았따!! 이 얼마나 <strong>좋은 세상</strong> 인가.. 21세기 만세.. ㅋㅋㅋ</p><hr><p><strong>추가) 이젠 AWS Korea 유튜브 채널에 기조연설이 업로드 되어, 언제든 볼 수 있다!</strong><br><a href="https://www.youtube.com/watch?v=sfcCf55v5yo&amp;t=598s">https://www.youtube.com/watch?v=sfcCf55v5yo&amp;t=598s</a></p><p>다른 AWS Innovate 영상들도 볼 수 있다! 매우 유익함</p><p>출처)  </p><p><a href="https://aws.amazon.com/ko/events/aws-innovate/machine-learning/">https://aws.amazon.com/ko/events/aws-innovate/machine-learning/</a></p>]]></content:encoded>
      
      
      <category domain="https://jesuisjavert.github.io/categories/MachineLearning/">MachineLearning</category>
      
      <category domain="https://jesuisjavert.github.io/categories/MachineLearning/AWS/">AWS</category>
      
      <category domain="https://jesuisjavert.github.io/categories/MachineLearning/AWS/Innovate/">Innovate</category>
      
      
      <category domain="https://jesuisjavert.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Cloud/">Cloud</category>
      
      <category domain="https://jesuisjavert.github.io/tags/MachineLearning/">MachineLearning</category>
      
      <category domain="https://jesuisjavert.github.io/tags/AWSInnovate/">AWSInnovate</category>
      
      
      <comments>https://jesuisjavert.github.io/2021/02/24/aws-innovative/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>인터넷 게이트 웨이 &amp; NAT Device &amp; NAT Gateway</title>
      <link>https://jesuisjavert.github.io/2021/02/15/aws-study9/</link>
      <guid>https://jesuisjavert.github.io/2021/02/15/aws-study9/</guid>
      <pubDate>Mon, 15 Feb 2021 14:55:23 GMT</pubDate>
      
      <description>&lt;center&gt;
&lt;img src=&quot;/gallery/post/aws/aws56.png&quot; width=&quot;500&quot; height=&quot;500&quot;&gt;&lt;br&gt;
AWS를 인터넷과 연결시켜보자
&lt;/center&gt;

&lt;h2 id=&quot;AWS의-인터넷-연결&quot;&gt;&lt;a href=&quot;#AWS의-인터넷-연결&quot; class=&quot;headerlink&quot; title=&quot;AWS의 인터넷 연결&quot;&gt;&lt;/a&gt;AWS의 인터넷 연결&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;인터넷 게이트 웨이&lt;/li&gt;
&lt;li&gt;NAT 디바이스(NAT Gateway, NAT Instance)&lt;/li&gt;
&lt;li&gt;Proxy Instance&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/gallery/post/aws/aws57.png&quot; alt=&quot;각 방식이 활용되는 시스템 아키텍쳐&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/gallery/post/aws/aws58.png&quot; alt=&quot;각 방식의 차이점 비교/ OS 계층이 다르다!&quot;&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<center><img src="/gallery/post/aws/aws56.png" width="500" height="500"><br>AWS를 인터넷과 연결시켜보자</center><h2 id="AWS의-인터넷-연결"><a href="#AWS의-인터넷-연결" class="headerlink" title="AWS의 인터넷 연결"></a>AWS의 인터넷 연결</h2><blockquote><ol><li>인터넷 게이트 웨이</li><li>NAT 디바이스(NAT Gateway, NAT Instance)</li><li>Proxy Instance</li></ol></blockquote><p><img src="/gallery/post/aws/aws57.png" alt="각 방식이 활용되는 시스템 아키텍쳐"></p><p><img src="/gallery/post/aws/aws58.png" alt="각 방식의 차이점 비교/ OS 계층이 다르다!"></p><a id="more"></a><h2 id="Internet-Gateway"><a href="#Internet-Gateway" class="headerlink" title="Internet Gateway"></a>Internet Gateway</h2><p><img src="/gallery/post/aws/aws59.png" alt="인터넷 게이트웨이의 통신 순서"></p><ol><li>내부 인스턴스 -&gt; 외부 웹서버로 HTTP 접속 시도</li><li>인터넷 게이트 웨이에서 출발지 IP 확인, NAT 정보로 출발지 IP 변경 (1:1 IP NAT 동작)</li><li>외부에서 요청 처리 및 응답 트래픽(출발지IP&lt;-&gt;목적지 IP)으로 변환</li><li>게이트웨이에서 다시 한번 NAT 정보로 트래픽 변환</li><li>내부 인스턴스에 도달</li></ol><h2 id="NAT-Device"><a href="#NAT-Device" class="headerlink" title="NAT Device"></a>NAT Device</h2><p><img src="/gallery/post/aws/aws60.png" alt="NAT Device의 통신 순서"></p><p>통신 순서는 Internet Gateway 와 비슷하나, 프라이빗 서브넷은 외부 인터넷과 직접 연결이 불가능하여, NAT Device (Nat Instance or NAT Gateway)를 거쳐서 들어 온다.</p><ol><li>내부 인스턴스 -&gt; NAT Instance</li><li>NAT Instance는 IP masquerading 기능을 통해 출발지 IP와 포트를 변환 후 인터넷 게이트 웨이로 전송</li><li>인터넷 게이트 웨이는 프라이빗 IP와 탄력적 IP간의 IP 변환(NAT) 수행</li><li>외부에서 요청 처리 후 응답 트래픽 (출발지IP &lt;-&gt; 목적지IP)</li><li>IGW에서 목적지 IP를 NAT 변환하여 VPC 내부로 보냄</li><li>NAT Instance는 ‘변환 정보’에 따라 포트 변환하여 프라이빗 서브넷으로 보냄</li><li>최종 응답 트래픽 도착</li></ol><h2 id="Proxy-Instance"><a href="#Proxy-Instance" class="headerlink" title="Proxy Instance"></a>Proxy Instance</h2><p><img src="/gallery/post/aws/aws61.png" alt="Proxy Instance의 통신 순서"></p><p>Proxy 는 일종의 대리자로 클라이언트와 서버 중간 통신을 대신 처리 해주는 역할을 한다.<br>즉, 자체적으로 가진 인터넷 게이트웨이의 역할 및 주소 변환, 트래픽 전송 등의 기능을 OS 계층에 따라 여러번 수행 하지 않고, 미리 세팅된 Proxy 설정으로 <strong>한번에</strong> 대신 처리 해주는 역할을 한다.</p><ol><li>EC2 인스턴스 -&gt; HTTP 요청(미리 설정) -&gt; Proxy Instance로 전송</li><li>요청한 패킷을 Proxy Instance가 자체적으로 처리(IP 변환 및 질의 응답 값 변환)</li><li>새로운 TCP 연결 생성 및 목적지 포트 80 선택</li><li>HTTP 헤더에 EC2 인스턴스가 요청한 내용을 포함하여 전달</li></ol><hr>출처)  Cloudnet@ 팀의 ANOS (AWS Network Online Study 2기 학습 내용)<p><a href="https://cloudneta.github.io/">https://cloudneta.github.io/</a> </p>]]></content:encoded>
      
      
      <category domain="https://jesuisjavert.github.io/categories/Network/">Network</category>
      
      <category domain="https://jesuisjavert.github.io/categories/Network/AWS/">AWS</category>
      
      <category domain="https://jesuisjavert.github.io/categories/Network/AWS/Gateway/">Gateway</category>
      
      
      <category domain="https://jesuisjavert.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Cloud/">Cloud</category>
      
      <category domain="https://jesuisjavert.github.io/tags/VPC/">VPC</category>
      
      <category domain="https://jesuisjavert.github.io/tags/NATGateWay/">NATGateWay</category>
      
      <category domain="https://jesuisjavert.github.io/tags/InternetGateway/">InternetGateway</category>
      
      <category domain="https://jesuisjavert.github.io/tags/NATDevice/">NATDevice</category>
      
      <category domain="https://jesuisjavert.github.io/tags/ProxyInstance/">ProxyInstance</category>
      
      
      <comments>https://jesuisjavert.github.io/2021/02/15/aws-study9/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>VPC Endpoint &amp; NAT Device &amp; MetaData</title>
      <link>https://jesuisjavert.github.io/2021/02/11/aws-study8/</link>
      <guid>https://jesuisjavert.github.io/2021/02/11/aws-study8/</guid>
      <pubDate>Thu, 11 Feb 2021 06:48:19 GMT</pubDate>
      
      <description>&lt;center&gt;
&lt;img src=&quot;/gallery/post/aws/aws48.png&quot; width=&quot;500&quot; height=&quot;500&quot;&gt;&lt;br&gt;
VPC 끝포인트 설정을 통해 안전한 통신 환경을 제공해보자
&lt;/center&gt;

&lt;h2 id=&quot;VPC-엔드포인트&quot;&gt;&lt;a href=&quot;#VPC-엔드포인트&quot; class=&quot;headerlink&quot; title=&quot;VPC 엔드포인트&quot;&gt;&lt;/a&gt;VPC 엔드포인트&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/gallery/post/aws/aws49.png&quot; alt=&quot;VPC 엔드포인트가 왜 필요할까?&quot;&gt;&lt;/p&gt;
&lt;p&gt;AWS에서 제공되는 대부분의 서비스에 접근하려면, 퍼블릭 네트워크 통신이 필요하다.&lt;br&gt;하지만 금융 서비스처럼 강력한 보안 요건을 충족하려면, 격리된 프라이빗 서브넷 내에&lt;br&gt;자원이 생성 되어야 하며, 인터넷 통신이 되지않는 프라이빗 서브넷이 외부 퍼블릭&lt;br&gt;네트워크 통신이 가능하도록 만들어 주는 것이 VPC 엔드포인트이다!&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<center><img src="/gallery/post/aws/aws48.png" width="500" height="500"><br>VPC 끝포인트 설정을 통해 안전한 통신 환경을 제공해보자</center><h2 id="VPC-엔드포인트"><a href="#VPC-엔드포인트" class="headerlink" title="VPC 엔드포인트"></a>VPC 엔드포인트</h2><p><img src="/gallery/post/aws/aws49.png" alt="VPC 엔드포인트가 왜 필요할까?"></p><p>AWS에서 제공되는 대부분의 서비스에 접근하려면, 퍼블릭 네트워크 통신이 필요하다.<br>하지만 금융 서비스처럼 강력한 보안 요건을 충족하려면, 격리된 프라이빗 서브넷 내에<br>자원이 생성 되어야 하며, 인터넷 통신이 되지않는 프라이빗 서브넷이 외부 퍼블릭<br>네트워크 통신이 가능하도록 만들어 주는 것이 VPC 엔드포인트이다!</p><a id="more"></a><h3 id="Endpoint-유형"><a href="#Endpoint-유형" class="headerlink" title="Endpoint 유형"></a>Endpoint 유형</h3><p><img src="/gallery/post/aws/aws50.png" alt="VPC 엔드포인트의 유형"></p><p>크게 종류는 3가지로 나뉜다.</p><blockquote><ol><li>게이트웨이 엔드포인트 - AWS S3 , AWS DynamoDB</li><li>인터페이스 엔드포인트 - 그 외 나머지 모든 AWS 서비스</li><li>인터페이스 엔드포인트 서비스 - Custom VPC와 연결</li></ol></blockquote><p>3가지로 나뉘지만 대부분은 위쪽 2개를 쓴다.<br>게이트웨이 엔드포인트가 S3, DynamoDB 와 연결되고,<br>그 외 대부분의 AWS 서비스는 인터페이스 엔드포인트를 쓴다 라고 알면 된다.</p><h3 id="Endpoint-특징"><a href="#Endpoint-특징" class="headerlink" title="Endpoint 특징"></a>Endpoint 특징</h3><blockquote><ol><li>보안 측면 강화(프라이빗 연결을 통해 외부 노출 X)</li><li>서비스 제약 (연결 대상 서비스는 동일 리전에 속한 서비스만 가능)</li><li>권한 제어 (AWS IAM기능을 통한 정책 수립)</li></ol></blockquote><h3 id="Endpoint-가격정책"><a href="#Endpoint-가격정책" class="headerlink" title="Endpoint 가격정책"></a>Endpoint 가격정책</h3><p>가격은 AWS 정책을 따져보고, 분석 해 봤을 때 2가지 결론이 나온다.</p><blockquote><ol><li> 게이트웨이 엔드포인트(S3, DynamoDB)는 사용은 무료이며 트래픽 비용이 NAT Gateway 보다 저렴하니 무조건 사용하자</li><li>인터페이스 엔드포인트는 일반적으로 NAT Gateway 보다는 비용이 나오지만 안정성과 보안성을 제공하니 사용을 권장</li></ol></blockquote><h2 id="Meta-Data"><a href="#Meta-Data" class="headerlink" title="Meta Data ?"></a>Meta Data ?</h2><p><img src="/gallery/post/aws/aws54.png" alt="Meta Data"></p><p><strong>메타데이터(Metadata)는 객체에 대한 키와 값 Key &amp; Value에 대한 집합 데이터.</strong><br>EC2 인스턴스의 정보를 갖고 있어, AWS 서비스 사용 시 혹은 EC2 설정 자동화 등에 활용</p><p>ex) Django의 setting.py 파일에 config setting 값을 json파일로 따로 저장해두고, aws s3에 대한 access_key_id 와 secret_access_key, Bucket 이름 등을 미리 저장해두고 Build 시킬 때, 읽어 오는 형식</p><hr><h2 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h2><p><img src="/gallery/post/aws/aws51.png" alt="VPC 엔드포인트 실습예제 아키텍쳐"></p><p>기본 구성은 Cloudformation 으로 미리 준비된 yaml 파일을 생성!</p><p><img src="/gallery/post/aws/aws51.png" alt="Public Instance-&gt;S3 접근하면 대역폭 내에서 매번 바뀌는 S3 IP를 볼 수 있다"></p><p><img src="/gallery/post/aws/aws52.png" alt="Curl 169.254.169.254(자기 자신) 명령어로 Meta Data 확인하기"><br>(CF로 설정할때 스크립트로 Linux로 변수 선언을 해두어서 뜨는 것임)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AZ&#x3D;&#96;curl -s http:&#x2F;&#x2F;169.254.169.254&#x2F;latest&#x2F;meta-data&#x2F;placement&#x2F;availability-zone&#96;</span><br><span class="line">IP&#x3D;&#96;curl -s http:&#x2F;&#x2F;169.254.169.254&#x2F;latest&#x2F;meta-data&#x2F;local-ipv4&#96;</span><br><span class="line">yum install -y httpd</span><br><span class="line">service httpd start</span><br><span class="line">chkconfig httpd on</span><br><span class="line">echo &quot;&lt;html&gt;&lt;h1&gt;Hello from Web Server - Region ( &quot;$AZ&quot; ) - Private IP ( &quot;$IP&quot; )&lt;&#x2F;h1&gt;&lt;&#x2F;html&gt;&quot; &gt; &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html</span><br></pre></td></tr></table></figure><p><img src="/gallery/post/aws/aws55.png" alt="AWS 콘솔에서 EndPoint 생성하기!"></p><p>VPC -&gt; 엔드포인트 -&gt; 엔드포인트 생성하기 탭에서<br>원하는 서비스 검색 + VPC 와 서브넷 구성을 눌러주면 엔드포인트가 생성되고<br>프라이빗 서브넷에서 퍼블릭 aws 서비스까지 ping을 찍었을 때 응답이 오게 된다!<br>(dig 는 DNS 서버에서 주소만 가져오는 것, ping이 통신)</p><hr>출처)  Cloudnet@ 팀의 ANOS (AWS Network Online Study 2기 학습 내용)<p><a href="https://cloudneta.github.io/">https://cloudneta.github.io/</a> </p>]]></content:encoded>
      
      
      <category domain="https://jesuisjavert.github.io/categories/Network/">Network</category>
      
      <category domain="https://jesuisjavert.github.io/categories/Network/AWS/">AWS</category>
      
      <category domain="https://jesuisjavert.github.io/categories/Network/AWS/Gateway/">Gateway</category>
      
      
      <category domain="https://jesuisjavert.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Cloud/">Cloud</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Amazon/">Amazon</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Network/">Network</category>
      
      <category domain="https://jesuisjavert.github.io/tags/VPC/">VPC</category>
      
      <category domain="https://jesuisjavert.github.io/tags/NATGateWay/">NATGateWay</category>
      
      <category domain="https://jesuisjavert.github.io/tags/EndPoint/">EndPoint</category>
      
      <category domain="https://jesuisjavert.github.io/tags/MetaData/">MetaData</category>
      
      <category domain="https://jesuisjavert.github.io/tags/S3/">S3</category>
      
      
      <comments>https://jesuisjavert.github.io/2021/02/11/aws-study8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>어느날 .. 당신의 cmd 창이 심심하다면.. Figlet &amp; Toilet</title>
      <link>https://jesuisjavert.github.io/2021/02/04/figlet/</link>
      <guid>https://jesuisjavert.github.io/2021/02/04/figlet/</guid>
      <pubDate>Thu, 04 Feb 2021 08:36:23 GMT</pubDate>
      
      <description>&lt;center&gt;
&lt;img src=&quot;/gallery/post/linux/linux1.png&quot; width=&quot;400&quot; height=&quot;300&quot;&gt;&lt;br&gt;
Hello .. My name is... SkyNet... (Feat. asciiview)
&lt;/center&gt;

&lt;h2 id=&quot;어느날-나는-심심하고야-말았다&quot;&gt;&lt;a href=&quot;#어느날-나는-심심하고야-말았다&quot; class=&quot;headerlink&quot; title=&quot;어느날, 나는 심심하고야 말았다&quot;&gt;&lt;/a&gt;어느날, 나는 심심하고야 말았다&lt;/h2&gt;&lt;p&gt;원래 가장 바쁠 때, 가장 딴 짓이 하고 싶은 법.&lt;br&gt;Linux 환경에서 vi로 이것저것 세팅값을 건드리고 있다가,&lt;br&gt;매주 참여하는 AWS 스터디 (ANOS) 에, php 파일을 하나 만들어 기증해 보기로 했다.&lt;/p&gt;
&lt;p&gt;CUI 환경에서 ip ping test 를 하는 우리 스터디원 분들의 눈을&lt;br&gt;1초라도 조금 더 즐겁게 만들어 보고자, CMD창에 텍스트를 그려주는 툴을 찾아보게 되었고,&lt;br&gt;그 결과 더욱 어마어마한(?) 툴 들을 써보게 됐다.&lt;br&gt;내가 찾은 Linux 상의 그리기 툴은 4가지 인데, 각각의 설치는 간단하다.&lt;/p&gt;
&lt;p&gt;Linux 환경에서 각각의 패키지를 다운받고, 명령어를 입력해주기만 하면 끝!&lt;/p&gt;
&lt;p&gt;Figlet 과 Toilet 은 텍스트를 예쁜 글자로 그려주는 패키지,&lt;br&gt;AsciiView 와 Cacaview 는 이미지를 텍스트로 변환해주는 패키지이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<center><img src="/gallery/post/linux/linux1.png" width="400" height="300"><br>Hello .. My name is... SkyNet... (Feat. asciiview)</center><h2 id="어느날-나는-심심하고야-말았다"><a href="#어느날-나는-심심하고야-말았다" class="headerlink" title="어느날, 나는 심심하고야 말았다"></a>어느날, 나는 심심하고야 말았다</h2><p>원래 가장 바쁠 때, 가장 딴 짓이 하고 싶은 법.<br>Linux 환경에서 vi로 이것저것 세팅값을 건드리고 있다가,<br>매주 참여하는 AWS 스터디 (ANOS) 에, php 파일을 하나 만들어 기증해 보기로 했다.</p><p>CUI 환경에서 ip ping test 를 하는 우리 스터디원 분들의 눈을<br>1초라도 조금 더 즐겁게 만들어 보고자, CMD창에 텍스트를 그려주는 툴을 찾아보게 되었고,<br>그 결과 더욱 어마어마한(?) 툴 들을 써보게 됐다.<br>내가 찾은 Linux 상의 그리기 툴은 4가지 인데, 각각의 설치는 간단하다.</p><p>Linux 환경에서 각각의 패키지를 다운받고, 명령어를 입력해주기만 하면 끝!</p><p>Figlet 과 Toilet 은 텍스트를 예쁜 글자로 그려주는 패키지,<br>AsciiView 와 Cacaview 는 이미지를 텍스트로 변환해주는 패키지이다.</p><a id="more"></a><h2 id="Figlet"><a href="#Figlet" class="headerlink" title="Figlet"></a>Figlet</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install figlet</span><br><span class="line">figlet &quot;원하는 텍스트&quot;</span><br></pre></td></tr></table></figure><p><img src="/gallery/post/linux/linux3.png" alt="Figlet의 기본 글자체. 깔끔하고 명시성이 좋다"></p><p>Figlet의 기본 글자체는 큼직큼직하면서도 텍스트 공간을 많이 잡아 먹지 않아<br>역시 내가 찾아본 여러 블로거들이 추천해줄만 한 패키지라는 걸 느꼈다.<br>피글렛은 기본 글자체 외에도 다양한 글자체를 제공하는데,</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ls /usr/share/figlet/</span><br></pre></td></tr></table></figure><p>명령어를 사용하면, 기본적으로 깔려있는 폰트들을 확인 할 수 있고,<br><img src="/gallery/post/linux/linux5.png" alt="Figlet이 제공하는 많은 글자체들"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">figlet -f 폰트이름 &quot;원하는 텍스트&quot;</span><br></pre></td></tr></table></figure><p>를 사용하면 원하는 폰트로 텍스트를 출력할 수 있다.<br><img src="/gallery/post/linux/linux6.png" alt="내 최애는 slant, future, pagga"></p><h2 id="Toilet"><a href="#Toilet" class="headerlink" title="Toilet"></a>Toilet</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install toilet</span><br><span class="line">toilet &quot;원하는 텍스트&quot;</span><br></pre></td></tr></table></figure><p><img src="/gallery/post/linux/linux4.png" alt="Toilet의 글자체는 좀 더 넓어서 짧은 단어를 쓸 때 써야할 것 같다"></p><p>Toilet 역시 비슷한 툴이다. 글자크기가 좀 더 큰 것 같다.<br>Figlet의 글자체도 활용이 가능하다고 한다.</p><h2 id="AsciiView"><a href="#AsciiView" class="headerlink" title="AsciiView"></a>AsciiView</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install aview</span><br><span class="line">asciiview &quot;원하는 그림&quot;</span><br></pre></td></tr></table></figure><p><img src="/gallery/post/linux/linux1.png" alt="와우.. 매트릭스나 터미네이터에라도 나올 것 같은 얼굴이 되었다"></p><p>Asciiview 는 기본적으로 텍스트를 꽉 꽉 채워 그림을 표현하기 때문에,<br>디테일이 많은 이미지나 배경이 있는 이미지는 눈에 잘 들어오지 않아서<br>내 증명사진을 넣었더니.. 마치 SF영화 속 AI 인공지능의 얼굴이 나왔다 ㅋㅋㅋㅋ<br>근데.. 나름 마음에 들어 버릴지도? </p><h2 id="CacaView"><a href="#CacaView" class="headerlink" title="CacaView"></a>CacaView</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install caca-utils</span><br><span class="line">cacaview  &quot;원하는 그림&quot;</span><br></pre></td></tr></table></figure><p><img src="/gallery/post/linux/linux7.png" alt="컬러풀한 알파고가 되어버렸다"></p><p>Cacaview 역시 어마어마한 내 얼굴을 출력해주었다 ㅋㅋㅋㅋ<br>컬러가 조금 더 들어가는 것 같은데, 뭔가 더 기괴해서 마음에 쏙 든다(?)</p><p>아무튼.. 공부 도중에 딴 짓은 너무 재밌고, 그게 컴퓨터로 하는 거면 더 재밌는 것 같다.<br>오늘도 뿌-듯한 하루였따.</p><h2 id="Trouble-Shooting"><a href="#Trouble-Shooting" class="headerlink" title="Trouble Shooting"></a>Trouble Shooting</h2><h3 id="linux-install-error"><a href="#linux-install-error" class="headerlink" title="linux install error"></a>linux install error</h3><p>난 AWS 환경에서 EC2 인스턴스를 만들고 시작하느라,<br>Unable to Locate package 오류가 떴었다.<br>처음에 sudo apt-get upgrade 한번 해주는 것도 잊지 말자.</p><h3 id="asciiview"><a href="#asciiview" class="headerlink" title="asciiview"></a>asciiview</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">convert</span> file.jpg file.pgm</span><br><span class="line">aview file.pgm</span><br></pre></td></tr></table></figure><p>asciiview 는 가끔 이미지 파일을 못 읽어 들일 때가 있는데,<br>확장자를 pgm 파일로 convert 해주면 읽어 들일 수 있게 된다.</p>]]></content:encoded>
      
      
      <category domain="https://jesuisjavert.github.io/categories/Linux/">Linux</category>
      
      
      <category domain="https://jesuisjavert.github.io/tags/Linux/">Linux</category>
      
      <category domain="https://jesuisjavert.github.io/tags/ColorBashShell/">ColorBashShell</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Figlet/">Figlet</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Toilet/">Toilet</category>
      
      <category domain="https://jesuisjavert.github.io/tags/AsciiView/">AsciiView</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Cacaview/">Cacaview</category>
      
      
      <comments>https://jesuisjavert.github.io/2021/02/04/figlet/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS Private Subnet내의 EC2 접속 &amp; NAT Gateway</title>
      <link>https://jesuisjavert.github.io/2021/02/03/aws-study7/</link>
      <guid>https://jesuisjavert.github.io/2021/02/03/aws-study7/</guid>
      <pubDate>Wed, 03 Feb 2021 07:55:17 GMT</pubDate>
      
      <description>&lt;center&gt;
&lt;img src=&quot;/gallery/post/aws/privatevpc.jpg&quot; width=&quot;500&quot; height=&quot;500&quot;&gt;&lt;br&gt;
나만의 작고 귀여운 프라이빗 서브넷을 만들어보자. 물논 밖으로 나가려면 대문을 거쳐가야 한다.
&lt;/center&gt;

&lt;h2 id=&quot;프라이빗-서브넷-생성하기&quot;&gt;&lt;a href=&quot;#프라이빗-서브넷-생성하기&quot; class=&quot;headerlink&quot; title=&quot;프라이빗 서브넷 생성하기&quot;&gt;&lt;/a&gt;프라이빗 서브넷 생성하기&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/gallery/post/aws/aws36.png&quot; alt=&quot;실습으로 진행 할 아키텍쳐의 구조도&quot;&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<center><img src="/gallery/post/aws/privatevpc.jpg" width="500" height="500"><br>나만의 작고 귀여운 프라이빗 서브넷을 만들어보자. 물논 밖으로 나가려면 대문을 거쳐가야 한다.</center><h2 id="프라이빗-서브넷-생성하기"><a href="#프라이빗-서브넷-생성하기" class="headerlink" title="프라이빗 서브넷 생성하기"></a>프라이빗 서브넷 생성하기</h2><p><img src="/gallery/post/aws/aws36.png" alt="실습으로 진행 할 아키텍쳐의 구조도"></p><a id="more"></a><p>VPC내에 Private 서브넷을 만들면 별도로 라우팅 테이블이 생성된다.<br>하지만 이 라우팅 테이블은 외부와 연결되지 않기 때문에<br>인터넷 연결을 하려면, 별도의 NAT 게이트 웨이가 필요하다.<br>(프라이빗 서브넷 내의 EC2는 퍼블릭 IP 할당도 되지 않는다!)</p><p>Private 서브넷의 라우팅 테이블을 NAT 게이트 웨이와 연결 시켜 보자.</p><p><img src="/gallery/post/aws/aws37.png" alt="프라이빗 서브넷 생성! CIDR 블록 정보 주의"><br>퍼블릭과 서브넷 생성 방법은 다르지만, 프라이빗 과 퍼블릭 구별을 해주기 위해서 (서브넷 마스크 ❗)<br>CIDR 블록을 10.0.1.0/24 로 설정해주는 걸 잊지 말자</p><h2 id="NAT-게이트-웨이-생성"><a href="#NAT-게이트-웨이-생성" class="headerlink" title="NAT 게이트 웨이 생성"></a>NAT 게이트 웨이 생성</h2><p><img src="/gallery/post/aws/aws38.png" alt="NAT 게이트 웨이 생성할 때 유의점!!"><br>지금 우리의 목표가 프라이빗 서브넷을 외부 인터넷 망과 연결하는 것이기 때문에,<br>NAT Gateway 를 생성할 때, 왠지 프라이빗 서브넷 내에 만들어야 할 것 같은 기분이 드는데,<br>절대 그렇지 않고 <strong>퍼블릭 Subnet</strong> 안에 만들어야 한다!!</p><p><strong>Private -&gt; Routing Table -&gt; NATGateway -&gt; InternetGateway -&gt; Internet</strong></p><p>우리가 원하는 인터넷 통신의 경로가 이렇기에,<br>Private 서브넷의 라우팅 테이블 까지가 Private의 영역,<br>NATGateway 부터가 퍼블릭 서브넷의 영역이라고 이해해두면 좋을 것 같다.</p><p>그 뒤 NAT Gateway의 <strong>탄력적 IP도 할당</strong>받아주고, 생성!</p><p>(Attention) NATGateway는 생성하는데 시간이 좀 걸린다. 허리를 한 번 피고 오자.)</p><h2 id="프라이빗-라우팅-테이블-생성"><a href="#프라이빗-라우팅-테이블-생성" class="headerlink" title="프라이빗 라우팅 테이블 생성"></a>프라이빗 라우팅 테이블 생성</h2><p><img src="/gallery/post/aws/aws39.png" alt="VPC내에 라우팅 테이블을 만들어 준다"></p><p>그 뒤 서브넷 연결 편집 버튼을 클릭!</p><p><img src="/gallery/post/aws/aws40.png" alt="방금 만든 Private Subnet으로 연결을 해준다"></p><p><img src="/gallery/post/aws/aws40.png" alt="프라이빗 서브넷의 라우팅 테이블을 NAT Gateway와 연결"></p><p>해주면 끝! ㅎㅎ 간단하쥬~?</p><h2 id="검증"><a href="#검증" class="headerlink" title="검증"></a>검증</h2><p><img src="/gallery/post/aws/aws42.png" alt="프라이빗 서브넷의 라우팅 테이블을 NAT Gateway와 연결"></p><p>Private Subnet 내에 EC2 Instance를 생성한다.</p><p><img src="/gallery/post/aws/aws42.png" alt="EC2 생성 과정"><br>생성한 VPC 내의 Private Subnet 으로 해주고,<br>퍼블릭 IP는 어짜피 작동하지 않으니 비활성화로 해준다.</p><p>그리고 중요하게 설정해야 하는 것이 있는데, 아래쪽에<br><img src="/gallery/post/aws/aws43.png" alt="사용자 데이터를 입력해 준다"></p><p>이 칸에 사용자 데이터 (EC2를 생성할 때 사용할 명령어)를 다음과 같이 입력해 준다.</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">(</span><br><span class="line"><span class="built_in">echo</span> &quot;qwe123&quot;</span><br><span class="line"><span class="built_in">echo</span> &quot;qwe123&quot;</span><br><span class="line">) | passwd --stdin root</span><br><span class="line">sed -i &quot;s/^PasswordAuthentication no/PasswordAuthentication yes/g&quot; /etc/ssh/sshd_config</span><br><span class="line">sed -i &quot;s/^#PermitRootLogin yes/PermitRootLogin yes/g&quot; /etc/ssh/sshd_config</span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><p><img src="/gallery/post/aws/aws44.png" alt="입력하면 이렇게 된다"></p><p>그 이유는, 프라이빗 서브넷내의 EC2 인스턴스는 외부에서의 ssh 접근을 자동으로 차단하기 때문이다.<br>그래서 기본적으로 되어있는 비밀번호 로그인과, 루트 아이디로의 접근을 풀어주고<br>root 아이디의 비밀번호를 기본 세팅값 (qwe123)으로 만들어주는 값을 EC2가 생성될 때 입력해준 것이다.</p><p>(실제 프라이빗 서브넷은 이렇게 구성을 하면 절대 안됨! 보안에 허술)</p><h3 id="Private-서브넷-내의-EC2-접근하기"><a href="#Private-서브넷-내의-EC2-접근하기" class="headerlink" title="Private 서브넷 내의 EC2 접근하기"></a>Private 서브넷 내의 EC2 접근하기</h3><p>Private 서브넷 내의 EC2 인스턴스에 접근 하려면,<br>먼저 Public 서브넷의 EC2 인스턴스에 ssh 키로 접근 후,<br>콘솔 내에서 ssh root@Private IP주소 로 입력하면 비밀번호를 입력하고 접근을 할 수 있게 된다.</p><p><img src="/gallery/post/aws/aws45.png" alt="Public EC2-&gt;Private EC2 접근하기! 주소를 복붙하면 편하다"></p><p><img src="/gallery/post/aws/aws46.png" alt="프라이빗 서브넷내의 EC2에서 여러가지 검증 작업을 해보자. 잘된다!"></p><p>짜잔!<br>프라이빗 서브넷 내의 EC2 자원에서 인터넷 연결까지를 해보았다!!</p><p>실습이 끝난 후, 자원을 삭제 하는 것도 잊지 말자 ! ㅎㅎ 시간이 곧 돈이니깐 ㅎㅎ<br>(지난달에 4만 5천원 요금 폭탄 맞은 사람 누구? 헤헿 나잖아)</p><p><strong>삭제는? 설치의 역순 ㅎ</strong></p><hr>출처)  Cloudnet@ 팀의 ANOS (AWS Network Online Study 2기 학습 내용)https://cloudneta.github.io/]]></content:encoded>
      
      
      <category domain="https://jesuisjavert.github.io/categories/Network/">Network</category>
      
      <category domain="https://jesuisjavert.github.io/categories/Network/AWS/">AWS</category>
      
      <category domain="https://jesuisjavert.github.io/categories/Network/AWS/VPC/">VPC</category>
      
      
      <category domain="https://jesuisjavert.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Cloud/">Cloud</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Amazon/">Amazon</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Network/">Network</category>
      
      <category domain="https://jesuisjavert.github.io/tags/VPC/">VPC</category>
      
      <category domain="https://jesuisjavert.github.io/tags/NATGateWay/">NATGateWay</category>
      
      <category domain="https://jesuisjavert.github.io/tags/PrivateSubnet/">PrivateSubnet</category>
      
      
      <comments>https://jesuisjavert.github.io/2021/02/03/aws-study7/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS VPC 서브넷 구성과 네트워크 통신 과정</title>
      <link>https://jesuisjavert.github.io/2021/01/27/aws-study6/</link>
      <guid>https://jesuisjavert.github.io/2021/01/27/aws-study6/</guid>
      <pubDate>Wed, 27 Jan 2021 06:14:20 GMT</pubDate>
      
      <description>&lt;center&gt;
&lt;img src=&quot;/gallery/post/aws/tcpip.jpg&quot; width=&quot;500&quot; height=&quot;500&quot;&gt;&lt;br&gt;
TCP/IP 전송 방식은 기차놀이처럼 줄줄이 연결되어있다. 우리는 기차역을 만들 것이다.
&lt;/center&gt;

&lt;h2 id=&quot;VPC-퍼블릭-프라이빗-서브넷-설정-실습&quot;&gt;&lt;a href=&quot;#VPC-퍼블릭-프라이빗-서브넷-설정-실습&quot; class=&quot;headerlink&quot; title=&quot;VPC 퍼블릭 / 프라이빗 서브넷 설정 실습&quot;&gt;&lt;/a&gt;VPC 퍼블릭 / 프라이빗 서브넷 설정 실습&lt;/h2&gt;&lt;h3 id=&quot;VPC-생성&quot;&gt;&lt;a href=&quot;#VPC-생성&quot; class=&quot;headerlink&quot; title=&quot;VPC 생성&quot;&gt;&lt;/a&gt;VPC 생성&lt;/h3&gt;&lt;p&gt;VPC의 생성은 AWS의 VPC 메뉴에서 할 수 있다.&lt;br&gt;VPC 생성 버튼을 클릭하면, 다음과 같은 화면이 나온다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/gallery/post/aws/aws22.png&quot; alt=&quot;VPC에 이름과 IP CIDR 블록을 입력해준다&quot;&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<center><img src="/gallery/post/aws/tcpip.jpg" width="500" height="500"><br>TCP/IP 전송 방식은 기차놀이처럼 줄줄이 연결되어있다. 우리는 기차역을 만들 것이다.</center><h2 id="VPC-퍼블릭-프라이빗-서브넷-설정-실습"><a href="#VPC-퍼블릭-프라이빗-서브넷-설정-실습" class="headerlink" title="VPC 퍼블릭 / 프라이빗 서브넷 설정 실습"></a>VPC 퍼블릭 / 프라이빗 서브넷 설정 실습</h2><h3 id="VPC-생성"><a href="#VPC-생성" class="headerlink" title="VPC 생성"></a>VPC 생성</h3><p>VPC의 생성은 AWS의 VPC 메뉴에서 할 수 있다.<br>VPC 생성 버튼을 클릭하면, 다음과 같은 화면이 나온다.</p><p><img src="/gallery/post/aws/aws22.png" alt="VPC에 이름과 IP CIDR 블록을 입력해준다"></p><a id="more"></a><p>VPC가 설정이 되면, 자동으로 라우팅 테이블도 생성이 된다. 라우터 테이블 메뉴에 들어가서 확인할 수 있다.</p><h3 id="라우팅-테이블-생성"><a href="#라우팅-테이블-생성" class="headerlink" title="라우팅 테이블 생성"></a>라우팅 테이블 생성</h3><p><img src="/gallery/post/aws/aws23.png" alt="JavertRoute 라고 이름 지어 줬다."><br>뒤쪽의 VPC ID를 확인해보면, 원래 있던 계정의 Default VPC인지, 방금 생성한 VPC인지 확인 할 수 있다.<br>기본 라우팅 테이블을 보면, 10.0.0.0/16 이라고 하는 로컬 대역의 라우팅 영역이 설정된 걸 볼 수 있다.<br>(주의) 가상 라우팅 테이블은 숨겨져 있어서 볼 수 없음. 우리가 생성한 건 기본 라우팅 테이블)</p><p>이제는 VPC내에 서브넷을 생성해 보자.</p><h3 id="서브넷-생성"><a href="#서브넷-생성" class="headerlink" title="서브넷 생성"></a>서브넷 생성</h3><p><img src="/gallery/post/aws/aws24.png" alt="서브넷 생성 옵션들"><br>서브넷을 생성할 때, 어떤 VPC 내에 생성할 지 선택해주고,<br>서브넷 이름과, 가용영역, CIDR 블록을 입력해준다.<br>(❗ AZ의 a 와 c가 EC2 타입을 full로 지원한다.)</p><p>이제 우리가 만든 서브넷과 인터넷을 연결하기 위해선 인터넷 게이트 웨이가 필요하다</p><h3 id="인터넷-게이트웨이-생성"><a href="#인터넷-게이트웨이-생성" class="headerlink" title="인터넷 게이트웨이 생성"></a>인터넷 게이트웨이 생성</h3><p><img src="/gallery/post/aws/aws25-1.png" alt="인터넷 게이트 웨이 생성"></p><p><img src="/gallery/post/aws/aws25-3.png" alt="생성을 완료하자마자 초록 안내창이 뜬다!"></p><p>간단하게 인터넷 게이트 웨이 역시 생성 할 수 있고, 서브넷과 연결 가능하다.</p><p>이제 퍼블릭 서브넷에 외부와 통신하는 라우팅 테이블 정보가 없으니,<br>라우팅 테이블과 서브넷을 연결해 주자.</p><h3 id="라우팅-테이블과-서브넷-연결"><a href="#라우팅-테이블과-서브넷-연결" class="headerlink" title="라우팅 테이블과 서브넷 연결"></a>라우팅 테이블과 서브넷 연결</h3><p><img src="/gallery/post/aws/aws26.png" alt="라우팅 테이블을 생성하고 서브넷 연결 편집을 누른다!"><br>라우팅 테이블의 서브넷 연결 탭을 보면, 아직 라우팅 테이블과 연결되어있지 않은<br>서브넷의 목록이 보이는데, 이걸 서브넷 연결 편집 버튼을 눌러<br>서브넷과 라우팅 테이블을 연결 시켜 준다.</p><p><strong>라우팅 테이블의 의미</strong>는<br>이 대역과 통신하려면 어느 대상으로 보낼 것인가? 의 의미이다<br>즉 왼쪽의 대상은 <strong>목적지 대역</strong>, 오른쪽의 대상은 <strong>도착지 대역</strong></p><p><img src="/gallery/post/aws/aws27.png" alt="라우팅 편집"></p><p>지금 현재 세팅은 <strong>10.0.0.0/16은 local 대역으로 보내고,</strong><br><strong>10.0.0.0/16 로 가는 걸 제외한 나머지 모든 통신은</strong><br><strong>아까 만들었던 Internet Gateway로 보낸다</strong> 라는 의미!</p><h2 id="서브넷-내에-EC2-생성하기"><a href="#서브넷-내에-EC2-생성하기" class="headerlink" title="서브넷 내에 EC2 생성하기"></a>서브넷 내에 EC2 생성하기</h2><p><img src="/gallery/post/aws/aws28.png" alt="서브넷과 퍼블릭 IP활동을 활성화로 바꾸고 EC2 생성"><br>인터넷 연결을 위해 퍼블릭 IP를 할당받고 생성을 해주면, EC2가 서브넷 내에 생성이 된다.</p><p><img src="/gallery/post/aws/aws30.png" alt="보안그룹 구성할 때 SSH로 접근과 핑 테스트를 위해 IP4단계 열기"></p><p><img src="/gallery/post/aws/aws31.png" alt="생성된 EC2를 확인해보면 퍼블릭 IP주소가 나온다"></p><h2 id="오늘-만든-시스템-아키텍처의-구성"><a href="#오늘-만든-시스템-아키텍처의-구성" class="headerlink" title="오늘 만든 시스템 아키텍처의 구성"></a>오늘 만든 시스템 아키텍처의 구성</h2><p>지금까지 만든 구성 환경 내에서 인터넷 연결이 되는 과정을<br>도식으로 정리해 보면 다음과 같게 된다.</p><p><img src="/gallery/post/aws/aws35.png" alt="칙칙폭폭 EC2기차 출발합니다!"></p><p><img src="/gallery/post/aws/aws32.png" alt="L3단계에서 IP가 바뀌는 과정"></p><h3 id="EC2-에-접근해서-여러-정보를-찍어보자"><a href="#EC2-에-접근해서-여러-정보를-찍어보자" class="headerlink" title="EC2 에 접근해서 여러 정보를 찍어보자"></a>EC2 에 접근해서 여러 정보를 찍어보자</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$route -n</span><br><span class="line">$ip neigh show</span><br><span class="line">$arp -e</span><br><span class="line">$curl ipinfo.io</span><br></pre></td></tr></table></figure><p><img src="/gallery/post/aws/aws33.png" alt="여러 명령어를 찍어보고 잘 작동하는지 확인이 가능하다"></p><hr>출처)  Cloudnet@ 팀의 ANOS (AWS Network Online Study 2기 학습 내용)https://cloudneta.github.io/]]></content:encoded>
      
      
      <category domain="https://jesuisjavert.github.io/categories/Network/">Network</category>
      
      <category domain="https://jesuisjavert.github.io/categories/Network/AWS/">AWS</category>
      
      <category domain="https://jesuisjavert.github.io/categories/Network/AWS/VPC/">VPC</category>
      
      
      <category domain="https://jesuisjavert.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Cloud/">Cloud</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Amazon/">Amazon</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Network/">Network</category>
      
      <category domain="https://jesuisjavert.github.io/tags/VPC/">VPC</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Subnet/">Subnet</category>
      
      <category domain="https://jesuisjavert.github.io/tags/InternetGateWay/">InternetGateWay</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Router/">Router</category>
      
      <category domain="https://jesuisjavert.github.io/tags/NATGateWay/">NATGateWay</category>
      
      
      <comments>https://jesuisjavert.github.io/2021/01/27/aws-study6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS VPC 프라이빗/퍼블릭 서브넷 &amp; 인터넷 게이트웨이 &amp; 라우팅 테이블</title>
      <link>https://jesuisjavert.github.io/2021/01/26/aws-study5/</link>
      <guid>https://jesuisjavert.github.io/2021/01/26/aws-study5/</guid>
      <pubDate>Tue, 26 Jan 2021 03:26:57 GMT</pubDate>
      
      <description>&lt;center&gt;
&lt;img src=&quot;/gallery/post/aws/vpc.jpg&quot;&gt;&lt;br&gt;
VPC를 설정 할 땐, 퍼블릭/프라이빗 영역설정이 중요하다
&lt;/center&gt;

&lt;h2 id=&quot;VPC-Virtual-Private-Cloud-란&quot;&gt;&lt;a href=&quot;#VPC-Virtual-Private-Cloud-란&quot; class=&quot;headerlink&quot; title=&quot;VPC (Virtual Private Cloud)란?&quot;&gt;&lt;/a&gt;VPC (Virtual Private Cloud)란?&lt;/h2&gt;&lt;p&gt;VPC는 Virtual Private Cloud의 약자로 AWS 클라우드 내 논리적으로 독립된 섹션을 제공하여,&lt;br&gt;사용자가 정의한 가상 네트워크상에서 다양한 AWs 리소스를 실행할 수 있게 지원한다.&lt;br&gt;한 마디로 &lt;strong&gt;독립된 가상의 클라우드 네트워크&lt;/strong&gt; 라 볼 수 있다.&lt;/p&gt;
&lt;p&gt;사용자는 VPC 내에 IP 대역, 인터페이스, 서브넷, 라우팅 테이블, 인터넷 게이트웨이, 보안 그룹,&lt;br&gt;네트워크 ACL 등을 생성하고 제어할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/gallery/post/aws/aws17.png&quot; alt=&quot;퍼블릭/프라이빗 서브넷이 하나씩 있는 VPC의 사례&quot;&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<center><img src="/gallery/post/aws/vpc.jpg"><br>VPC를 설정 할 땐, 퍼블릭/프라이빗 영역설정이 중요하다</center><h2 id="VPC-Virtual-Private-Cloud-란"><a href="#VPC-Virtual-Private-Cloud-란" class="headerlink" title="VPC (Virtual Private Cloud)란?"></a>VPC (Virtual Private Cloud)란?</h2><p>VPC는 Virtual Private Cloud의 약자로 AWS 클라우드 내 논리적으로 독립된 섹션을 제공하여,<br>사용자가 정의한 가상 네트워크상에서 다양한 AWs 리소스를 실행할 수 있게 지원한다.<br>한 마디로 <strong>독립된 가상의 클라우드 네트워크</strong> 라 볼 수 있다.</p><p>사용자는 VPC 내에 IP 대역, 인터페이스, 서브넷, 라우팅 테이블, 인터넷 게이트웨이, 보안 그룹,<br>네트워크 ACL 등을 생성하고 제어할 수 있다.</p><p><img src="/gallery/post/aws/aws17.png" alt="퍼블릭/프라이빗 서브넷이 하나씩 있는 VPC의 사례"></p><a id="more"></a><p>이쯤에서 네트워크 전송의 기본 개념에 대해 한 번 더 짚고 넘어가도록 하자.</p><h2 id="OSI-7계층"><a href="#OSI-7계층" class="headerlink" title="OSI 7계층"></a>OSI 7계층</h2><p><img src="/gallery/post/aws/aws18.png" alt="정처기 시험에 매번 빠지지 않고 등장하는 OSI 7계층"></p><p>네트워크 동작 과정을 7개의 계층으로 나누어 네트워크 통신 흐름을 한눈에 알아 볼 수 있다.<br>계층별로 하위 계층의 기능을 이용하고 상위 계층으로 기능을 제공하는 상하 관계!</p><ol><li>Physical 물리 계층 - 하드웨어 전송 기술</li><li>Data Link 계층 - 정보의 오류와 흐름을 관리하여 데이터의 전달</li><li>Network 계층 - 데이터를 목적지까지 빠르고 안전하게 전달(라우팅) / 최적의 노드경로 탐색</li><li>Transport 전송 계층 - 데이터의 유효성과 효율성</li><li>Session 계층 - 종단의 사용자 간의 응용 프로세스 통신 관리</li><li>Presentation 계층 - 데이터의 형식상 차이를 송/수신자간 이해할 수 있는 형태로 데이터를 표현</li><li>Application 계층 - 응용 프로세스와 직접 연계하여 실제 응용프로그램을 사용</li></ol><h2 id="퍼블릭-IP-와-프라이시-IP"><a href="#퍼블릭-IP-와-프라이시-IP" class="headerlink" title="퍼블릭 IP 와 프라이시 IP"></a>퍼블릭 IP 와 프라이시 IP</h2><p>기본적으로 네트워크의 통신 용도에 따라 퍼블릭 / 프라이빗으로 구분 짓는다.</p><p>퍼블릭 - 실제 인터넷 구간으로 통신하는 공공 네트워크<br>프라이빗 - 인터넷 구간이 아닌 내부적으로 통신하는 사설 네트워크</p><h3 id="퍼블릭-IP-공인-IP"><a href="#퍼블릭-IP-공인-IP" class="headerlink" title="퍼블릭 IP (공인 IP)"></a>퍼블릭 IP (공인 IP)</h3><ul><li>인터넷 구간의 통신 대상을 식별하기 위해 ISP에서 제공하는 IP 주소. (전세계 유일)</li></ul><h3 id="프라이빗-IP-사설-IP"><a href="#프라이빗-IP-사설-IP" class="headerlink" title="프라이빗 IP (사설 IP)"></a>프라이빗 IP (사설 IP)</h3><ul><li>독립된 네트워크에서 사용하는 내부 IP 주소.</li><li>3가지 대역 (Class)으로 고정<ul><li>Class A : 10.0.0.0 ~ 10.255.255.255</li><li>Class B : 172.16.0.0 ~ 172.31.255.255</li><li>Class C : 192.168.0.0 ~ 192.168.255.255</li></ul></li></ul><h2 id="서브넷과-서브넷-마스크"><a href="#서브넷과-서브넷-마스크" class="headerlink" title="서브넷과 서브넷 마스크"></a>서브넷과 서브넷 마스크</h2><p> 서브넷은 VPC내에 부분적인 네트워크.<br> 서브넷 마스크는 IP주소에 네트워크 ID와 호스트 ID를 구분하는 기준값!</p><p><img src="/gallery/post/aws/aws19.png" alt="서브넷 마스크를 통한 서브넷 구분은 이렇게 한다"></p><h2 id="포트-번호"><a href="#포트-번호" class="headerlink" title="포트 번호"></a>포트 번호</h2><p>TCP 와 UDP의 특성에 따라 제공되는 응용 프로그램 서비스가 있는데, 이때 포트 번호를 통해 구분한다.<br>TCP의 포트 번호 80은 HTTP 서비스로 예약되며, UDP의 포트 번호 53은 DNS 서비스로 예약된다.<br>보통 사용자들과의 접점이 되는 포트를 80번을 열어두는 이유가 바로 이 것 ㅎㅎ</p><h2 id="라우팅-amp-라우터-amp-라우팅-테이블"><a href="#라우팅-amp-라우터-amp-라우팅-테이블" class="headerlink" title="라우팅 &amp; 라우터 &amp; 라우팅 테이블"></a>라우팅 &amp; 라우터 &amp; 라우팅 테이블</h2><p>라우팅이란 네트워크 통신을 수행할 때 거쳐 가는 경로를 잡아주는 OSI 7계층에서도<br>3계층인 네트워크 계층에서의 핵심적인 기능!</p><p>네트워크는 여러 개의 서브넷으로 이루어져 있어, 목적지 IP로 향할 때<br>여러 노드를 거쳐서 통신이 된다. </p><p>복잡하게 연결된 네트워크 망에서 최적이 경로를 잡아 통신하는 것이 바로 라우팅!<br>라우팅을 수행하는 장비 ? 라우터 !<br>라우터가 경로를 파악하고 원하는 목적지 대상으로 데이터를 전달하는 표? 라우팅 테이블!</p><h2 id="AWS-의-VPC-서브넷-IP-대역-할당-정책"><a href="#AWS-의-VPC-서브넷-IP-대역-할당-정책" class="headerlink" title="AWS 의 VPC 서브넷 IP 대역 할당 정책"></a>AWS 의 VPC 서브넷 IP 대역 할당 정책</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">예를 들어 VPC A(10.0.0.0&#x2F;16) 내부의 서브넷에 할당할 IP대역이 10.0.0.0&#x2F;24이라면 10.0.0.0~10.0.0.255 중에서</span><br><span class="line">첫번째 주소: 10.0.0.0 - 네트워크 주소</span><br><span class="line">두번째 주소: 10.0.0.1 - AWS VPC 가상 라우터 주소</span><br><span class="line">세번째 주소: 10.0.0.2 - AWS DNS 서버 주소 </span><br><span class="line">네번째 주소: 10.0.0.3 - 향후 새로운 기능에 활용할 주소</span><br><span class="line">마지막 주소: 10.0.0.255 - 네트워크 브로드캐스트 주소</span><br><span class="line">VPC 내 여러 서브넷이 존재할 경우 첫번째 서브넷의 세번째 주소를 DNS 서버 주소로 사용합니다. </span><br><span class="line">나머지 서브넷의 세번째 주소는 AWS에서 예약되어 있습니다.</span><br></pre></td></tr></table></figure><h2 id="인터넷-게이트웨이-Internet-Gateway"><a href="#인터넷-게이트웨이-Internet-Gateway" class="headerlink" title="인터넷 게이트웨이 (Internet Gateway)"></a>인터넷 게이트웨이 (Internet Gateway)</h2><p>인터넷 게이트웨이는 VPC와 인터넷 간의 논리적인 연결 !<br>즉, VPC에서 인터넷 구간으로 나가는 관문 (VPC당 1개 생성)</p><p>인터넷 게이트웨이는 퍼블릭 IP를 사용하는 퍼블릭 서브넷 내의 자원<br>퍼블릭 서브넷은 라우팅 테이블에 외부 인터넷 구간으로 나가는 타깃지정 필수!</p><h2 id="NAT-게이트웨이-Network-Address-Translation-Gateway"><a href="#NAT-게이트웨이-Network-Address-Translation-Gateway" class="headerlink" title="NAT 게이트웨이 (Network Address Translation Gateway)"></a>NAT 게이트웨이 (Network Address Translation Gateway)</h2><p>NAT란 Network ADdress Translation의 약자로 즉, IP주소를 변환해 주는 기술!<br>인터넷 게이트웨이는 공공 네트워크 구간으로 퍼블릭 서브넷의 IP 통신을 도와주기 때문에,<br>프라이빗 IP는 인터넷 구간으로 넘어올 수가 없는데, 이때<br>NAT게이트웨이가 프라이빗 IP를 퍼블릭 IP로 변환하여 통신을 도와준다!<br>쉽게말하면, <strong>인터넷 게이트웨이는 앞마당에 있는 대문! NAT 게이트웨이는 앞마당 옆 쪽문!</strong></p><p><img src="/gallery/post/aws/aws20.png" alt="NAT 게이트웨이 활용방안의 예시"></p><h2 id="보안-그룹과-네트워크-ACL-Access-Control-List"><a href="#보안-그룹과-네트워크-ACL-Access-Control-List" class="headerlink" title="보안 그룹과 네트워크 ACL(Access Control List)"></a>보안 그룹과 네트워크 ACL(Access Control List)</h2><p>VPC는 인스턴스 레벨과 서브넷 레벨 상에서 대상을 필터링 할 수 있는 보안 기술을 사용 가능.<br>인스턴스 레벨 - 보안 그룹 (Security Group)<br>서브넷 레벨 - 네트워크 ACL (Access Control List)</p><p><img src="/gallery/post/aws/aws21.png" alt="보안그룹과 네트워크 ACL"></p><hr>출처)  Cloudnet@ 팀의 ANOS (AWS Network Online Study 2기 학습 내용)https://cloudneta.github.io/]]></content:encoded>
      
      
      <category domain="https://jesuisjavert.github.io/categories/Network/">Network</category>
      
      <category domain="https://jesuisjavert.github.io/categories/Network/AWS/">AWS</category>
      
      <category domain="https://jesuisjavert.github.io/categories/Network/AWS/VPC/">VPC</category>
      
      
      <category domain="https://jesuisjavert.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Cloud/">Cloud</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Amazon/">Amazon</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Network/">Network</category>
      
      <category domain="https://jesuisjavert.github.io/tags/VPC/">VPC</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Subnet/">Subnet</category>
      
      <category domain="https://jesuisjavert.github.io/tags/InternetGateWay/">InternetGateWay</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Router/">Router</category>
      
      <category domain="https://jesuisjavert.github.io/tags/NATGateWay/">NATGateWay</category>
      
      
      <comments>https://jesuisjavert.github.io/2021/01/26/aws-study5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS EC2 인스턴스 생성 &amp; 콘솔 연결 &amp; Public IP 접근해보기</title>
      <link>https://jesuisjavert.github.io/2021/01/20/aws-study4/</link>
      <guid>https://jesuisjavert.github.io/2021/01/20/aws-study4/</guid>
      <pubDate>Wed, 20 Jan 2021 08:37:08 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;AWS-Cloudformation-이란&quot;&gt;&lt;a href=&quot;#AWS-Cloudformation-이란&quot; class=&quot;headerlink&quot; title=&quot;AWS Cloudformation 이란?&quot;&gt;&lt;/a&gt;AWS Cloudformation 이란?&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/gallery/post/aws/cloudformation.png&quot; alt=&quot;AWS Cloudformation Logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;AWS 의 Cloudformation 기술 공식 설명은,&lt;br&gt;AWS CloudFormation은 환경의 모든 인프라 리소스를 안전하고 반복 가능한 방식으로 설명하고 프로비저닝할 수 있도록 공통 언어를 제공합니다.&lt;br&gt;라고 하는데..&lt;/p&gt;
&lt;p&gt;즉, 쉽게 말하자면, 자동화된 인프라 구축을 도와주는 서비스라고 하겠다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="AWS-Cloudformation-이란"><a href="#AWS-Cloudformation-이란" class="headerlink" title="AWS Cloudformation 이란?"></a>AWS Cloudformation 이란?</h2><p><img src="/gallery/post/aws/cloudformation.png" alt="AWS Cloudformation Logo"></p><p>AWS 의 Cloudformation 기술 공식 설명은,<br>AWS CloudFormation은 환경의 모든 인프라 리소스를 안전하고 반복 가능한 방식으로 설명하고 프로비저닝할 수 있도록 공통 언어를 제공합니다.<br>라고 하는데..</p><p>즉, 쉽게 말하자면, 자동화된 인프라 구축을 도와주는 서비스라고 하겠다.</p><a id="more"></a><p><img src="/gallery/post/aws/cf_benefit.png" alt="CloudFormation의 장점!"></p><p>AWS Cloudformation의 가장 큰 장점은<br>AWS Infra 구성을 ‘자동화’해서, 한 번에 원하는 세팅으로 도와줄 수 있도록 해준다는 것이다.</p><p>요즘 DevOps 엔지니어들의 가장 큰 화두로 떠오른 것이 바로 이 ‘자동화’ 인데,<br>Infrastructure as a Code (IaaC)가 미래 클라우드 기술의 핵심이 될 것이라고 말하는 사람도 있다.</p><p>IaaC의 스크립트 자동화 도구로 Terraform을 가장 먼저 떠올리는 사람들이 많은데,<br>Terraform 은 Azure, Google Cloud 등도 지원하니,<br>Cloudformation은 AWS구성을 위한 AWS 자체의 솔루션이라고 생각하면 편할 것 같다.</p><p>바로 실습을 들어가보자.</p><h2 id="Cloudformation-작동-순서"><a href="#Cloudformation-작동-순서" class="headerlink" title="Cloudformation 작동 순서"></a>Cloudformation 작동 순서</h2><p><img src="/gallery/post/aws/aws13.png" alt="CloudFormation 은 템플릿을 통해 스택을 생성!"></p><p>Cloudformation 은 다음과 같은 순서로 Infra를 생성한다!</p><p>AWS console의 Cloudformation 사이트에 들어와, 스택 생성을 클릭!</p><p><img src="/gallery/post/aws/aws15.png" alt="CloudFormation 스택 생성"></p><p>준비된 템플릿을 기반으로 스택을 생성하는데, 템플릿 파일은 JSON 또는 YAML 파일로 업로드를 할 수 있다.</p><p>사실 JSON은 Rest API 통신에 매일 쓰니까 익숙했지만,<br>YAML 파일은 어디서 봤지..하고 아리까리 했는데 Swagger API 설명 문서가 YAML파일이었다.<br>나중에 찾아보니, XML이나 JSON이나 YAML 파일이나 Data를 표현하는 형식이고<br>문법적인 차이만 있을 뿐, 내용이 오브젝트 형태로 들어간다는 것은 비슷했다.</p><p>파일을 스윽 보고, &lt;&gt; 꺽쇠가 많으면 XML, {} 중괄호가 많으면 JSON, 들여쓰기(Indentation)이 되어있고 뭐가 휑~하다 싶으면 YAML 파일이라고 구분하면 된다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Parameters:</span></span><br><span class="line">  <span class="attr">KeyName:</span></span><br><span class="line">    <span class="attr">Description:</span> <span class="string">Name</span> <span class="string">of</span> <span class="string">an</span> <span class="string">existing</span> <span class="string">EC2</span> <span class="string">KeyPair</span> <span class="string">to</span> <span class="string">enable</span> <span class="string">SSH</span> <span class="string">access</span> <span class="string">to</span> <span class="string">the</span> <span class="string">instances.</span> <span class="string">Linked</span> <span class="string">to</span> <span class="string">AWS</span> <span class="string">Parameter</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::EC2::KeyPair::KeyName</span></span><br><span class="line">    <span class="attr">ConstraintDescription:</span> <span class="string">must</span> <span class="string">be</span> <span class="string">the</span> <span class="string">name</span> <span class="string">of</span> <span class="string">an</span> <span class="string">existing</span> <span class="string">EC2</span> <span class="string">KeyPair.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Resources:</span></span><br><span class="line">  <span class="attr">MyInstance:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::EC2::Instance</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">ImageId:</span> <span class="string">ami-0094965d55b3bb1ff</span></span><br><span class="line">      <span class="attr">InstanceType:</span> <span class="string">t2.micro</span></span><br><span class="line">      <span class="attr">KeyName:</span> <span class="type">!Ref</span> <span class="string">KeyName</span></span><br><span class="line">      <span class="attr">Tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">Key:</span> <span class="string">Name</span></span><br><span class="line">          <span class="attr">Value:</span> <span class="string">WebServer</span></span><br><span class="line">      <span class="attr">SecurityGroups:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="type">!Ref</span> <span class="string">MySG</span></span><br><span class="line">      <span class="attr">UserData:</span></span><br><span class="line">        <span class="attr">Fn::Base64:</span></span><br><span class="line">          <span class="type">!Sub</span> <span class="string">|</span></span><br><span class="line">            <span class="comment">#!/bin/bash</span></span><br><span class="line">            <span class="string">yum</span> <span class="string">install</span> <span class="string">httpd</span> <span class="string">-y</span></span><br><span class="line">            <span class="string">systemctl</span> <span class="string">start</span> <span class="string">httpd</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">&quot;&lt;h1&gt;Test Web Server&lt;/h1&gt;&quot;</span> <span class="string">&gt;</span> <span class="string">/var/www/html/index.html</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">MySG:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::EC2::SecurityGroup</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">GroupDescription:</span> <span class="string">Enable</span> <span class="string">HTTP</span> <span class="string">access</span> <span class="string">via</span> <span class="string">port</span> <span class="number">80</span> <span class="string">and</span> <span class="string">SSH</span> <span class="string">access</span> <span class="string">via</span> <span class="string">port</span> <span class="number">22</span></span><br><span class="line">      <span class="attr">SecurityGroupIngress:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">IpProtocol:</span> <span class="string">tcp</span></span><br><span class="line">        <span class="attr">FromPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">ToPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">CidrIp:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">IpProtocol:</span> <span class="string">tcp</span></span><br><span class="line">        <span class="attr">FromPort:</span> <span class="number">22</span></span><br><span class="line">        <span class="attr">ToPort:</span> <span class="number">22</span></span><br><span class="line">        <span class="attr">CidrIp:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/0</span></span><br></pre></td></tr></table></figure><p>실습용 YAML 파일은 위과 같이 생겼는데,<br>스택에 이름과 파라미터(Key Name)을 입력해주면 생성하면 된다.<br>YAML파일을 대충 읽어보니, 파라미터에는 생성하게 될 EC2 Instance 접속방법(키 페어 방식)이 적혀있고, Resource 안에 생성할 인스턴스의 타입, 이름, 스크립트.<br>마지막으로, MySG 안에 HTTP와 SSH 접근으로 각각의 포트를 열어주는 내용을 입력하는 것 같다. YAML 파일 작성법은 나중에 따로 한번 더 다뤄야 할 것 같다.</p><p><img src="/gallery/post/aws/aws15.png" alt="스택이 생성되면"></p><p><img src="/gallery/post/aws/aws16.png" alt="이벤트 로그에서 생성되는 이벤트를 볼 수 있다!"></p><p>실습이 끝난 이후에는, 스택을 삭제하는 걸 잊지 말자!<br>스택을 삭제 하면 자동으로 안에 있는 리소스까지 같이 삭제됩니다.</p><hr>출처)  Cloudnet@ 팀의 ANOS (AWS Network Online Study 2기 학습 내용)https://cloudneta.github.io/]]></content:encoded>
      
      
      <category domain="https://jesuisjavert.github.io/categories/Network/">Network</category>
      
      <category domain="https://jesuisjavert.github.io/categories/Network/AWS/">AWS</category>
      
      <category domain="https://jesuisjavert.github.io/categories/Network/AWS/Cloudformation/">Cloudformation</category>
      
      
      <category domain="https://jesuisjavert.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Cloud/">Cloud</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Amazon/">Amazon</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Network/">Network</category>
      
      <category domain="https://jesuisjavert.github.io/tags/EC2/">EC2</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Cloudformation/">Cloudformation</category>
      
      
      <comments>https://jesuisjavert.github.io/2021/01/20/aws-study4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS EC2 인스턴스 생성 &amp; 콘솔 연결 &amp; Public IP 접근해보기</title>
      <link>https://jesuisjavert.github.io/2021/01/18/aws-study3/</link>
      <guid>https://jesuisjavert.github.io/2021/01/18/aws-study3/</guid>
      <pubDate>Mon, 18 Jan 2021 07:09:18 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;EC2-인스턴스를-생성해-보자&quot;&gt;&lt;a href=&quot;#EC2-인스턴스를-생성해-보자&quot; class=&quot;headerlink&quot; title=&quot;EC2 인스턴스를 생성해 보자!&quot;&gt;&lt;/a&gt;EC2 인스턴스를 생성해 보자!&lt;/h2&gt;&lt;p&gt;AWS의 EC2란, 크기 조정이 가능한 컴퓨팅 용량을 클라우드에서 제공하는 웹 서비스이다. 쉽게 말하면, 클라우드 상에 내 PC를 한 대 얻는 것과 같은거라고 생각하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/gallery/post/aws/aws4.png&quot; alt=&quot;EC2 콘솔창에서 Region을 서울로 바꾸는 걸 잊지 말자!&quot;&gt;&lt;/p&gt;
&lt;p&gt;EC2를 생성하기 위해선 AWS에 회원가입을 하고, AWS Management Console에 로그인을 한다.&lt;br&gt;그 뒤, EC2 서비스를 클릭하고, 위 스크린샷의 주황색 버튼, 인스턴스 시작 버튼을 누르면 EC2를 만들 수 있다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="EC2-인스턴스를-생성해-보자"><a href="#EC2-인스턴스를-생성해-보자" class="headerlink" title="EC2 인스턴스를 생성해 보자!"></a>EC2 인스턴스를 생성해 보자!</h2><p>AWS의 EC2란, 크기 조정이 가능한 컴퓨팅 용량을 클라우드에서 제공하는 웹 서비스이다. 쉽게 말하면, 클라우드 상에 내 PC를 한 대 얻는 것과 같은거라고 생각하면 된다.</p><p><img src="/gallery/post/aws/aws4.png" alt="EC2 콘솔창에서 Region을 서울로 바꾸는 걸 잊지 말자!"></p><p>EC2를 생성하기 위해선 AWS에 회원가입을 하고, AWS Management Console에 로그인을 한다.<br>그 뒤, EC2 서비스를 클릭하고, 위 스크린샷의 주황색 버튼, 인스턴스 시작 버튼을 누르면 EC2를 만들 수 있다.</p><a id="more"></a><p>기본적으로, EC2를 만드는 것은 크게 어렵지 않다. 지금은 실습 단계이므로,<br>free tier에서 사용할 수 있는 Amazon Machine Image(AMI)와 인스턴스 유형을 선택해 준다.</p><h2 id="AWS-Free-tier-Services"><a href="#AWS-Free-tier-Services" class="headerlink" title="AWS Free tier Services"></a>AWS Free tier Services</h2><p><img src="/gallery/post/aws/aws5.png" alt="공짜가 .. 최고 .."></p><p>그리고 원래 가장 중요한 과정은 인스턴스 세부 정보 구성인데,<br>지금은 일단 .. 서브넷만 NORTHEAST-2A(서울 리전)으로 설정하고 넘어가자 ㅎ<br>퍼블릭 ip도 자동 할당으로 해주고 (지금 퍼블릭 ip로 들어가서 확인할 예정이라)</p><p>스토리지 추가도 Default, 태그로는 키에 Name, 값에 이름으로 넣고 싶은 값을 넣고 다음!</p><p>보안 그룹 구성이 나오는데, 어떤 방식으로 접근하는 트래픽을 허용할 것인지 선택할 수 있다.</p><h2 id="AWS-보안설정"><a href="#AWS-보안설정" class="headerlink" title="AWS 보안설정"></a>AWS 보안설정</h2><p><img src="/gallery/post/aws/aws7.png" alt="보안 설정은 이렇게 !"></p><p>우리는 보통 SSH 키 페어 생성을 통해, SSH 인증 방식(키 파일)을 사용해서 AWS Console에 접근 할 것이기 때문에,<br>SSH 포트를 열어두도록 하고, 소스를 위치 무관 혹은 내 ip에서만 접근 할 거면, 내 ip로 설정한다.</p><p>그리고 HTTP 프로토콜에 대한 접근도 실습해볼 것이라, HTTP 유형의 접근도 열어 준다. </p><p><img src="/gallery/post/aws/aws8.png" alt="새 키 페어 생성을 통해 pem 키를 다운!"></p><p><img src="/gallery/post/aws/aws9.png" alt="EC2 만들기 성공!"></p><p>EC2에 접속하는 하기 위해선, 방법이 여러가지가 있는데 오늘은<br>간단하게 기존에 내가 쓰던 터미널 창으로 접속해 보겠다.</p><h2 id="EC2-인스턴스에-연결하기"><a href="#EC2-인스턴스에-연결하기" class="headerlink" title="EC2 인스턴스에 연결하기"></a>EC2 인스턴스에 연결하기</h2><p><img src="/gallery/post/aws/aws10.png" alt="EC2 인스턴스에 연결하는 3가지 방법"><br>가장 쉬운 방법은 EC2 인스턴스에서 연결을 눌러 브라우저에서 바로 연결하는 게 가장 편하고,<br>전문적으로 SSH 연결 프로그램인 (Putty, MobaXterm)등을 사용해도 되고,<br>pem키가 있는 디렉토리에서 Bash 창을 연 뒤,</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">400</span> XXX.pem</span><br><span class="line">ssh -i &quot;XXX.pem&quot; ec2-user@---.---.---.--- (public IP)</span><br></pre></td></tr></table></figure><p>를 입력하여 콘솔에 연결 할 수도 있다.</p><p><img src="/gallery/post/aws/aws11.png" alt="짜잔! AWS 콘솔에 접근했다."></p><p>그 뒤, 간단하게 html 문서를 생성하고 http 접속 연결을 테스트 해본다</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> # 실습의 편리를 위해서 root 계정으로 전환합니다.</span><br><span class="line">[ec2-user@ip-<span class="number">172</span>-<span class="number">31</span>-<span class="number">46</span>-<span class="number">221</span> ~]$ sudo su -</span><br><span class="line"></span><br><span class="line"># Web 서비스를 설치합니다.</span><br><span class="line">[root@ip-<span class="number">172</span>-<span class="number">31</span>-<span class="number">46</span>-<span class="number">221</span> ~]# yum install httpd -y</span><br><span class="line"></span><br><span class="line"># Web 서비스를 실행합니다.</span><br><span class="line">[root@ip-<span class="number">172</span>-<span class="number">31</span>-<span class="number">46</span>-<span class="number">221</span> ~]# systemctl <span class="built_in">start</span> httpd</span><br><span class="line"></span><br><span class="line"># 웹 페이지를 구성합니다.</span><br><span class="line">[root@ip-<span class="number">172</span>-<span class="number">31</span>-<span class="number">46</span>-<span class="number">221</span> ~]# <span class="built_in">echo</span> &quot;&lt;h1&gt;Test Web Server&lt;/h1&gt;&quot; &gt; /var/www/html/index.html</span><br><span class="line"></span><br><span class="line"># curl 명령어로 웹 접속을 확인합니다. </span><br><span class="line">[root@ip-<span class="number">172</span>-<span class="number">31</span>-<span class="number">46</span>-<span class="number">221</span> ~]# curl localhost</span><br><span class="line">&lt;h1&gt;Test Web Server&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h2 id="Test-Page-출력"><a href="#Test-Page-출력" class="headerlink" title="Test Page 출력"></a>Test Page 출력</h2><p><img src="/gallery/post/aws/aws12.png" alt="이제 브라우저에 IP를 입력하면 테스트 페이지가 출력된다"></p><hr>출처)  Cloudnet@ 팀의 ANOS (AWS Network Online Study 2기 학습 내용)https://cloudneta.github.io/]]></content:encoded>
      
      
      <category domain="https://jesuisjavert.github.io/categories/Network/">Network</category>
      
      <category domain="https://jesuisjavert.github.io/categories/Network/AWS/">AWS</category>
      
      <category domain="https://jesuisjavert.github.io/categories/Network/AWS/EC2/">EC2</category>
      
      
      <category domain="https://jesuisjavert.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Cloud/">Cloud</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Amazon/">Amazon</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Network/">Network</category>
      
      <category domain="https://jesuisjavert.github.io/tags/EC2/">EC2</category>
      
      
      <comments>https://jesuisjavert.github.io/2021/01/18/aws-study3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS Global Infra 및 주요 개념 소개</title>
      <link>https://jesuisjavert.github.io/2021/01/18/aws-study2/</link>
      <guid>https://jesuisjavert.github.io/2021/01/18/aws-study2/</guid>
      <pubDate>Mon, 18 Jan 2021 06:22:38 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;AWS-Global-Infrastructure&quot;&gt;&lt;a href=&quot;#AWS-Global-Infrastructure&quot; class=&quot;headerlink&quot; title=&quot;AWS Global Infrastructure&quot;&gt;&lt;/a&gt;AWS Global Infrastructure&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/gallery/post/aws/aws2.png&quot; alt=&quot;AWS Global Infrastructure&quot;&gt;&lt;/p&gt;
&lt;p&gt;AWS는 전 세계적으로 분포한 데이터센터를 통해, AWS를 서비스 하고 있다.&lt;br&gt;현재 AWS는 24개의 Region(리전)과 77개의 가용영역(Availability Zone),&lt;br&gt;220개 이상의 연결구간 POP(Point of Presence)를 운영하고 있다.&lt;/p&gt;
&lt;p&gt;참조) AWS Global Infra Official info site&lt;br&gt;&lt;a href=&quot;https://aws.amazon.com/ko/about-aws/global-infrastructure/&quot;&gt;https://aws.amazon.com/ko/about-aws/global-infrastructure/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;글로벌 네트워크들은 해저 광케이블을 통해 연결되어 있고, 물론 반갑게도 서울을 찍어보면 도쿄와 홍콩으로 연결된 해저 광케이블을 볼 수 있다.&lt;br&gt;물리적으로 케이블의 거리가 멀면 ping은 비례하겠거니.. 생각이 든다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="AWS-Global-Infrastructure"><a href="#AWS-Global-Infrastructure" class="headerlink" title="AWS Global Infrastructure"></a>AWS Global Infrastructure</h2><p><img src="/gallery/post/aws/aws2.png" alt="AWS Global Infrastructure"></p><p>AWS는 전 세계적으로 분포한 데이터센터를 통해, AWS를 서비스 하고 있다.<br>현재 AWS는 24개의 Region(리전)과 77개의 가용영역(Availability Zone),<br>220개 이상의 연결구간 POP(Point of Presence)를 운영하고 있다.</p><p>참조) AWS Global Infra Official info site<br><a href="https://aws.amazon.com/ko/about-aws/global-infrastructure/">https://aws.amazon.com/ko/about-aws/global-infrastructure/</a></p><p>글로벌 네트워크들은 해저 광케이블을 통해 연결되어 있고, 물론 반갑게도 서울을 찍어보면 도쿄와 홍콩으로 연결된 해저 광케이블을 볼 수 있다.<br>물리적으로 케이블의 거리가 멀면 ping은 비례하겠거니.. 생각이 든다.</p><a id="more"></a><h2 id="Latency-전파-지연"><a href="#Latency-전파-지연" class="headerlink" title="Latency, 전파 지연"></a>Latency, 전파 지연</h2><p>Latency :  패킷을 전송하는 곳에서부터 전달받는 곳까지 이동하는 데 걸리는 시간!</p><p>전파 지연 : 송신측 -&gt; 수신측으로 이동하는데 필요한 시간. 이동거리 대비 신호가 이동하는 속도로 측정.</p><p>대부분의 사람들은 300밀리 초 이상 시에 ‘느리다’라고 인식을 한다고 한다.<br>(한국 사람들은 .. 100이지 않을까? ㅎㅎ)</p><p>대부분의 레이턴시는 다른 네트워크 레이턴시를 제외하고 케이블에서의 지연만 얘기할 때 보통 쓴다.</p><h2 id="가용-영역-Availability-Zone"><a href="#가용-영역-Availability-Zone" class="headerlink" title="가용 영역 Availability Zone"></a>가용 영역 Availability Zone</h2><p>가용 영역은 각 리전 내에 있는 격리 영역(Isolated locations) 이라고 정의할 수 있는데, 쉽게 말하자면, 각 지역내에 최종 사용자에게 가까운 컴퓨팅, 스토리지 등의 리소스를 배치하는 기능을 제공하기 위해 만든 것이라고 볼 수 있다.</p><p>AWS 리전의 배치 기준은 재해극복과 네트워크 지연을 방지하기 위해서이다.<br>그 기준은,<br>각 국가별 네트워크 지연시간: 10ms &lt; AZ 배치 기준 &lt; 100ms 라고 한다!</p><p>우리는 한 리전 내에서도, 서비스가 안정적으로 서비스 되기 위해선, 하나의 가용 영역(AZ)에서 장애가 날 수도 있기 때문에 멀티 가용영역(AZ)으로 구축해야 한다.</p><p>ex) Region의 Northeast-1은 Tokyo, 2가 Seoul,<br>    서울의 AZ는 Northeast-2a,2b,2c,2d</p><p>그 중 2a, 2c가 모든 종류의 CPU 타입을 제공해서, 가장 많이 쓰인다<br>(ex) 2b는 free tier linux cpu 타입을 제공안함..)</p><p><img src="/gallery/post/aws/aws14.png" alt="AWS 서비스 구성시 여러 AZ에 분산하여 구성하는 것을 권장!"></p><h2 id="엣지-POP-Point-of-Presence"><a href="#엣지-POP-Point-of-Presence" class="headerlink" title="엣지 POP (Point of Presence)"></a>엣지 POP (Point of Presence)</h2><p>엣지 POP(ex CDN) 라고 하는 것은<br>인터넷 사용자가 인터넷 서비스 제공자(ISP: Internet Service Provider)를 만나는 곳을 의미.</p><p>일반적으로 콘텐츠를 고속으로 내보내거나 가져오는 CDN(Content Delivery Network) 서비스(ex)AWS Cloudfront)를 제공하기 위해 만든다.</p><h2 id="IaaS-amp-PaaS-amp-Serverless-amp-SaaS"><a href="#IaaS-amp-PaaS-amp-Serverless-amp-SaaS" class="headerlink" title="IaaS &amp; PaaS &amp; Serverless &amp; SaaS"></a>IaaS &amp; PaaS &amp; Serverless &amp; SaaS</h2><p><img src="/gallery/post/aws/aws3.png" alt="IaaS &amp; PaaS &amp; Serverless &amp; SaaS 의 차이"></p><p>AWS Cloud 서비스의 종류는 크게 4가지로 구분할 수 있는데,<br>클라우드 사업자와 사용자가 관리 하는 영역에 따라 구분한다.</p><ol><li>IaaS : EC2 (Computing), VPC (Network), EBS(Storage)</li><li>PaaS : AWS Elastic Beanstalk</li><li>Serverless : AWS Lambda, API Gateway (API Proxy)</li><li>SaaS : Web Mail, MSoffice365, Dropbox …</li></ol><h2 id="AWS-주요-Network-서비스"><a href="#AWS-주요-Network-서비스" class="headerlink" title="AWS 주요 Network 서비스"></a>AWS 주요 Network 서비스</h2><p><img src="/gallery/post/aws/aws6.png" alt="중요한 기술들이 눈에 띈다 !"></p><p><strong>VPC</strong>는 Virtual Private Cloud의 약자로 AWS 클라우드 내 논리적으로 독립된 섹션을 제공하여,<br>사용자가 정의한 가상 네트워크상에서 다양한 AWS 리소스를 실행할 수 있게 지원합니다.<br>한마디로 독립된 가상의 클라우드 네트워크라 볼 수 있습니다.</p><p><strong>ELB</strong>는 Elastic Load Balancing의 약자로 AWS에서 제공하는 로드 밸런싱(부하 분산) 기술입니다.</p><p><strong>Route 53</strong>은 AWS에서 제공하는 관리형 DNS 서비스입니다.</p><p><strong>AWS 전송 게이트웨이</strong>는 VPC나 온프레미스등의 네트워크를 단일 지점으로 연결할 수 있는 라우팅 서비스입니다.</p><p>AWS의 네트워크 기반의 보안 기능으로 보안 그룹, 네트워크 ACL, 웹 방화벽이 있습니다</p><hr>출처)  Cloudnet@ 팀의 ANOS (AWS Network Online Study 2기 학습 내용)https://cloudneta.github.io/]]></content:encoded>
      
      
      <category domain="https://jesuisjavert.github.io/categories/Network/">Network</category>
      
      <category domain="https://jesuisjavert.github.io/categories/Network/AWS/">AWS</category>
      
      
      <category domain="https://jesuisjavert.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Cloud/">Cloud</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Amazon/">Amazon</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Network/">Network</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Region/">Region</category>
      
      <category domain="https://jesuisjavert.github.io/tags/AvailabilityZone/">AvailabilityZone</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Edge/">Edge</category>
      
      <category domain="https://jesuisjavert.github.io/tags/PoP/">PoP</category>
      
      <category domain="https://jesuisjavert.github.io/tags/IaaS/">IaaS</category>
      
      <category domain="https://jesuisjavert.github.io/tags/PaaS/">PaaS</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Serverless/">Serverless</category>
      
      <category domain="https://jesuisjavert.github.io/tags/SaaS/">SaaS</category>
      
      
      <comments>https://jesuisjavert.github.io/2021/01/18/aws-study2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS Network Online Study (ANOS 2기) 시작!</title>
      <link>https://jesuisjavert.github.io/2021/01/12/aws-study1/</link>
      <guid>https://jesuisjavert.github.io/2021/01/12/aws-study1/</guid>
      <pubDate>Tue, 12 Jan 2021 06:11:03 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;img src=&quot;/gallery/post/jeffbezos2.jpg&quot; alt=&quot;뭐.. 서버가 남는다구? 그럼 클라우드로 만들어버려!- 제프 베조스&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;AWS-Amazon-Web-Services-란&quot;&gt;&lt;a href=&quot;#AWS-Amazon-Web-Services-란&quot; class=&quot;headerlink&quot; title=&quot;AWS(Amazon Web Services)란..?&quot;&gt;&lt;/a&gt;AWS(Amazon Web Services)란..?&lt;/h2&gt;&lt;p&gt;AWS가 세계를 휩쓸고 있다.&lt;br&gt;클라우드 서비스는 기존의 온프레미스(On-Premise) 방식을 넘어&lt;br&gt;업계의 표준으로 다가서고 있고, 많은 기업들이 서버를 클라우드로 이전하는 추세이다.&lt;/p&gt;
&lt;p&gt;평소에 AWS를 활용해 서비스를 배포하고, 이것저것 기능을 더해 아키텍쳐를 설계해 본 경험은 있지만,&lt;br&gt;네트워크에 대한 이론적 배경을 좀 더 자세히 공부하고 싶어서,&lt;br&gt;AWS Network Online Study [ANOS 2기]를 시작하게 되었다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="/gallery/post/jeffbezos2.jpg" alt="뭐.. 서버가 남는다구? 그럼 클라우드로 만들어버려!- 제프 베조스"></p><h2 id="AWS-Amazon-Web-Services-란"><a href="#AWS-Amazon-Web-Services-란" class="headerlink" title="AWS(Amazon Web Services)란..?"></a>AWS(Amazon Web Services)란..?</h2><p>AWS가 세계를 휩쓸고 있다.<br>클라우드 서비스는 기존의 온프레미스(On-Premise) 방식을 넘어<br>업계의 표준으로 다가서고 있고, 많은 기업들이 서버를 클라우드로 이전하는 추세이다.</p><p>평소에 AWS를 활용해 서비스를 배포하고, 이것저것 기능을 더해 아키텍쳐를 설계해 본 경험은 있지만,<br>네트워크에 대한 이론적 배경을 좀 더 자세히 공부하고 싶어서,<br>AWS Network Online Study [ANOS 2기]를 시작하게 되었다.</p><a id="more"></a><h2 id="따라하며-배우는-AWS-네트워크-입문"><a href="#따라하며-배우는-AWS-네트워크-입문" class="headerlink" title="따라하며 배우는 AWS 네트워크 입문"></a>따라하며 배우는 AWS 네트워크 입문</h2><p><img src="/gallery/post/aws/aws1.png" alt="책의 두께가 아주 든-든하다"></p><p>스터디는 기본적으론 이 책을 쓰신 저자(가시다)님이 책 내용을 설명해주시면서,<br>같이 실습과제를 진행하는 식으로 진행이 되며,<br>매주 일요일 저녁에 2시간씩 저녁 9시부터 11시까지 진행이 된다.<br>아마 직장인들을 대상으로 하는 스터디라서, 늦은 시간에 진행을 하는 것 같다.ㅎㅎ</p><p>기본적으로는 2시간 동안, 미리 예습해온 내용에 대해서 설명해주시고, 실습내용을 따라해보고, 각 주차별로 진행된 실습 과제를 제출하여, 진도표를 공유하는 식으로 진행이 된다. AWS 스터디이지만, 개발자이신분들보다는 네트워크나 보안 쪽에서 현업으로 일하고 계신 분들을 위주로 진행되다보니, 네트워크쪽 내용들을 예습해 가야 할 것 같다.</p><p>이번이 ANOS 2기라고 하는데, Notion으로 주시는 공지나 책의 완성도, 스터디의 완성도 등<br>정말 배울 점이 많은 분들에게 무료 강의를 듣는 기분이라서 굉장히 만족하고 있다.</p><p>앞으로는 AWS 카테고리에 각 주차별로 배운 점이나, 실습한 내용들을 올려볼 생각이다.</p>]]></content:encoded>
      
      
      <category domain="https://jesuisjavert.github.io/categories/Network/">Network</category>
      
      <category domain="https://jesuisjavert.github.io/categories/Network/AWS/">AWS</category>
      
      
      <category domain="https://jesuisjavert.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Cloud/">Cloud</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Amazon/">Amazon</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Network/">Network</category>
      
      <category domain="https://jesuisjavert.github.io/tags/EC2/">EC2</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Cloudformation/">Cloudformation</category>
      
      
      <comments>https://jesuisjavert.github.io/2021/01/12/aws-study1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>머신러닝야학-Tensorflow (python) 핵심요약-5</title>
      <link>https://jesuisjavert.github.io/2021/01/11/machinelearning-python6/</link>
      <guid>https://jesuisjavert.github.io/2021/01/11/machinelearning-python6/</guid>
      <pubDate>Mon, 11 Jan 2021 07:29:56 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;img src=&quot;/gallery/post/ml2.jpg&quot; alt=&quot;데이터타입이 다르면 무한한 오류를 가져올 수 있다&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;딥러닝-데이터의-전처리-과정&quot;&gt;&lt;a href=&quot;#딥러닝-데이터의-전처리-과정&quot; class=&quot;headerlink&quot; title=&quot;딥러닝 데이터의 전처리 과정&quot;&gt;&lt;/a&gt;딥러닝 데이터의 전처리 과정&lt;/h2&gt;&lt;h3 id=&quot;데이터-타입의-변경&quot;&gt;&lt;a href=&quot;#데이터-타입의-변경&quot; class=&quot;headerlink&quot; title=&quot;데이터 타입의 변경&quot;&gt;&lt;/a&gt;데이터 타입의 변경&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/gallery/post/tensorflow/tensorflow14.png&quot; alt=&quot;원핫 인코딩이 안된다? 데이터의 타입을 확인하자!&quot;&gt;&lt;/p&gt;
&lt;p&gt;원핫 인코딩, 즉 카테고리의 범주화가 필요한 데이터인데, 품종 이라는 변수가 int 값으로 되어 있어서 원핫 인코딩이 되지 않는 상태?&lt;/p&gt;
&lt;p&gt;int(정수형)타입을 category(범주형)타입으로 바꿔주자.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="/gallery/post/ml2.jpg" alt="데이터타입이 다르면 무한한 오류를 가져올 수 있다"></p><h2 id="딥러닝-데이터의-전처리-과정"><a href="#딥러닝-데이터의-전처리-과정" class="headerlink" title="딥러닝 데이터의 전처리 과정"></a>딥러닝 데이터의 전처리 과정</h2><h3 id="데이터-타입의-변경"><a href="#데이터-타입의-변경" class="headerlink" title="데이터 타입의 변경"></a>데이터 타입의 변경</h3><p><img src="/gallery/post/tensorflow/tensorflow14.png" alt="원핫 인코딩이 안된다? 데이터의 타입을 확인하자!"></p><p>원핫 인코딩, 즉 카테고리의 범주화가 필요한 데이터인데, 품종 이라는 변수가 int 값으로 되어 있어서 원핫 인코딩이 되지 않는 상태?</p><p>int(정수형)타입을 category(범주형)타입으로 바꿔주자.</p><a id="more"></a><p><img src="/gallery/post/tensorflow/tensorflow15.png" alt="데이터의 타입을 바꾸고 나니 원핫인코딩이 잘 되는 것을 확인할 수 있다."></p><h3 id="데이터-NA-값의-처리"><a href="#데이터-NA-값의-처리" class="headerlink" title="데이터 NA 값의 처리"></a>데이터 NA 값의 처리</h3><p><img src="/gallery/post/tensorflow/tensorflow16.png" alt="데이터의 값이 중간에 NA 되어있다면, count 이후 평균값을 na에 넣어준다"></p><h2 id="학습이-더-잘되게-만드는-Tip"><a href="#학습이-더-잘되게-만드는-Tip" class="headerlink" title="학습이 더 잘되게 만드는 Tip"></a>학습이 더 잘되게 만드는 Tip</h2><h3 id="BatchNormalization-layer-활용"><a href="#BatchNormalization-layer-활용" class="headerlink" title="BatchNormalization layer 활용"></a>BatchNormalization layer 활용</h3><p>학습을 다 마치고 나서도 Loss가 원하는 만큼 떨어지지 않는다면, BatchNormalization Layer를 각 Layer의 층마다 배치시키면, 같은 모델임에도 불구하고 학습 효과를 더욱 증대시킬 수 있다.</p><p>개선 전)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">X = tf.keras.layers.Input(shape=[<span class="number">13</span>])</span><br><span class="line">H = tf.keras.layers.Dense(<span class="number">8</span>, activation=<span class="string">&#x27;swish&#x27;</span>)(X)</span><br><span class="line">H = tf.keras.layers.Dense(<span class="number">8</span>, activation=<span class="string">&#x27;swish&#x27;</span>)(H)</span><br><span class="line">H = tf.keras.layers.Dense(<span class="number">8</span>, activation=<span class="string">&#x27;swish&#x27;</span>)(H)</span><br><span class="line">Y = tf.keras.layers.Dense(<span class="number">1</span>)(H)</span><br><span class="line">model = tf.keras.models.Model(X, Y)</span><br><span class="line">model.<span class="built_in">compile</span>(loss=<span class="string">&#x27;mse&#x27;</span>)</span><br></pre></td></tr></table></figure><p>개선 후)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">X = tf.keras.layers.Input(shape=[<span class="number">13</span>])</span><br><span class="line"> </span><br><span class="line">H = tf.keras.layers.Dense(<span class="number">8</span>)(X)</span><br><span class="line">H = tf.keras.layers.BatchNormalization()(H)</span><br><span class="line">H = tf.keras.layers.Activation(<span class="string">&#x27;swish&#x27;</span>)(H)</span><br><span class="line"> </span><br><span class="line">H = tf.keras.layers.Dense(<span class="number">8</span>)(H)</span><br><span class="line">H = tf.keras.layers.BatchNormalization()(H)</span><br><span class="line">H = tf.keras.layers.Activation(<span class="string">&#x27;swish&#x27;</span>)(H)</span><br><span class="line"> </span><br><span class="line">H = tf.keras.layers.Dense(<span class="number">8</span>)(H)</span><br><span class="line">H = tf.keras.layers.BatchNormalization()(H)</span><br><span class="line">H = tf.keras.layers.Activation(<span class="string">&#x27;swish&#x27;</span>)(H)</span><br><span class="line"> </span><br><span class="line">Y = tf.keras.layers.Dense(<span class="number">1</span>)(H)</span><br><span class="line">model = tf.keras.models.Model(X, Y)</span><br><span class="line">model.<span class="built_in">compile</span>(loss=<span class="string">&#x27;mse&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/gallery/post/tensorflow/tensorflow17.png" alt="개선 전과 개선 후의 Loss차이를 확인할 수 있다."></p><p>실제로 모델을 BatchNormalization 으로 개선한 결과,<br>개선 전에는 1000번을 학습해도 20이하로 떨어지지 않았지만,<br>개선 후에는 200번 정도를 학습했을 때, 개선 전의 Loss 값과 비슷하게 나왔고, 1000번을 학습했을 땐 훨씬 낮은 정도의 Loss 값을 보였다.</p><h2 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h2><p>일주일 간, 머신러닝의 기본교양강의부터 python으로 딥러닝을 구현하는 실습예제까지 진행해 보았다.</p><p>처음 머신러닝과 딥러닝에 대해 잘 모를 땐, 대학시절 들었던 빅데이터 수업 때문에, 여러 분석 모델들의 수학적 난해함에 지레 겁을 먹고, 어렵단 인식이 강했는데,<br>머신러닝도 결국, <strong>하면 된다</strong> 라는 것을 깨닫게 되었다.</p><p>어려워 보이는 알고리즘도, 모델링도,<br>코딩 라이브러리도 결국 사용법을 배우고, 과정을 이해하고, 활용하는 <strong>과정의 연속</strong> 일 뿐인 것이다.</p><p> 난해함은 잠시 접어두고, 완전히 1000% 이해하지 못하고 이용해보더라도 어느 누구도 뭐라하지 않는다.<br> 즉, 시그모이드 모형과 소프트맥스 수학식을 수학적으로 유도하지 못한다고 해서, 딥러닝을 못하는게 아닌 것이다. 그냥 <strong>하면 된다</strong>!! 왜냐? 우리에겐 구글님이 있으니깐..ㅎ</p><p> 앞으로도 새로운 문제를 직면할 때마다, 딥러닝으로 이 문제를 해결 할 수 있겠다. 라는 자신감을 심어주는 강의를 들은 것 같아, 내 자신도 굉장히 뿌듯함을 느꼈고, 이런 좋은 강의와 기회를 마련해준 머신러닝야학 강사 및 스탭 분들에게도 감사를 드린다.</p><h2 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h2><hr>생활코딩 Deep Learning Tensorflow (python) 강의<p><a href="https://opentutorials.org/course/4570">https://opentutorials.org/course/4570</a></p><p>생활코딩의 딥러닝 교육컨텐츠는 CCL 라이선스 BY를 따르고 있습니다. </p>]]></content:encoded>
      
      
      <category domain="https://jesuisjavert.github.io/categories/MachineLearning/">MachineLearning</category>
      
      <category domain="https://jesuisjavert.github.io/categories/MachineLearning/Python/">Python</category>
      
      <category domain="https://jesuisjavert.github.io/categories/MachineLearning/Python/Tensorflow/">Tensorflow</category>
      
      
      <category domain="https://jesuisjavert.github.io/tags/MachineLearning/">MachineLearning</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Python/">Python</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Tensorflow/">Tensorflow</category>
      
      
      <comments>https://jesuisjavert.github.io/2021/01/11/machinelearning-python6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>머신러닝야학-Tensorflow (python) 핵심요약-4</title>
      <link>https://jesuisjavert.github.io/2021/01/10/machinelearning-python5/</link>
      <guid>https://jesuisjavert.github.io/2021/01/10/machinelearning-python5/</guid>
      <pubDate>Sun, 10 Jan 2021 08:17:30 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;신경망의-완성-히든레이어&quot;&gt;&lt;a href=&quot;#신경망의-완성-히든레이어&quot; class=&quot;headerlink&quot; title=&quot;신경망의 완성: 히든레이어&quot;&gt;&lt;/a&gt;신경망의 완성: 히든레이어&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/gallery/post/tensorflow/tensorflow12.png&quot; alt=&quot;히든레이어의 구성&quot;&gt;&lt;/p&gt;
&lt;p&gt;퍼셉트론을 깊게 연결한 딥러닝 신경망을 만드는 방법? 히든레이어!&lt;br&gt;기존의 퍼셉트론을 여러개 연결하여, 층(Layer)을 늘려 연결해준다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="신경망의-완성-히든레이어"><a href="#신경망의-완성-히든레이어" class="headerlink" title="신경망의 완성: 히든레이어"></a>신경망의 완성: 히든레이어</h2><p><img src="/gallery/post/tensorflow/tensorflow12.png" alt="히든레이어의 구성"></p><p>퍼셉트론을 깊게 연결한 딥러닝 신경망을 만드는 방법? 히든레이어!<br>기존의 퍼셉트론을 여러개 연결하여, 층(Layer)을 늘려 연결해준다.</p><a id="more"></a><p>예제에선 총 506개의 관측치를 인풋레이어의 13개 노드에 담고, 이를 히든레이어의 총 5개의 노드로 연결 시켰다.<br>그리고 히든레이어의 5개의 관측치를 softmax로 분류하여 최종 output layer의 1개 값을 예측하는 모델인 것이다.<br>즉, 노드들의 가중치를 분석할 때, 활성화함수를 여러개 사용함으로써, Accuracy를 올리고, Loss를 줄일 수 있다.</p><h3 id="Swish-활성화-함수를-통해-히든-레이어"><a href="#Swish-활성화-함수를-통해-히든-레이어" class="headerlink" title="Swish 활성화 함수를 통해 히든 레이어"></a>Swish 활성화 함수를 통해 히든 레이어</h3><p><img src="/gallery/post/tensorflow/tensorflow13.png" alt="Swish 활성화함수"></p><p>Swish ? 최근에 발표된 성능이 좋은 활성화함수 중 하나.<br>특징 : ReLU를 대체하기 위해 구글이 고안한 함수. 시그모이드 함수에 X를 곱한 아주 간단한 형태를 보이지만, 깊은 레이어를 학습시킬 때 ReLU보다 더 뛰어난 성능을 보임.</p><h2 id="최종-예제-코드"><a href="#최종-예제-코드" class="headerlink" title="최종 예제 코드"></a>최종 예제 코드</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">X = tf.keras.layers.Input(shape=[<span class="number">4</span>])</span><br><span class="line">H = tf.keras.layers.Dense(<span class="number">8</span>, activation=<span class="string">&quot;swish&quot;</span>)(X)</span><br><span class="line">H = tf.keras.layers.Dense(<span class="number">8</span>, activation=<span class="string">&quot;swish&quot;</span>)(H)</span><br><span class="line">H = tf.keras.layers.Dense(<span class="number">8</span>, activation=<span class="string">&quot;swish&quot;</span>)(H)</span><br><span class="line">Y = tf.keras.layers.Dense(<span class="number">3</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)(H)</span><br><span class="line"><span class="comment"># 이런 식으로 Layer를 더욱 층층이 쌓으면 좀 더 똑똑한 모델이 된다.</span></span><br><span class="line">model = tf.keras.models.Model(X, Y)</span><br><span class="line">model.<span class="built_in">compile</span>(loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>,</span><br><span class="line">              metrics=<span class="string">&#x27;accuracy&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h2><hr>생활코딩 Deep Learning Tensorflow (python) 강의<p><a href="https://opentutorials.org/course/4570">https://opentutorials.org/course/4570</a></p><p>생활코딩의 딥러닝 교육컨텐츠는 CCL 라이선스 BY를 따르고 있습니다. </p>]]></content:encoded>
      
      
      <category domain="https://jesuisjavert.github.io/categories/MachineLearning/">MachineLearning</category>
      
      <category domain="https://jesuisjavert.github.io/categories/MachineLearning/Python/">Python</category>
      
      <category domain="https://jesuisjavert.github.io/categories/MachineLearning/Python/Tensorflow/">Tensorflow</category>
      
      
      <category domain="https://jesuisjavert.github.io/tags/MachineLearning/">MachineLearning</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Python/">Python</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Tensorflow/">Tensorflow</category>
      
      
      <comments>https://jesuisjavert.github.io/2021/01/10/machinelearning-python5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>머신러닝야학-Tensorflow (python) 핵심요약-3</title>
      <link>https://jesuisjavert.github.io/2021/01/07/machinelearning-python4/</link>
      <guid>https://jesuisjavert.github.io/2021/01/07/machinelearning-python4/</guid>
      <pubDate>Thu, 07 Jan 2021 08:45:12 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;아이리스-품종-분류-모델-예제&quot;&gt;&lt;a href=&quot;#아이리스-품종-분류-모델-예제&quot; class=&quot;headerlink&quot; title=&quot;아이리스 품종 분류 모델 예제&quot;&gt;&lt;/a&gt;아이리스 품종 분류 모델 예제&lt;/h2&gt;&lt;p&gt;다음 예제인 아이리스 품종 분류 모델은 여러 독립변수가 하나의 종속변수(품종)을 예측하는 모델인데, 예측해야 하는 종속변수가 양적변수가 아닌 범주형 데이터라는 차이점이 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/gallery/post/tensorflow/tensorflow9.png&quot; alt=&quot;양적데이터 예측은 Regression, 범주형데이트 예측은 Classification&quot;&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="아이리스-품종-분류-모델-예제"><a href="#아이리스-품종-분류-모델-예제" class="headerlink" title="아이리스 품종 분류 모델 예제"></a>아이리스 품종 분류 모델 예제</h2><p>다음 예제인 아이리스 품종 분류 모델은 여러 독립변수가 하나의 종속변수(품종)을 예측하는 모델인데, 예측해야 하는 종속변수가 양적변수가 아닌 범주형 데이터라는 차이점이 있다.</p><p><img src="/gallery/post/tensorflow/tensorflow9.png" alt="양적데이터 예측은 Regression, 범주형데이트 예측은 Classification"></p><a id="more"></a><h2 id="데이터-전처리-범주-데이터-카테고리화"><a href="#데이터-전처리-범주-데이터-카테고리화" class="headerlink" title="데이터 전처리 (범주 데이터 카테고리화)"></a>데이터 전처리 (범주 데이터 카테고리화)</h2><p>범주화를 위해선 각각의 종속변수를 종류별로 분류화하는 것이 필요하다.</p><p>각각의 종속변수의 범주가 해당될 때 1, 아닐 때 0 이란 값을 입력해두어 나중에 각각의 범주에 해당될 확률을 계산하기 용이하게 한다.</p><h3 id="One-Hot-Encoding-원-핫-인코딩"><a href="#One-Hot-Encoding-원-핫-인코딩" class="headerlink" title="One-Hot Encoding (원 핫 인코딩)"></a>One-Hot Encoding (원 핫 인코딩)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 원핫인코딩</span></span><br><span class="line">아이리스 = pd.get_dummies(아이리스)</span><br></pre></td></tr></table></figure><p>다음과 같이 범주를 분류화 하는 것을 원 핫 인코딩이라고 부르고 Pandas의 get_dummies() 메쏘드로 데이터셋을 변형시킬 수 있다.</p><p><img src="/gallery/post/tensorflow/tensorflow10.png" alt="각각의 품종의 종류에 따라 칼럼을 나누는 원 핫 인코딩을 마치면 데이터셋은 이렇게 변한다!"></p><h2 id="시그모이드-Sigmoid-vs-소프트맥스-Softmax"><a href="#시그모이드-Sigmoid-vs-소프트맥스-Softmax" class="headerlink" title="시그모이드(Sigmoid) vs 소프트맥스(Softmax)"></a>시그모이드(Sigmoid) vs 소프트맥스(Softmax)</h2><p><img src="/gallery/post/sigsoft.png" alt="Sigmoid vs Softmax"></p><p>시그모이드 함수와 소프트맥스 함수는 각각의 용도에 따라 다르게 사용되는 함수인데, 이번 예제는 Multinomial Classification 이라 Softmax 함수로 분석을 진행한다.</p><p>강의에서는 Sigmoid 함수는 언급만 하고 넘어가지만 두 함수의 차이점을 정리해 보기로 했다.</p><table><thead><tr><th align="center">함수</th><th align="center">시그모이드</th><th align="center">소프트맥스</th></tr></thead><tbody><tr><td align="center">구분</td><td align="center">Binary Data(이진데이터)</td><td align="center">Multinomial classification (다항식 분류)</td></tr><tr><td align="center">사용용도</td><td align="center">주로 중간 층의 활성화 함수</td><td align="center">주로 출력 함수</td></tr><tr><td align="center">출력 값 범위</td><td align="center">0~1 사이의 확률 값</td><td align="center">0~1 사이의 확률값 (단, 결과 총합이 1)</td></tr><tr><td align="center">출력 값 의미</td><td align="center">기준치 이상,이하에 따라 True or False</td><td align="center">여러 클래스에 분류될 확률이 각각 출력됨</td></tr></tbody></table><p>시그모이드 함수는 학습을 반복할 수록 0 or 1에 수렴해서 최근들어 단독으로는 많이 사용되지 않으며 활성화 함수로 딥러닝의 한 단계(계단함수)로 자주 사용된다.</p><p>공통점: 둘다 공식이 굉장히 복잡하다.😂 <del>문송합니다</del></p><blockquote><p>퍼셉트론에서 활성화 함수를 계단함수에서 다른 함수로 변경하는 것이 신경망의 Loss를 줄이고 효율을 높이는 핵심!<br>계단함수 -&gt; 1) Sigmoid, 2) ReLU 3) Softmax</p></blockquote><hr><h2 id="예제-코드"><a href="#예제-코드" class="headerlink" title="예제 코드"></a>예제 코드</h2><p><img src="/gallery/post/tensorflow/tensorflow11.png" alt="코드 실습 진행 완료!"></p><h2 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h2><hr>생활코딩 Deep Learning Tensorflow (python) 강의<p><a href="https://opentutorials.org/course/4570">https://opentutorials.org/course/4570</a></p><p>생활코딩의 딥러닝 교육컨텐츠는 CCL 라이선스 BY를 따르고 있습니다. </p><p><a href="https://cjw0107.tistory.com/7">https://cjw0107.tistory.com/7</a><br>Sigmoid vs Softmax </p>]]></content:encoded>
      
      
      <category domain="https://jesuisjavert.github.io/categories/MachineLearning/">MachineLearning</category>
      
      <category domain="https://jesuisjavert.github.io/categories/MachineLearning/Python/">Python</category>
      
      <category domain="https://jesuisjavert.github.io/categories/MachineLearning/Python/Tensorflow/">Tensorflow</category>
      
      
      <category domain="https://jesuisjavert.github.io/tags/MachineLearning/">MachineLearning</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Python/">Python</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Tensorflow/">Tensorflow</category>
      
      
      <comments>https://jesuisjavert.github.io/2021/01/07/machinelearning-python4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>머신러닝야학-Tensorflow (python) 핵심요약-2</title>
      <link>https://jesuisjavert.github.io/2021/01/06/machinelearning-python3/</link>
      <guid>https://jesuisjavert.github.io/2021/01/06/machinelearning-python3/</guid>
      <pubDate>Wed, 06 Jan 2021 03:49:33 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;독립변수와-종속변수가-여럿인-예제-보스턴-집값-예측&quot;&gt;&lt;a href=&quot;#독립변수와-종속변수가-여럿인-예제-보스턴-집값-예측&quot; class=&quot;headerlink&quot; title=&quot;독립변수와 종속변수가 여럿인 예제 (보스턴 집값 예측)&quot;&gt;&lt;/a&gt;독립변수와 종속변수가 여럿인 예제 (보스턴 집값 예측)&lt;/h2&gt;&lt;h3 id=&quot;중앙값-Median-Value-란&quot;&gt;&lt;a href=&quot;#중앙값-Median-Value-란&quot; class=&quot;headerlink&quot; title=&quot;중앙값 (Median Value)란?&quot;&gt;&lt;/a&gt;중앙값 (Median Value)란?&lt;/h3&gt;&lt;p&gt;해당 지역 주택 값 중에 가장 가운데에 있는 값 (Range List 중 중앙 인덱스 값)&lt;/p&gt;
&lt;p&gt;일반적으론 평균값이 집단을 대표하는 숫자로 많이 사용되지만, 평균값의 표준편차가 너무 커서, 평균의 대표성을 무너뜨리는 이상치(Outlier)가 평균을 왜곡시킬때, 중앙값을 많이 사용함.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/gallery/post/tensorflow/tensorflow4.png&quot; alt=&quot;Machine Learning으로 여러 독립변수가 하나의 종속변수에 영향을 미치는 가중치를 공식화 할 수 있다!&quot;&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="독립변수와-종속변수가-여럿인-예제-보스턴-집값-예측"><a href="#독립변수와-종속변수가-여럿인-예제-보스턴-집값-예측" class="headerlink" title="독립변수와 종속변수가 여럿인 예제 (보스턴 집값 예측)"></a>독립변수와 종속변수가 여럿인 예제 (보스턴 집값 예측)</h2><h3 id="중앙값-Median-Value-란"><a href="#중앙값-Median-Value-란" class="headerlink" title="중앙값 (Median Value)란?"></a>중앙값 (Median Value)란?</h3><p>해당 지역 주택 값 중에 가장 가운데에 있는 값 (Range List 중 중앙 인덱스 값)</p><p>일반적으론 평균값이 집단을 대표하는 숫자로 많이 사용되지만, 평균값의 표준편차가 너무 커서, 평균의 대표성을 무너뜨리는 이상치(Outlier)가 평균을 왜곡시킬때, 중앙값을 많이 사용함.</p><p><img src="/gallery/post/tensorflow/tensorflow4.png" alt="Machine Learning으로 여러 독립변수가 하나의 종속변수에 영향을 미치는 가중치를 공식화 할 수 있다!"></p><a id="more"></a><hr><h2 id="보스턴-집값-모델-딥러닝-프로세스"><a href="#보스턴-집값-모델-딥러닝-프로세스" class="headerlink" title="보스턴 집값 모델 딥러닝 프로세스"></a>보스턴 집값 모델 딥러닝 프로세스</h2><p><img src="/gallery/post/tensorflow/tensorflow5.png" alt="보스턴 집값 예측 모델의 딥러닝 프로세스. 종속변수와 독립변수의 값을 입력한다."></p><p>보스턴 집값 예측 모델은 하나의 종속변수를 에측하기 위해 13개의 독립변수를 사용한다. </p><p>이런식으로 여러 독립변수가 목표한 종속변수에 미치는 영향을 분석하는 모형을 <strong>퍼셉트론</strong>이라고 부르고,각각의 변수(뉴런)가 종속변수에 미치는 영향력의 비율을 <strong>가중치</strong>라고 부른다. </p><p>각각의 뉴런으로 입력된 모든 값을 다 더한 다음(가중합)에 이 값에 더 해주는 상수를 <strong>편향</strong>이라고 한다.</p><p>즉, 하나의 뉴런에서 활성화 함수를 거쳐 최종적으로 편향을 더해야 예측값이 출력된다고 볼 수 있다.</p><hr><h2 id="퍼셉트론-가중치-편향"><a href="#퍼셉트론-가중치-편향" class="headerlink" title="퍼셉트론, 가중치, 편향"></a>퍼셉트론, 가중치, 편향</h2><p><img src="/gallery/post/tensorflow/tensorflow6.png" alt="퍼셉트론, 가중치와 편향"></p><hr><p>예제 코드는 레모네이드 예제와 거의 비슷하므로 생략한다. 추가로, get_weight 메소드를 통해<br>머신러닝이 학습한 가중치와 편향값을 알아볼 수 있다.</p><p><img src="/gallery/post/tensorflow/tensorflow7.png" alt="가중치를 확인시켜주는 get_weights 메소드"></p><hr><p>생활코딩에선 이러한 딥러닝이 이루어지는 과정을 직접 실행해 보는 워크북을 제공한다.</p><p><img src="/gallery/post/tensorflow/tensorflow8.png" alt="현재의 Loss 값과 이전의 Loss 값을 비교해가며 가중치의 +- 값을 대입해 학습한다"></p><p>가중치를 미분해가며 근사값을 대입해 가는 방식으로 딥러닝이 이루어지는데,<br>Learning Rate는 따로 정해진 값이 아니라, 학습을 반복하면서 적절한 값을 컴퓨터가 선택하게 된다.</p><hr><h2 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h2><hr>생활코딩 Deep Learning Tensorflow (python) 강의<p><a href="https://opentutorials.org/course/4570">https://opentutorials.org/course/4570</a></p><p>생활코딩의 딥러닝 교육컨텐츠는 CCL 라이선스 BY를 따르고 있습니다. </p>]]></content:encoded>
      
      
      <category domain="https://jesuisjavert.github.io/categories/MachineLearning/">MachineLearning</category>
      
      <category domain="https://jesuisjavert.github.io/categories/MachineLearning/Python/">Python</category>
      
      <category domain="https://jesuisjavert.github.io/categories/MachineLearning/Python/Tensorflow/">Tensorflow</category>
      
      
      <category domain="https://jesuisjavert.github.io/tags/MachineLearning/">MachineLearning</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Python/">Python</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Tensorflow/">Tensorflow</category>
      
      
      <comments>https://jesuisjavert.github.io/2021/01/06/machinelearning-python3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>머신러닝야학-Tensorflow (python) 핵심요약-1</title>
      <link>https://jesuisjavert.github.io/2021/01/05/machinelearning-python2/</link>
      <guid>https://jesuisjavert.github.io/2021/01/05/machinelearning-python2/</guid>
      <pubDate>Tue, 05 Jan 2021 07:49:33 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;img src=&quot;/gallery/post/ml.png&quot; alt=&quot;머신러닝 이 머선말이고?&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Deel-Learning을-Tensorflow로-구현해보자&quot;&gt;&lt;a href=&quot;#Deel-Learning을-Tensorflow로-구현해보자&quot; class=&quot;headerlink&quot; title=&quot;Deel Learning을 Tensorflow로 구현해보자&quot;&gt;&lt;/a&gt;Deel Learning을 Tensorflow로 구현해보자&lt;/h2&gt;&lt;p&gt;Tensorflow로 주로 사용하는 Deep Learning Algorithm은&lt;br&gt;지도 학습(회귀, 분류)을 위한 5가지가 주로 쓰인다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Decision Tree&lt;/li&gt;
&lt;li&gt;Random Forest&lt;/li&gt;
&lt;li&gt;KNN&lt;/li&gt;
&lt;li&gt;SVM&lt;/li&gt;
&lt;li&gt;Neural Network&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이런 알고리즘을 구현하기 위한 라이브러리들도 여러가지가 있는데,&lt;br&gt;TensorFlow, PyTorch, Caffe2, theano 등이 있다.&lt;/p&gt;
&lt;hr&gt;

&lt;h2 id=&quot;머신러닝의-프로세스&quot;&gt;&lt;a href=&quot;#머신러닝의-프로세스&quot; class=&quot;headerlink&quot; title=&quot;머신러닝의 프로세스&quot;&gt;&lt;/a&gt;머신러닝의 프로세스&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;과거의 데이터를 준비한다.&lt;/li&gt;
&lt;li&gt;데이터로 모델을 학습(Fit)한다.&lt;/li&gt;
&lt;li&gt;모델의 구조를 만든다.&lt;/li&gt;
&lt;li&gt;모델을 이용한다.&lt;hr&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="/gallery/post/ml.png" alt="머신러닝 이 머선말이고?"></p><h2 id="Deel-Learning을-Tensorflow로-구현해보자"><a href="#Deel-Learning을-Tensorflow로-구현해보자" class="headerlink" title="Deel Learning을 Tensorflow로 구현해보자"></a>Deel Learning을 Tensorflow로 구현해보자</h2><p>Tensorflow로 주로 사용하는 Deep Learning Algorithm은<br>지도 학습(회귀, 분류)을 위한 5가지가 주로 쓰인다.</p><ol><li>Decision Tree</li><li>Random Forest</li><li>KNN</li><li>SVM</li><li>Neural Network</li></ol><p>이런 알고리즘을 구현하기 위한 라이브러리들도 여러가지가 있는데,<br>TensorFlow, PyTorch, Caffe2, theano 등이 있다.</p><hr><h2 id="머신러닝의-프로세스"><a href="#머신러닝의-프로세스" class="headerlink" title="머신러닝의 프로세스"></a>머신러닝의 프로세스</h2><ol><li>과거의 데이터를 준비한다.</li><li>데이터로 모델을 학습(Fit)한다.</li><li>모델의 구조를 만든다.</li><li>모델을 이용한다.<hr><a id="more"></a></li></ol><h2 id="Neural-Net-인공-신경망"><a href="#Neural-Net-인공-신경망" class="headerlink" title="Neural Net (인공 신경망)"></a>Neural Net (인공 신경망)</h2><p>사람의 두뇌를 동작하는 방법을 모방해서 기계가 학습할 수 있도록 고안된 Algorithm.</p><hr><h2 id="Pandas-Library"><a href="#Pandas-Library" class="headerlink" title="Pandas Library"></a>Pandas Library</h2><p>Python에서 대표적으로 표를 다루는 도구인 pandas 라이브러리를 통해 실습을 진행한다.<br>pandas의 간단한 사용법을 통해 표를 불러오고, Shape를 확인하고, 원하는 칼럼을 선택하고, 칼럼의 대표 머릿값을 출력하는 등의 기능을 수행할 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">파일 읽어오기: read_csv(<span class="string">&#x27;/경로/파일명.csv&#x27;</span>)</span><br><span class="line">모양 확인하기: 데이터.shape</span><br><span class="line">칼럼 선택하기: 데이터[[<span class="string">&#x27;칼럼명1&#x27;</span>, <span class="string">&#x27;칼럼명2&#x27;</span>, <span class="string">&#x27;칼럼명3&#x27;</span>]]</span><br><span class="line">칼럼 이름 출력하기: 데이터.columns</span><br><span class="line">맨 위 <span class="number">5</span>개 관측치 출력하기: 데이터.head()</span><br></pre></td></tr></table></figure><hr><h2 id="모델을-학습시켜-보자"><a href="#모델을-학습시켜-보자" class="headerlink" title="모델을 학습시켜 보자."></a>모델을 학습시켜 보자.</h2><p>생활코딩에서 제공하는 예제 코드는 다음과 같다.<br>각 주석 밑에 수업에서 제공하는 내용들을 첨가해서 설명을 각주로 달겠다.</p><p><img src="/gallery/post/tensorflow/tensorflow1.png" alt="머신러닝의 프로세스"></p><p>머신러닝의 프로세스의 단계를 지켜 코드를 짠다.<br>tensorflow의 오픈소스 신경만 라이브러리 중 하나인 keras를 사용한다.<br>Keras는 유저가 손쉽게 딥 러닝을 구현할 수 있도록 도와주는 상위 레벨의 인터페이스 혹은 API이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###########################</span></span><br><span class="line"><span class="comment"># 기본 라이브러리를 불러온다.</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">###########################</span></span><br><span class="line"><span class="comment"># 데이터를 전처리한다.</span></span><br><span class="line">파일경로 = <span class="string">&#x27;https://raw.githubusercontent.com/blackdew/tensorflow1/master/csv/lemonade.csv&#x27;</span></span><br><span class="line">레모네이드 = pd.read_csv(파일경로)</span><br><span class="line">레모네이드.head()</span><br><span class="line"><span class="comment"># 데이터의 상위 5가지 관측치를 통해 잘 불러와지는지 확인한다</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 종속변수, 독립변수</span></span><br><span class="line">독립 = 레모네이드[[<span class="string">&#x27;온도&#x27;</span>]]</span><br><span class="line">종속 = 레모네이드[[<span class="string">&#x27;판매량&#x27;</span>]]</span><br><span class="line">print(독립.shape, 종속.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 원인과 결과를 입력한다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###########################</span></span><br><span class="line"><span class="comment"># 모델을 만듭니다.</span></span><br><span class="line">X = tf.keras.layers.Input(shape=[<span class="number">1</span>])</span><br><span class="line">Y = tf.keras.layers.Dense(<span class="number">1</span>)(X)</span><br><span class="line">model = tf.keras.models.Model(X, Y)</span><br><span class="line">model.<span class="built_in">compile</span>(loss=<span class="string">&#x27;mse&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tensorflow의 Keras 라이브러리의 Layer에 독립변수, 종속변수를 입력하는데 각각의 shape의 크기에 유의하여 입려개준다.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="Loss란"><a href="#Loss란" class="headerlink" title="Loss란?"></a>Loss란?</h3><p><img src="/gallery/post/tensorflow/tensorflow2.png" alt="Epoch의 횟수에 따른 Loss 감소"></p><p>Loss란 학습된 모델의 예측값과 실제 결과 사이의 차이점을 손쉽게 알아보기 위한 값으로,</p><p>Loss = (예측 - 결과)^2 의 평균</p><p>그래서 Loss 값이 0에 가까워 질 때, 학습이 잘 되고 있다는 증거이고, 학습을 반복해서 시킴으로써 Loss값을 줄일 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###########################</span></span><br><span class="line"><span class="comment"># 모델을 학습시킵니다. </span></span><br><span class="line">model.fit(독립, 종속, epochs=<span class="number">10</span>)</span><br><span class="line">model.fit(독립, 종속, epochs=<span class="number">1000</span>, verbose=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#학습을 시킬때 epochs 값을 조절해가며 학습의 횟수를 설정할 수 있다. verbose = 0을 입력하지 않으면 epoch를 한 번 할때마다 출력값을 반환하지만, verbose=0을 입력해두면 최종 결과값 만을 출력하므로 학습 횟수가 많을 땐, verbose=0 값을 걸어 둔다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###########################</span></span><br><span class="line"><span class="comment"># 모델을 이용합니다. </span></span><br><span class="line">print(model.predict(독립))</span><br><span class="line">print(model.predict([[<span class="number">15</span>]]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><p><img src="/gallery/post/tensorflow/tensorflow3.png" alt="실제로 예측을 굉장히 잘 하는 것을 볼 수 있다."></p><p>본 실습의 경우엔 독립변수가 하나, 종속변수가 하나이기 때문에 굉장히 단순한 모델이라, 예측값이 실제값과 꽤 많이 비슷한 모델을 학습하는 것을 알 수 있었다.</p><hr><h2 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h2><hr>생활코딩 Deep Learning Tensorflow (python) 강의<p><a href="https://opentutorials.org/course/4570">https://opentutorials.org/course/4570</a></p><p>생활코딩의 딥러닝 교육컨텐츠는 CCL 라이선스 BY를 따르고 있습니다. </p>]]></content:encoded>
      
      
      <category domain="https://jesuisjavert.github.io/categories/MachineLearning/">MachineLearning</category>
      
      <category domain="https://jesuisjavert.github.io/categories/MachineLearning/Python/">Python</category>
      
      <category domain="https://jesuisjavert.github.io/categories/MachineLearning/Python/Tensorflow/">Tensorflow</category>
      
      
      <category domain="https://jesuisjavert.github.io/tags/MachineLearning/">MachineLearning</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Python/">Python</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Tensorflow/">Tensorflow</category>
      
      
      <comments>https://jesuisjavert.github.io/2021/01/05/machinelearning-python2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>머신러닝 야학-머신러닝1 핵심 요약노트</title>
      <link>https://jesuisjavert.github.io/2021/01/05/machinelearning-python1/</link>
      <guid>https://jesuisjavert.github.io/2021/01/05/machinelearning-python1/</guid>
      <pubDate>Tue, 05 Jan 2021 04:11:18 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;img src=&quot;/gallery/post/machinelearning/machine-learning0.png&quot; alt=&quot;2021 머신러닝 야학 2기 개강!&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2021-머신러닝-야학-2기-개강&quot;&gt;&lt;a href=&quot;#2021-머신러닝-야학-2기-개강&quot; class=&quot;headerlink&quot; title=&quot;2021 머신러닝 야학 2기 개강&quot;&gt;&lt;/a&gt;2021 머신러닝 야학 2기 개강&lt;/h2&gt;&lt;p&gt;평소 SSAFY 에서부터 관심이 생겼던 Machine Learning 분야에 새롭게 도전해 보았다.&lt;br&gt;친구들이 딥러닝 프로젝트로 Image Scanning 이나 Classification 기술을 도입해서&lt;br&gt;얼굴 관상 보기 프로젝트라던지, 물고기 종류 분류라던지 신박한 기술들을 많이 보여줬었는데,&lt;br&gt;평소 자연어 처리에 관심 많았던지라, 그동안 배워왔던 빅데이터 기술들을 좀 더 딥하게 적용시켜 보고 싶어서&lt;br&gt;머신러닝 야학 2기를 신청하게 되었다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="/gallery/post/machinelearning/machine-learning0.png" alt="2021 머신러닝 야학 2기 개강!"></p><h2 id="2021-머신러닝-야학-2기-개강"><a href="#2021-머신러닝-야학-2기-개강" class="headerlink" title="2021 머신러닝 야학 2기 개강"></a>2021 머신러닝 야학 2기 개강</h2><p>평소 SSAFY 에서부터 관심이 생겼던 Machine Learning 분야에 새롭게 도전해 보았다.<br>친구들이 딥러닝 프로젝트로 Image Scanning 이나 Classification 기술을 도입해서<br>얼굴 관상 보기 프로젝트라던지, 물고기 종류 분류라던지 신박한 기술들을 많이 보여줬었는데,<br>평소 자연어 처리에 관심 많았던지라, 그동안 배워왔던 빅데이터 기술들을 좀 더 딥하게 적용시켜 보고 싶어서<br>머신러닝 야학 2기를 신청하게 되었다.</p><a id="more"></a><p><img src="/gallery/post/machinelearning/machine-learning1.png" alt="내가 직면한 문제를 해결하려는 절실함이 필요하다!"></p><hr><h2 id="인공지능을-구현하는-기술-머신러닝이란"><a href="#인공지능을-구현하는-기술-머신러닝이란" class="headerlink" title="인공지능을 구현하는 기술, 머신러닝이란?"></a>인공지능을 구현하는 기술, 머신러닝이란?</h2><p>기계학습이란? 기계를 학습시켜, 인간의 판단을 위임하기 위해서 고안된 기술!</p><p>전염병판정, 기계번역, 자율주행 등 많은 분야에서 활용되고 있다.</p><p>머신러닝의 가장 큰 키워드는 바로 <strong>인간의 결정</strong> 을 도와 준 다는 것.</p><p>결정 = 비교 + 선택</p><p>여러가지의 선택지가 있을 때, 객관적인 <strong>데이터</strong>를 기계에게 학습시켜 <strong>분석</strong>하여, 인간의 빠르고 정확한 <strong>결정</strong>을 도와주는 것.</p><p><img src="/gallery/post/machinelearning/machine-learning2.png" alt="Google Teachable Machine을 이용해 곰돌이를 학습시켜 보았다."></p><p>여러 장의 사진을 학습시켜, 그 결과가 내가 정한 클래스에 속하는지 쉽게 이용해 볼 수 있는 사이트가 있다. 역시 갓구글..<br><a href="https://teachablemachine.withgoogle.com/">https://teachablemachine.withgoogle.com/</a></p><p>머신러닝야학에선 이 google teachable machine에서 만들어준 model을<br>간단한 App으로 만들어주는 활용 예제도 존재했다.</p><p><img src="/gallery/post/machinelearning/machine-learning3.png" alt="곰돌이 인지, 스프인지 판단해주는 기특한 녀석"></p><p>많은 사람들이 머신러닝에 대해 고민하고있고, 자신만의 기획서를 작성하기도 한다. 프로그래머로서 고민하는 것보다, 자신의 문제를 먼저 어떻게 해결할지 <strong>궁리</strong> 해보라는 강의의 포인트에 맞게, 남녀노소 다양한 사람들의 아이디어가 살아 숨쉬는 공간인 것 같다.</p><p><a href="https://bit.ly/ml-my-plan/">https://bit.ly/ml-my-plan/</a></p><hr><h2 id="좀-더-본격적으로-머신러닝을-시작해보자"><a href="#좀-더-본격적으로-머신러닝을-시작해보자" class="headerlink" title="좀 더 본격적으로 머신러닝을 시작해보자."></a>좀 더 본격적으로 머신러닝을 시작해보자.</h2><p>아이디어를 현실화 하기 위해선, 데이터가 필요하다.<br>그리고 그 데이터는 가장 효율적으로 2가지로 전달가능하다. 표 (Table) 과 좌표평면(Coordinates)</p><p>표라는 것을 좀 더 자세히 보자.<br>표는 가로(row) 와 세로 (column), 즉 행과 열로 구성되어 있다.</p><p>이 표는 다양한 분야에서 다양한 이름으로 불리는데,<br>특히 데이터 분야에서는 테이블을 데이터셋(DataSet)이라고 부르고, 주로 행의 데이터를 관측치, 열을 특성 및 변수라고 지칭한다.</p><p><img src="/gallery/post/machinelearning/machine-learning4.png" alt="Table의 요소를 가리키는 많은 이름들"></p><hr><h2 id="독립변수와-종속변수"><a href="#독립변수와-종속변수" class="headerlink" title="독립변수와 종속변수"></a>독립변수와 종속변수</h2><p>변수(Variable)란? 즉, 변화하는 수!<br>데이터셋에선 ‘열’을 의미한다.</p><p><strong>독립변수</strong>란 <strong>원인</strong>이 되는 열, <strong>종속변수</strong>는 그 원인으로 인해 <strong>결과</strong>가 되는 열이라고 이해하면 쉽다.</p><p>예를 들어 온도가 20도 일때, 맥주의 판매량이 40병이라는 데이터가 있다면,<br>온도라는 원인에 의해 맥주의 판매량이 영향을 준다고 가정 했을때,<br>온도는 결과에 영향을 받지 않는 독립적인 사건이지만, 결과는 원인에 종속되어서 발생한 사건이다.</p><p>물론 세상의 모든 데이터는 인과관계로 존재하지 않는다. 다양한 상관관계가 있을 수 있고, 인과관계는 그 중 하나일 것이다!</p><blockquote><p>독립변수는 원인이다.<br>종속변수는 결과다.<br>독립변수와 종속변수의 관계를 인과관계라고 한다.<br>인과관계는 상관관계에 포함된다.</p></blockquote><hr><h2 id="머신러닝의-분류"><a href="#머신러닝의-분류" class="headerlink" title="머신러닝의 분류"></a>머신러닝의 분류</h2><p><img src="/gallery/post/machinelearning/machine-learning5.png" alt="머신러닝의 다양한 분야들"></p><h3 id="지도-학습-Supervised-Learning"><a href="#지도-학습-Supervised-Learning" class="headerlink" title="지도 학습 (Supervised Learning)"></a>지도 학습 (Supervised Learning)</h3><blockquote><p>정답이 있는 문제를 해결하는 것</p></blockquote><p>보통은 과거의 데이터를 통해서 결과를 예측하는 것에 사용된다. (ex) 온도와 아이스크림 판매량 간의 원인-결과 분석을 통해 판매량을 예측하는 모델)</p><ol><li><p>분류 (Classification)<br>예측하고자 하는 종속변수가 <strong>이름</strong>일 때, 보통 사용됨.<br>ex) 공부시간과 합격여부, 키,몸무게와 현역-공익, 메일 발신인과 스팸메일 여부 등</p></li><li><p>회귀 (Regression)<br>예측하고자 하는 종속변수가 <strong>숫자</strong>일 때, 보통 사용됨.<br>ex) 공부시간과 시험점수의 상관관계, 역세권과 집 값, 자동차 속도와 안전성, 나이와 키 등</p></li></ol><h3 id="비지도학습-Unsupervised-Learning"><a href="#비지도학습-Unsupervised-Learning" class="headerlink" title="비지도학습 (Unsupervised Learning)"></a>비지도학습 (Unsupervised Learning)</h3><blockquote><p>관찰을 통해 새로운 의미나 관계를 밝혀내는 것</p></blockquote><ol><li><p>군집화 (Clustering)<br>군집화란 비슷한 행을 찾아서 그룹을 만드는 것<br>ex) 좌표평면내의 비슷한 위치의 좌표값들을 여러 단위의 군집(Cluster) 단위로 나누어 그룹핑하는 것</p></li><li><p>연관 규칙 학습(Association rule learning)<br>서로 관련이 있는 특성을 그룹화 해주는 것<br>ex) 쇼핑몰 내의 상품추천, 영화추천, 드라마 추천 등</p></li></ol><blockquote><p>관측치를 그룹핑 해주는것 -&gt; 군집화<br>특성을 그룹핑 해주는 것 -&gt; 연관 규칙 학습</p></blockquote><p><img src="/gallery/post/machinelearning/machine-learning6.png" alt="지도학습 vs 비지도학습"></p><h3 id="강화학습-Reinforcement-Learning"><a href="#강화학습-Reinforcement-Learning" class="headerlink" title="강화학습 (Reinforcement Learning)"></a>강화학습 (Reinforcement Learning)</h3><blockquote><p>더 좋은 보상을 받기 위해서 수련하는 것</p></blockquote><p><img src="/gallery/post/machinelearning/machine-learning7.png" alt="강화학습하는 수달(귀엽다)"></p><p>현재의 상태를 관찰 -&gt; 관찰에 따라 행동 -&gt; 보상을 더 받을 수 있도록 Agent가 학습하는 일련의 과정을 반복하는 것.</p><h2 id="머신러닝-지도"><a href="#머신러닝-지도" class="headerlink" title="머신러닝 지도"></a>머신러닝 지도</h2><p><img src="/gallery/post/machinelearning/machine-learning8.png" alt="당신이 필요한 머신러닝 Roadmap"></p><p>다음과 같은 판단 절차로 내게 필요한 머신러닝의 기법이 무엇인지 판단 할 수 있다.</p><hr><p>출처)</p><p>생활코딩<br><a href="https://opentutorials.org/course/4548/28891">https://opentutorials.org/course/4548/28891</a></p><p>포스트 내의 삽화와 자료들은 생활코딩의 저작권 정책에 따라 작성되었습니다.</p>]]></content:encoded>
      
      
      <category domain="https://jesuisjavert.github.io/categories/MachineLearning/">MachineLearning</category>
      
      <category domain="https://jesuisjavert.github.io/categories/MachineLearning/Python/">Python</category>
      
      <category domain="https://jesuisjavert.github.io/categories/MachineLearning/Python/Tensorflow/">Tensorflow</category>
      
      
      <category domain="https://jesuisjavert.github.io/tags/MachineLearning/">MachineLearning</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Python/">Python</category>
      
      <category domain="https://jesuisjavert.github.io/tags/Tensorflow/">Tensorflow</category>
      
      
      <comments>https://jesuisjavert.github.io/2021/01/05/machinelearning-python1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Markdown 문서를 보기 좋게 작성해보자</title>
      <link>https://jesuisjavert.github.io/2020/12/12/markdown-grammar/</link>
      <guid>https://jesuisjavert.github.io/2020/12/12/markdown-grammar/</guid>
      <pubDate>Sat, 12 Dec 2020 12:55:22 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;img src=&quot;/gallery/post/markdown.png&quot; alt=&quot;Markdown&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VScode에서 Markdown Preview Extension을 이용하면 보기 편하다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;마크다운이란&quot;&gt;&lt;a href=&quot;#마크다운이란&quot; class=&quot;headerlink&quot; title=&quot;마크다운이란?&quot;&gt;&lt;/a&gt;마크다운이란?&lt;/h4&gt;&lt;p&gt;Markdown은 2004년 미국의 개발자 John Gruber와 Aaron Swartz가 개발한 경량형 마크업 언어로, 쉽고 빠른 포맷을 지녀 많은 개발자들에 의해 널리 사랑받고 있습니다.&lt;/p&gt;
&lt;p&gt;Github 의 README, 블로그의 글, 개발 TIL 작성 등, 여러 분야에서 활용 되고 있습니다.&lt;/p&gt;
&lt;p&gt;마크다운의 문법 요소들을 정리해두어, 앞으로 작성할 블로그의 포스팅에 어느정도의 Guideline을 만들어 두려고 합니다.&lt;/p&gt;
&lt;hr&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="/gallery/post/markdown.png" alt="Markdown"></p><blockquote><p>VScode에서 Markdown Preview Extension을 이용하면 보기 편하다</p></blockquote><h4 id="마크다운이란"><a href="#마크다운이란" class="headerlink" title="마크다운이란?"></a>마크다운이란?</h4><p>Markdown은 2004년 미국의 개발자 John Gruber와 Aaron Swartz가 개발한 경량형 마크업 언어로, 쉽고 빠른 포맷을 지녀 많은 개발자들에 의해 널리 사랑받고 있습니다.</p><p>Github 의 README, 블로그의 글, 개발 TIL 작성 등, 여러 분야에서 활용 되고 있습니다.</p><p>마크다운의 문법 요소들을 정리해두어, 앞으로 작성할 블로그의 포스팅에 어느정도의 Guideline을 만들어 두려고 합니다.</p><hr><a id="more"></a><h4 id="Heading"><a href="#Heading" class="headerlink" title="Heading"></a>Heading</h4><p>기본적인 heading은 #의 갯수로 헤더의 크기를 정할 수 있습니다. </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Heading 1</span></span><br><span class="line"><span class="section">## Heading 2</span></span><br><span class="line"><span class="section">### Heading 3</span></span><br><span class="line"><span class="section">#### Heading 4</span></span><br><span class="line"><span class="section">##### Heading 5</span></span><br><span class="line"><span class="section">###### Heading 6</span></span><br></pre></td></tr></table></figure><h1 id="Heading-1"><a href="#Heading-1" class="headerlink" title="Heading 1"></a>Heading 1</h1><h2 id="Heading-2"><a href="#Heading-2" class="headerlink" title="Heading 2"></a>Heading 2</h2><h3 id="Heading-3"><a href="#Heading-3" class="headerlink" title="Heading 3"></a>Heading 3</h3><h4 id="Heading-4"><a href="#Heading-4" class="headerlink" title="Heading 4"></a>Heading 4</h4><h5 id="Heading-5"><a href="#Heading-5" class="headerlink" title="Heading 5"></a>Heading 5</h5><h6 id="Heading-6"><a href="#Heading-6" class="headerlink" title="Heading 6"></a>Heading 6</h6><hr><h4 id="밑줄"><a href="#밑줄" class="headerlink" title="밑줄"></a>밑줄</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">__<span class="emphasis">_ 표시는 밑줄을 표시합니다.</span></span></span><br></pre></td></tr></table></figure><hr><h4 id="인용-표시-Quote"><a href="#인용-표시-Quote" class="headerlink" title="인용 표시 (Quote)"></a>인용 표시 (Quote)</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 표시는 뒷 배경과 Text를 강조할 수 있습니다.</span></span><br></pre></td></tr></table></figure><blockquote><p>뭔가 명언 같은 걸 넣어야 할 것 같다.</p></blockquote><hr><h4 id="Bold-amp-Italic-amp-Strikethrough"><a href="#Bold-amp-Italic-amp-Strikethrough" class="headerlink" title="Bold  &amp; Italic &amp; Strikethrough"></a>Bold  &amp; Italic &amp; Strikethrough</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**Bold**</span> <span class="emphasis">*Italic*</span> ~~Strikethrough~~ </span><br><span class="line"><span class="strong">**로 감싸면 굵은 글씨로 표시가 됩니다.</span></span><br><span class="line"><span class="strong"><span class="emphasis">*로 감싸면 이태릭 체로 표시가 됩니다.</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">~~로 감싸면 삭선처리가 됩니다.</span></span></span><br></pre></td></tr></table></figure><p><strong>Bold</strong><br><em>Italic</em><br><del>Strikethrough</del> </p><hr><h4 id="Bullet-List-amp-Numbered-List"><a href="#Bullet-List-amp-Numbered-List" class="headerlink" title="Bullet List &amp; Numbered List"></a>Bullet List &amp; Numbered List</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">To do List:</span><br><span class="line"><span class="bullet">-</span> Something new</span><br><span class="line"><span class="bullet">-</span> Something good</span><br><span class="line"><span class="bullet">1.</span> Something important</span><br><span class="line"><span class="bullet">2.</span> Something interesting</span><br></pre></td></tr></table></figure><p>To do List:</p><ul><li>Something new</li><li>Something good</li></ul><ol><li>Something important</li><li>Something interesting</li></ol><hr><h4 id="HTML-Link-amp-Image-넣기"><a href="#HTML-Link-amp-Image-넣기" class="headerlink" title="HTML Link &amp; Image 넣기"></a>HTML Link &amp; Image 넣기</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Click Here → [<span class="string">MyGitHubPage</span>](<span class="link">https://github.com/jesuisjavert</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string">Image</span>](<span class="link">https://picsum.photos/seed/picsum/200/300</span>)</span><br></pre></td></tr></table></figure><p>Click Here → <a href="https://github.com/jesuisjavert">MyGitHubPage</a></p><p><img src="https://picsum.photos/seed/picsum/800/300" alt="Image"></p><hr><h4 id="In-line-코드-강조"><a href="#In-line-코드-강조" class="headerlink" title="In-line 코드 강조"></a>In-line 코드 강조</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`print(&#x27;hello Javert&#x27;)`</span></span><br></pre></td></tr></table></figure><p><code>print(&#39;hello Javert&#39;)</code></p><hr><h4 id="Table-삽입"><a href="#Table-삽입" class="headerlink" title="Table 삽입"></a>Table 삽입</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">과일 | 특징 | 특이사항</span><br><span class="line">--|:--:|--:</span><br><span class="line"><span class="code">`Apple`</span> | 사과는 맛있어 | <span class="code">`맛있으면 빨개`</span></span><br><span class="line"><span class="code">`Lemon`</span> | 레몬은 셔 | 여기는 우측 정렬</span><br><span class="line"><span class="code">`Lime`</span> | 라임은 상큼해 |</span><br><span class="line"><span class="code">`Grape`</span> | 포도는 달아 |</span><br></pre></td></tr></table></figure><table><thead><tr><th>과일</th><th align="center">특징</th><th align="right">특이사항</th></tr></thead><tbody><tr><td><code>Apple</code></td><td align="center">사과는 맛있어</td><td align="right"><code>맛있으면 빨개</code></td></tr><tr><td><code>Lemon</code></td><td align="center">레몬은 셔</td><td align="right">여기는 우측 정렬</td></tr><tr><td><code>Lime</code></td><td align="center">라임은 상큼해</td><td align="right"></td></tr><tr><td><code>Grape</code></td><td align="center">포도는 달아</td><td align="right"></td></tr></tbody></table><hr>]]></content:encoded>
      
      
      <category domain="https://jesuisjavert.github.io/categories/etc/">etc</category>
      
      <category domain="https://jesuisjavert.github.io/categories/etc/Markdown/">Markdown</category>
      
      
      <category domain="https://jesuisjavert.github.io/tags/etc/">etc</category>
      
      <category domain="https://jesuisjavert.github.io/tags/markdown/">markdown</category>
      
      <category domain="https://jesuisjavert.github.io/tags/grammar/">grammar</category>
      
      
      <comments>https://jesuisjavert.github.io/2020/12/12/markdown-grammar/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
