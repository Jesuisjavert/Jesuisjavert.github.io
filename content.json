{"pages":[{"title":"About me","text":"안녕하세요. Javert라는 필명을 쓰는 강동훈이라고 합니다. 재밌게도, 저의 대학전공은 프랑스어입니다. 졸업 이후삼성청년SW아카데미(SSAFY) 3기로 입학하게 되어한국어, 영어, 프랑스어를 공부했던 제가파이썬, 자바, 자바스크립트라는 언어를 배우게 되었습니다.😂 개발을 공부하면서 알게 되는 것들과 남겨야 할것 들을정리하기 위해 블로그를 운영하고 있습니다. 잘못된 부분이 있거나 논의가 필요한 부분은댓글이나 메일로 남겨주시면 감사하겠습니다. Hi. I’m Kang Dong-hoon, who uses the pseudonym Javert. Interestingly, my college major is French. After graduation,I entered Samsung Software Academy for Youth(SSAFY).I learned Korean, English and French andI’m learning Python, Java, and JavaScript, now. (Yeah I know.. that’s a lot..)😂 I am running a blog to organize what I learnand to leave behind while studying development Any part that is wrong or needs discussion, Please leave a comment.😊 Salut. Je suis Kang Dong-hoon, qui utilise le pseudonyme Javert. À l’université Hankuk des études étrangères, J’ai appris le français.Après mon obtention du diplôme,Je suis entré à la Samsung Software Academy for Youth (SSAFY).J’ai appris le coréen, l’anglais, le français jusqu’à 2019 maisj’apprends Python, Java et JavaScript, maintenant. (Oui.. je sais.. c’est trop bcp) 😂 Je dirige un blog pour organiser ce que j’apprendset de laisser derrière tout en étudiant le développement Toute partie erronée ou nécessitant une discussion,veuillez laisser un commentaire. Merci 😊","link":"/about/index.html"},{"title":"","text":"const num = 02020; console.log(num); // ❓❓❓","link":"/about/test.js"}],"posts":[{"title":"AWS Network Online Study (ANOS 2기) 시작!","text":"AWS(Amazon Web Services)란..?AWS가 세계를 휩쓸고 있다.클라우드 서비스는 기존의 온프레미스(On-Premise) 방식을 넘어업계의 표준으로 다가서고 있고, 많은 기업들이 서버를 클라우드로 이전하는 추세이다. 평소에 AWS를 활용해 서비스를 배포하고, 이것저것 기능을 더해 아키텍쳐를 설계해 본 경험은 있지만,네트워크에 대한 이론적 배경을 좀 더 자세히 공부하고 싶어서,AWS Network Online Study [ANOS 2기]를 시작하게 되었다. 따라하며 배우는 AWS 네트워크 입문 스터디는 기본적으론 이 책을 쓰신 저자(가시다)님이 책 내용을 설명해주시면서,같이 실습과제를 진행하는 식으로 진행이 되며,매주 일요일 저녁에 2시간씩 저녁 9시부터 11시까지 진행이 된다.아마 직장인들을 대상으로 하는 스터디라서, 늦은 시간에 진행을 하는 것 같다.ㅎㅎ 기본적으로는 2시간 동안, 미리 예습해온 내용에 대해서 설명해주시고, 실습내용을 따라해보고, 각 주차별로 진행된 실습 과제를 제출하여, 진도표를 공유하는 식으로 진행이 된다. AWS 스터디이지만, 개발자이신분들보다는 네트워크나 보안 쪽에서 현업으로 일하고 계신 분들을 위주로 진행되다보니, 네트워크쪽 내용들을 예습해 가야 할 것 같다. 이번이 ANOS 2기라고 하는데, Notion으로 주시는 공지나 책의 완성도, 스터디의 완성도 등정말 배울 점이 많은 분들에게 무료 강의를 듣는 기분이라서 굉장히 만족하고 있다. 앞으로는 AWS 카테고리에 각 주차별로 배운 점이나, 실습한 내용들을 올려볼 생각이다.","link":"/2021/01/12/aws-study1/"},{"title":"머신러닝 야학-머신러닝1 핵심 요약노트","text":"2021 머신러닝 야학 2기 개강평소 SSAFY 에서부터 관심이 생겼던 Machine Learning 분야에 새롭게 도전해 보았다.친구들이 딥러닝 프로젝트로 Image Scanning 이나 Classification 기술을 도입해서얼굴 관상 보기 프로젝트라던지, 물고기 종류 분류라던지 신박한 기술들을 많이 보여줬었는데,평소 자연어 처리에 관심 많았던지라, 그동안 배워왔던 빅데이터 기술들을 좀 더 딥하게 적용시켜 보고 싶어서머신러닝 야학 2기를 신청하게 되었다. 인공지능을 구현하는 기술, 머신러닝이란?기계학습이란? 기계를 학습시켜, 인간의 판단을 위임하기 위해서 고안된 기술! 전염병판정, 기계번역, 자율주행 등 많은 분야에서 활용되고 있다. 머신러닝의 가장 큰 키워드는 바로 인간의 결정 을 도와 준 다는 것. 결정 = 비교 + 선택 여러가지의 선택지가 있을 때, 객관적인 데이터를 기계에게 학습시켜 분석하여, 인간의 빠르고 정확한 결정을 도와주는 것. 여러 장의 사진을 학습시켜, 그 결과가 내가 정한 클래스에 속하는지 쉽게 이용해 볼 수 있는 사이트가 있다. 역시 갓구글..https://teachablemachine.withgoogle.com/ 머신러닝야학에선 이 google teachable machine에서 만들어준 model을간단한 App으로 만들어주는 활용 예제도 존재했다. 많은 사람들이 머신러닝에 대해 고민하고있고, 자신만의 기획서를 작성하기도 한다. 프로그래머로서 고민하는 것보다, 자신의 문제를 먼저 어떻게 해결할지 궁리 해보라는 강의의 포인트에 맞게, 남녀노소 다양한 사람들의 아이디어가 살아 숨쉬는 공간인 것 같다. https://bit.ly/ml-my-plan/ 좀 더 본격적으로 머신러닝을 시작해보자.아이디어를 현실화 하기 위해선, 데이터가 필요하다.그리고 그 데이터는 가장 효율적으로 2가지로 전달가능하다. 표 (Table) 과 좌표평면(Coordinates) 표라는 것을 좀 더 자세히 보자.표는 가로(row) 와 세로 (column), 즉 행과 열로 구성되어 있다. 이 표는 다양한 분야에서 다양한 이름으로 불리는데,특히 데이터 분야에서는 테이블을 데이터셋(DataSet)이라고 부르고, 주로 행의 데이터를 관측치, 열을 특성 및 변수라고 지칭한다. 독립변수와 종속변수변수(Variable)란? 즉, 변화하는 수!데이터셋에선 ‘열’을 의미한다. 독립변수란 원인이 되는 열, 종속변수는 그 원인으로 인해 결과가 되는 열이라고 이해하면 쉽다. 예를 들어 온도가 20도 일때, 맥주의 판매량이 40병이라는 데이터가 있다면,온도라는 원인에 의해 맥주의 판매량이 영향을 준다고 가정 했을때,온도는 결과에 영향을 받지 않는 독립적인 사건이지만, 결과는 원인에 종속되어서 발생한 사건이다. 물론 세상의 모든 데이터는 인과관계로 존재하지 않는다. 다양한 상관관계가 있을 수 있고, 인과관계는 그 중 하나일 것이다! 독립변수는 원인이다.종속변수는 결과다.독립변수와 종속변수의 관계를 인과관계라고 한다.인과관계는 상관관계에 포함된다. 머신러닝의 분류 지도 학습 (Supervised Learning) 정답이 있는 문제를 해결하는 것 보통은 과거의 데이터를 통해서 결과를 예측하는 것에 사용된다. (ex) 온도와 아이스크림 판매량 간의 원인-결과 분석을 통해 판매량을 예측하는 모델) 분류 (Classification)예측하고자 하는 종속변수가 이름일 때, 보통 사용됨.ex) 공부시간과 합격여부, 키,몸무게와 현역-공익, 메일 발신인과 스팸메일 여부 등 회귀 (Regression)예측하고자 하는 종속변수가 숫자일 때, 보통 사용됨.ex) 공부시간과 시험점수의 상관관계, 역세권과 집 값, 자동차 속도와 안전성, 나이와 키 등 비지도학습 (Unsupervised Learning) 관찰을 통해 새로운 의미나 관계를 밝혀내는 것 군집화 (Clustering)군집화란 비슷한 행을 찾아서 그룹을 만드는 것ex) 좌표평면내의 비슷한 위치의 좌표값들을 여러 단위의 군집(Cluster) 단위로 나누어 그룹핑하는 것 연관 규칙 학습(Association rule learning)서로 관련이 있는 특성을 그룹화 해주는 것ex) 쇼핑몰 내의 상품추천, 영화추천, 드라마 추천 등 관측치를 그룹핑 해주는것 -&gt; 군집화특성을 그룹핑 해주는 것 -&gt; 연관 규칙 학습 강화학습 (Reinforcement Learning) 더 좋은 보상을 받기 위해서 수련하는 것 현재의 상태를 관찰 -&gt; 관찰에 따라 행동 -&gt; 보상을 더 받을 수 있도록 Agent가 학습하는 일련의 과정을 반복하는 것. 머신러닝 지도 다음과 같은 판단 절차로 내게 필요한 머신러닝의 기법이 무엇인지 판단 할 수 있다. 출처) 생활코딩https://opentutorials.org/course/4548/28891 포스트 내의 삽화와 자료들은 생활코딩의 저작권 정책에 따라 작성되었습니다.","link":"/2021/01/05/machinelearning-python1/"},{"title":"머신러닝야학-Tensorflow (python) 핵심요약-1","text":"Deel Learning을 Tensorflow로 구현해보자Tensorflow로 주로 사용하는 Deep Learning Algorithm은지도 학습(회귀, 분류)을 위한 5가지가 주로 쓰인다. Decision Tree Random Forest KNN SVM Neural Network 이런 알고리즘을 구현하기 위한 라이브러리들도 여러가지가 있는데,TensorFlow, PyTorch, Caffe2, theano 등이 있다. 머신러닝의 프로세스 과거의 데이터를 준비한다. 데이터로 모델을 학습(Fit)한다. 모델의 구조를 만든다. 모델을 이용한다. Neural Net (인공 신경망)사람의 두뇌를 동작하는 방법을 모방해서 기계가 학습할 수 있도록 고안된 Algorithm. Pandas LibraryPython에서 대표적으로 표를 다루는 도구인 pandas 라이브러리를 통해 실습을 진행한다.pandas의 간단한 사용법을 통해 표를 불러오고, Shape를 확인하고, 원하는 칼럼을 선택하고, 칼럼의 대표 머릿값을 출력하는 등의 기능을 수행할 수 있다. 12345파일 읽어오기: read_csv('/경로/파일명.csv')모양 확인하기: 데이터.shape칼럼 선택하기: 데이터[['칼럼명1', '칼럼명2', '칼럼명3']]칼럼 이름 출력하기: 데이터.columns맨 위 5개 관측치 출력하기: 데이터.head() 모델을 학습시켜 보자.생활코딩에서 제공하는 예제 코드는 다음과 같다.각 주석 밑에 수업에서 제공하는 내용들을 첨가해서 설명을 각주로 달겠다. 머신러닝의 프로세스의 단계를 지켜 코드를 짠다.tensorflow의 오픈소스 신경만 라이브러리 중 하나인 keras를 사용한다.Keras는 유저가 손쉽게 딥 러닝을 구현할 수 있도록 도와주는 상위 레벨의 인터페이스 혹은 API이다. 1234567891011121314151617181920212223242526272829############################ 기본 라이브러리를 불러온다.import tensorflow as tfimport pandas as pd############################ 데이터를 전처리한다.파일경로 = 'https://raw.githubusercontent.com/blackdew/tensorflow1/master/csv/lemonade.csv'레모네이드 = pd.read_csv(파일경로)레모네이드.head()# 데이터의 상위 5가지 관측치를 통해 잘 불러와지는지 확인한다# 종속변수, 독립변수독립 = 레모네이드[['온도']]종속 = 레모네이드[['판매량']]print(독립.shape, 종속.shape)# 원인과 결과를 입력한다.############################ 모델을 만듭니다.X = tf.keras.layers.Input(shape=[1])Y = tf.keras.layers.Dense(1)(X)model = tf.keras.models.Model(X, Y)model.compile(loss='mse')# Tensorflow의 Keras 라이브러리의 Layer에 독립변수, 종속변수를 입력하는데 각각의 shape의 크기에 유의하여 입려개준다. Loss란? Loss란 학습된 모델의 예측값과 실제 결과 사이의 차이점을 손쉽게 알아보기 위한 값으로, Loss = (예측 - 결과)^2 의 평균 그래서 Loss 값이 0에 가까워 질 때, 학습이 잘 되고 있다는 증거이고, 학습을 반복해서 시킴으로써 Loss값을 줄일 수 있다. 123456789101112############################ 모델을 학습시킵니다. model.fit(독립, 종속, epochs=10)model.fit(독립, 종속, epochs=1000, verbose=0)#학습을 시킬때 epochs 값을 조절해가며 학습의 횟수를 설정할 수 있다. verbose = 0을 입력하지 않으면 epoch를 한 번 할때마다 출력값을 반환하지만, verbose=0을 입력해두면 최종 결과값 만을 출력하므로 학습 횟수가 많을 땐, verbose=0 값을 걸어 둔다.############################ 모델을 이용합니다. print(model.predict(독립))print(model.predict([[15]])) 결과 본 실습의 경우엔 독립변수가 하나, 종속변수가 하나이기 때문에 굉장히 단순한 모델이라, 예측값이 실제값과 꽤 많이 비슷한 모델을 학습하는 것을 알 수 있었다. 출처 생활코딩 Deep Learning Tensorflow (python) 강의 https://opentutorials.org/course/4570 생활코딩의 딥러닝 교육컨텐츠는 CCL 라이선스 BY를 따르고 있습니다.","link":"/2021/01/05/machinelearning-python2/"},{"title":"머신러닝야학-Tensorflow (python) 핵심요약-2","text":"독립변수와 종속변수가 여럿인 예제 (보스턴 집값 예측)중앙값 (Median Value)란?해당 지역 주택 값 중에 가장 가운데에 있는 값 (Range List 중 중앙 인덱스 값) 일반적으론 평균값이 집단을 대표하는 숫자로 많이 사용되지만, 평균값의 표준편차가 너무 커서, 평균의 대표성을 무너뜨리는 이상치(Outlier)가 평균을 왜곡시킬때, 중앙값을 많이 사용함. 보스턴 집값 모델 딥러닝 프로세스 보스턴 집값 예측 모델은 하나의 종속변수를 에측하기 위해 13개의 독립변수를 사용한다. 이런식으로 여러 독립변수가 목표한 종속변수에 미치는 영향을 분석하는 모형을 퍼셉트론이라고 부르고,각각의 변수(뉴런)가 종속변수에 미치는 영향력의 비율을 가중치라고 부른다. 각각의 뉴런으로 입력된 모든 값을 다 더한 다음(가중합)에 이 값에 더 해주는 상수를 편향이라고 한다. 즉, 하나의 뉴런에서 활성화 함수를 거쳐 최종적으로 편향을 더해야 예측값이 출력된다고 볼 수 있다. 퍼셉트론, 가중치, 편향 예제 코드는 레모네이드 예제와 거의 비슷하므로 생략한다. 추가로, get_weight 메소드를 통해머신러닝이 학습한 가중치와 편향값을 알아볼 수 있다. 생활코딩에선 이러한 딥러닝이 이루어지는 과정을 직접 실행해 보는 워크북을 제공한다. 가중치를 미분해가며 근사값을 대입해 가는 방식으로 딥러닝이 이루어지는데,Learning Rate는 따로 정해진 값이 아니라, 학습을 반복하면서 적절한 값을 컴퓨터가 선택하게 된다. 출처 생활코딩 Deep Learning Tensorflow (python) 강의 https://opentutorials.org/course/4570 생활코딩의 딥러닝 교육컨텐츠는 CCL 라이선스 BY를 따르고 있습니다.","link":"/2021/01/06/machinelearning-python3/"},{"title":"머신러닝야학-Tensorflow (python) 핵심요약-3","text":"아이리스 품종 분류 모델 예제다음 예제인 아이리스 품종 분류 모델은 여러 독립변수가 하나의 종속변수(품종)을 예측하는 모델인데, 예측해야 하는 종속변수가 양적변수가 아닌 범주형 데이터라는 차이점이 있다. 데이터 전처리 (범주 데이터 카테고리화)범주화를 위해선 각각의 종속변수를 종류별로 분류화하는 것이 필요하다. 각각의 종속변수의 범주가 해당될 때 1, 아닐 때 0 이란 값을 입력해두어 나중에 각각의 범주에 해당될 확률을 계산하기 용이하게 한다. One-Hot Encoding (원 핫 인코딩)12# 원핫인코딩아이리스 = pd.get_dummies(아이리스) 다음과 같이 범주를 분류화 하는 것을 원 핫 인코딩이라고 부르고 Pandas의 get_dummies() 메쏘드로 데이터셋을 변형시킬 수 있다. 시그모이드(Sigmoid) vs 소프트맥스(Softmax) 시그모이드 함수와 소프트맥스 함수는 각각의 용도에 따라 다르게 사용되는 함수인데, 이번 예제는 Multinomial Classification 이라 Softmax 함수로 분석을 진행한다. 강의에서는 Sigmoid 함수는 언급만 하고 넘어가지만 두 함수의 차이점을 정리해 보기로 했다. 함수 시그모이드 소프트맥스 구분 Binary Data(이진데이터) Multinomial classification (다항식 분류) 사용용도 주로 중간 층의 활성화 함수 주로 출력 함수 출력 값 범위 0~1 사이의 확률 값 0~1 사이의 확률값 (단, 결과 총합이 1) 출력 값 의미 기준치 이상,이하에 따라 True or False 여러 클래스에 분류될 확률이 각각 출력됨 시그모이드 함수는 학습을 반복할 수록 0 or 1에 수렴해서 최근들어 단독으로는 많이 사용되지 않으며 활성화 함수로 딥러닝의 한 단계(계단함수)로 자주 사용된다. 공통점: 둘다 공식이 굉장히 복잡하다.😂 문송합니다 퍼셉트론에서 활성화 함수를 계단함수에서 다른 함수로 변경하는 것이 신경망의 Loss를 줄이고 효율을 높이는 핵심!계단함수 -&gt; 1) Sigmoid, 2) ReLU 3) Softmax 예제 코드 출처 생활코딩 Deep Learning Tensorflow (python) 강의 https://opentutorials.org/course/4570 생활코딩의 딥러닝 교육컨텐츠는 CCL 라이선스 BY를 따르고 있습니다. https://cjw0107.tistory.com/7Sigmoid vs Softmax","link":"/2021/01/07/machinelearning-python4/"},{"title":"머신러닝야학-Tensorflow (python) 핵심요약-4","text":"신경망의 완성: 히든레이어 퍼셉트론을 깊게 연결한 딥러닝 신경망을 만드는 방법? 히든레이어!기존의 퍼셉트론을 여러개 연결하여, 층(Layer)을 늘려 연결해준다. 예제에선 총 506개의 관측치를 인풋레이어의 13개 노드에 담고, 이를 히든레이어의 총 5개의 노드로 연결 시켰다.그리고 히든레이어의 5개의 관측치를 softmax로 분류하여 최종 output layer의 1개 값을 예측하는 모델인 것이다.즉, 노드들의 가중치를 분석할 때, 활성화함수를 여러개 사용함으로써, Accuracy를 올리고, Loss를 줄일 수 있다. Swish 활성화 함수를 통해 히든 레이어 Swish ? 최근에 발표된 성능이 좋은 활성화함수 중 하나.특징 : ReLU를 대체하기 위해 구글이 고안한 함수. 시그모이드 함수에 X를 곱한 아주 간단한 형태를 보이지만, 깊은 레이어를 학습시킬 때 ReLU보다 더 뛰어난 성능을 보임. 최종 예제 코드123456789X = tf.keras.layers.Input(shape=[4])H = tf.keras.layers.Dense(8, activation=&quot;swish&quot;)(X)H = tf.keras.layers.Dense(8, activation=&quot;swish&quot;)(H)H = tf.keras.layers.Dense(8, activation=&quot;swish&quot;)(H)Y = tf.keras.layers.Dense(3, activation='softmax')(H)# 이런 식으로 Layer를 더욱 층층이 쌓으면 좀 더 똑똑한 모델이 된다.model = tf.keras.models.Model(X, Y)model.compile(loss='categorical_crossentropy', metrics='accuracy') 출처 생활코딩 Deep Learning Tensorflow (python) 강의 https://opentutorials.org/course/4570 생활코딩의 딥러닝 교육컨텐츠는 CCL 라이선스 BY를 따르고 있습니다.","link":"/2021/01/10/machinelearning-python5/"},{"title":"머신러닝야학-Tensorflow (python) 핵심요약-5","text":"딥러닝 데이터의 전처리 과정데이터 타입의 변경 원핫 인코딩, 즉 카테고리의 범주화가 필요한 데이터인데, 품종 이라는 변수가 int 값으로 되어 있어서 원핫 인코딩이 되지 않는 상태? int(정수형)타입을 category(범주형)타입으로 바꿔주자. 데이터 NA 값의 처리 학습이 더 잘되게 만드는 TipBatchNormalization layer 활용학습을 다 마치고 나서도 Loss가 원하는 만큼 떨어지지 않는다면, BatchNormalization Layer를 각 Layer의 층마다 배치시키면, 같은 모델임에도 불구하고 학습 효과를 더욱 증대시킬 수 있다. 개선 전) 1234567X = tf.keras.layers.Input(shape=[13])H = tf.keras.layers.Dense(8, activation='swish')(X)H = tf.keras.layers.Dense(8, activation='swish')(H)H = tf.keras.layers.Dense(8, activation='swish')(H)Y = tf.keras.layers.Dense(1)(H)model = tf.keras.models.Model(X, Y)model.compile(loss='mse') 개선 후) 1234567891011121314151617X = tf.keras.layers.Input(shape=[13]) H = tf.keras.layers.Dense(8)(X)H = tf.keras.layers.BatchNormalization()(H)H = tf.keras.layers.Activation('swish')(H) H = tf.keras.layers.Dense(8)(H)H = tf.keras.layers.BatchNormalization()(H)H = tf.keras.layers.Activation('swish')(H) H = tf.keras.layers.Dense(8)(H)H = tf.keras.layers.BatchNormalization()(H)H = tf.keras.layers.Activation('swish')(H) Y = tf.keras.layers.Dense(1)(H)model = tf.keras.models.Model(X, Y)model.compile(loss='mse') 실제로 모델을 BatchNormalization 으로 개선한 결과,개선 전에는 1000번을 학습해도 20이하로 떨어지지 않았지만,개선 후에는 200번 정도를 학습했을 때, 개선 전의 Loss 값과 비슷하게 나왔고, 1000번을 학습했을 땐 훨씬 낮은 정도의 Loss 값을 보였다. 후기일주일 간, 머신러닝의 기본교양강의부터 python으로 딥러닝을 구현하는 실습예제까지 진행해 보았다. 처음 머신러닝과 딥러닝에 대해 잘 모를 땐, 대학시절 들었던 빅데이터 수업 때문에, 여러 분석 모델들의 수학적 난해함에 지레 겁을 먹고, 어렵단 인식이 강했는데,머신러닝도 결국, 하면 된다 라는 것을 깨닫게 되었다. 어려워 보이는 알고리즘도, 모델링도,코딩 라이브러리도 결국 사용법을 배우고, 과정을 이해하고, 활용하는 과정의 연속 일 뿐인 것이다. 난해함은 잠시 접어두고, 완전히 1000% 이해하지 못하고 이용해보더라도 어느 누구도 뭐라하지 않는다. 즉, 시그모이드 모형과 소프트맥스 수학식을 수학적으로 유도하지 못한다고 해서, 딥러닝을 못하는게 아닌 것이다. 그냥 하면 된다!! 왜냐? 우리에겐 구글님이 있으니깐..ㅎ 앞으로도 새로운 문제를 직면할 때마다, 딥러닝으로 이 문제를 해결 할 수 있겠다. 라는 자신감을 심어주는 강의를 들은 것 같아, 내 자신도 굉장히 뿌듯함을 느꼈고, 이런 좋은 강의와 기회를 마련해준 머신러닝야학 강사 및 스탭 분들에게도 감사를 드린다. 출처 생활코딩 Deep Learning Tensorflow (python) 강의 https://opentutorials.org/course/4570 생활코딩의 딥러닝 교육컨텐츠는 CCL 라이선스 BY를 따르고 있습니다.","link":"/2021/01/11/machinelearning-python6/"},{"title":"Markdown 문서를 보기 좋게 작성해보자","text":"VScode에서 Markdown Preview Extension을 이용하면 보기 편하다 마크다운이란?Markdown은 2004년 미국의 개발자 John Gruber와 Aaron Swartz가 개발한 경량형 마크업 언어로, 쉽고 빠른 포맷을 지녀 많은 개발자들에 의해 널리 사랑받고 있습니다. Github 의 README, 블로그의 글, 개발 TIL 작성 등, 여러 분야에서 활용 되고 있습니다. 마크다운의 문법 요소들을 정리해두어, 앞으로 작성할 블로그의 포스팅에 어느정도의 Guideline을 만들어 두려고 합니다. Heading기본적인 heading은 #의 갯수로 헤더의 크기를 정할 수 있습니다. 123456# Heading 1## Heading 2### Heading 3#### Heading 4##### Heading 5###### Heading 6 Heading 1Heading 2Heading 3Heading 4Heading 5Heading 6 밑줄1___ 표시는 밑줄을 표시합니다. 인용 표시 (Quote)1&gt; 표시는 뒷 배경과 Text를 강조할 수 있습니다. 뭔가 명언 같은 걸 넣어야 할 것 같다. Bold &amp; Italic &amp; Strikethrough1234**Bold** *Italic* ~~Strikethrough~~ **로 감싸면 굵은 글씨로 표시가 됩니다.*로 감싸면 이태릭 체로 표시가 됩니다.~~로 감싸면 삭선처리가 됩니다. BoldItalicStrikethrough Bullet List &amp; Numbered List12345To do List:- Something new- Something good1. Something important2. Something interesting To do List: Something new Something good Something important Something interesting HTML Link &amp; Image 넣기123Click Here → [MyGitHubPage](https://github.com/jesuisjavert)![Image](https://picsum.photos/seed/picsum/200/300) Click Here → MyGitHubPage In-line 코드 강조1`print('hello Javert')` print('hello Javert') Table 삽입123456과일 | 특징 | 특이사항--|:--:|--:`Apple` | 사과는 맛있어 | `맛있으면 빨개``Lemon` | 레몬은 셔 | 여기는 우측 정렬`Lime` | 라임은 상큼해 |`Grape` | 포도는 달아 | 과일 특징 특이사항 Apple 사과는 맛있어 맛있으면 빨개 Lemon 레몬은 셔 여기는 우측 정렬 Lime 라임은 상큼해 Grape 포도는 달아","link":"/2020/12/12/markdown-grammar/"},{"title":"AWS Global Infra 및 주요 개념 소개","text":"AWS Global Infrastructure AWS는 전 세계적으로 분포한 데이터센터를 통해, AWS를 서비스 하고 있다.현재 AWS는 24개의 Region(리전)과 77개의 가용영역(Availability Zone),220개 이상의 연결구간 POP(Point of Presence)를 운영하고 있다. 참조) AWS Global Infra Official info sitehttps://aws.amazon.com/ko/about-aws/global-infrastructure/ 글로벌 네트워크들은 해저 광케이블을 통해 연결되어 있고, 물론 반갑게도 서울을 찍어보면 도쿄와 홍콩으로 연결된 해저 광케이블을 볼 수 있다.물리적으로 케이블의 거리가 멀면 ping은 비례하겠거니.. 생각이 든다. Latency, 전파 지연Latency : 패킷을 전송하는 곳에서부터 전달받는 곳까지 이동하는 데 걸리는 시간! 전파 지연 : 송신측 -&gt; 수신측으로 이동하는데 필요한 시간. 이동거리 대비 신호가 이동하는 속도로 측정. 대부분의 사람들은 300밀리 초 이상 시에 ‘느리다’라고 인식을 한다고 한다.(한국 사람들은 .. 100이지 않을까? ㅎㅎ) 대부분의 레이턴시는 다른 네트워크 레이턴시를 제외하고 케이블에서의 지연만 얘기할 때 보통 쓴다. 가용 영역 Availability Zone가용 영역은 각 리전 내에 있는 격리 영역(Isolated locations) 이라고 정의할 수 있는데, 쉽게 말하자면, 각 지역내에 최종 사용자에게 가까운 컴퓨팅, 스토리지 등의 리소스를 배치하는 기능을 제공하기 위해 만든 것이라고 볼 수 있다. AWS 리전의 배치 기준은 재해극복과 네트워크 지연을 방지하기 위해서이다.그 기준은,각 국가별 네트워크 지연시간: 10ms &lt; AZ 배치 기준 &lt; 100ms 라고 한다! 우리는 한 리전 내에서도, 서비스가 안정적으로 서비스 되기 위해선, 하나의 가용 영역(AZ)에서 장애가 날 수도 있기 때문에 멀티 가용영역(AZ)으로 구축해야 한다. ex) Region의 Northeast-1은 Tokyo, 2가 Seoul, 서울의 AZ는 Northeast-2a,2b,2c,2d 그 중 2a, 2c가 모든 종류의 CPU 타입을 제공해서, 가장 많이 쓰인다(ex) 2b는 free tier linux cpu 타입을 제공안함..) 엣지 POP (Point of Presence)엣지 POP(ex CDN) 라고 하는 것은인터넷 사용자가 인터넷 서비스 제공자(ISP: Internet Service Provider)를 만나는 곳을 의미. 일반적으로 콘텐츠를 고속으로 내보내거나 가져오는 CDN(Content Delivery Network) 서비스(ex)AWS Cloudfront)를 제공하기 위해 만든다. IaaS &amp; PaaS &amp; Serverless &amp; SaaS AWS Cloud 서비스의 종류는 크게 4가지로 구분할 수 있는데,클라우드 사업자와 사용자가 관리 하는 영역에 따라 구분한다. IaaS : EC2 (Computing), VPC (Network), EBS(Storage) PaaS : AWS Elastic Beanstalk Serverless : AWS Lambda, API Gateway (API Proxy) SaaS : Web Mail, MSoffice365, Dropbox … AWS 주요 Network 서비스 VPC는 Virtual Private Cloud의 약자로 AWS 클라우드 내 논리적으로 독립된 섹션을 제공하여,사용자가 정의한 가상 네트워크상에서 다양한 AWS 리소스를 실행할 수 있게 지원합니다.한마디로 독립된 가상의 클라우드 네트워크라 볼 수 있습니다. ELB는 Elastic Load Balancing의 약자로 AWS에서 제공하는 로드 밸런싱(부하 분산) 기술입니다. Route 53은 AWS에서 제공하는 관리형 DNS 서비스입니다. AWS 전송 게이트웨이는 VPC나 온프레미스등의 네트워크를 단일 지점으로 연결할 수 있는 라우팅 서비스입니다. AWS의 네트워크 기반의 보안 기능으로 보안 그룹, 네트워크 ACL, 웹 방화벽이 있습니다 출처) Cloudnet@ 팀의 ANOS (AWS Network Online Study 2기 학습 내용) https://cloudneta.github.io/","link":"/2021/01/18/aws-study2/"},{"title":"AWS EC2 인스턴스 생성 &amp; 콘솔 연결 &amp; Public IP 접근해보기","text":"EC2 인스턴스를 생성해 보자!AWS의 EC2란, 크기 조정이 가능한 컴퓨팅 용량을 클라우드에서 제공하는 웹 서비스이다. 쉽게 말하면, 클라우드 상에 내 PC를 한 대 얻는 것과 같은거라고 생각하면 된다. EC2를 생성하기 위해선 AWS에 회원가입을 하고, AWS Management Console에 로그인을 한다.그 뒤, EC2 서비스를 클릭하고, 위 스크린샷의 주황색 버튼, 인스턴스 시작 버튼을 누르면 EC2를 만들 수 있다. 기본적으로, EC2를 만드는 것은 크게 어렵지 않다. 지금은 실습 단계이므로,free tier에서 사용할 수 있는 Amazon Machine Image(AMI)와 인스턴스 유형을 선택해 준다. AWS Free tier Services 그리고 원래 가장 중요한 과정은 인스턴스 세부 정보 구성인데,지금은 일단 .. 서브넷만 NORTHEAST-2A(서울 리전)으로 설정하고 넘어가자 ㅎ퍼블릭 ip도 자동 할당으로 해주고 (지금 퍼블릭 ip로 들어가서 확인할 예정이라) 스토리지 추가도 Default, 태그로는 키에 Name, 값에 이름으로 넣고 싶은 값을 넣고 다음! 보안 그룹 구성이 나오는데, 어떤 방식으로 접근하는 트래픽을 허용할 것인지 선택할 수 있다. AWS 보안설정 우리는 보통 SSH 키 페어 생성을 통해, SSH 인증 방식(키 파일)을 사용해서 AWS Console에 접근 할 것이기 때문에,SSH 포트를 열어두도록 하고, 소스를 위치 무관 혹은 내 ip에서만 접근 할 거면, 내 ip로 설정한다. 그리고 HTTP 프로토콜에 대한 접근도 실습해볼 것이라, HTTP 유형의 접근도 열어 준다. EC2에 접속하는 하기 위해선, 방법이 여러가지가 있는데 오늘은간단하게 기존에 내가 쓰던 터미널 창으로 접속해 보겠다. EC2 인스턴스에 연결하기가장 쉬운 방법은 EC2 인스턴스에서 연결을 눌러 브라우저에서 바로 연결하는 게 가장 편하고,전문적으로 SSH 연결 프로그램인 (Putty, MobaXterm)등을 사용해도 되고,pem키가 있는 디렉토리에서 Bash 창을 연 뒤, 12chmod 400 XXX.pemssh -i &quot;XXX.pem&quot; ec2-user@---.---.---.--- (public IP) 를 입력하여 콘솔에 연결 할 수도 있다. 그 뒤, 간단하게 html 문서를 생성하고 http 접속 연결을 테스트 해본다 123456789101112131415 # 실습의 편리를 위해서 root 계정으로 전환합니다.[ec2-user@ip-172-31-46-221 ~]$ sudo su -# Web 서비스를 설치합니다.[root@ip-172-31-46-221 ~]# yum install httpd -y# Web 서비스를 실행합니다.[root@ip-172-31-46-221 ~]# systemctl start httpd# 웹 페이지를 구성합니다.[root@ip-172-31-46-221 ~]# echo &quot;&lt;h1&gt;Test Web Server&lt;/h1&gt;&quot; &gt; /var/www/html/index.html# curl 명령어로 웹 접속을 확인합니다. [root@ip-172-31-46-221 ~]# curl localhost&lt;h1&gt;Test Web Server&lt;/h1&gt; Test Page 출력 출처) Cloudnet@ 팀의 ANOS (AWS Network Online Study 2기 학습 내용) https://cloudneta.github.io/","link":"/2021/01/18/aws-study3/"},{"title":"AWS EC2 인스턴스 생성 &amp; 콘솔 연결 &amp; Public IP 접근해보기","text":"AWS Cloudformation 이란? AWS 의 Cloudformation 기술 공식 설명은,AWS CloudFormation은 환경의 모든 인프라 리소스를 안전하고 반복 가능한 방식으로 설명하고 프로비저닝할 수 있도록 공통 언어를 제공합니다.라고 하는데.. 즉, 쉽게 말하자면, 자동화된 인프라 구축을 도와주는 서비스라고 하겠다. AWS Cloudformation의 가장 큰 장점은AWS Infra 구성을 ‘자동화’해서, 한 번에 원하는 세팅으로 도와줄 수 있도록 해준다는 것이다. 요즘 DevOps 엔지니어들의 가장 큰 화두로 떠오른 것이 바로 이 ‘자동화’ 인데,Infrastructure as a Code (IaaC)가 미래 클라우드 기술의 핵심이 될 것이라고 말하는 사람도 있다. IaaC의 스크립트 자동화 도구로 Terraform을 가장 먼저 떠올리는 사람들이 많은데,Terraform 은 Azure, Google Cloud 등도 지원하니,Cloudformation은 AWS구성을 위한 AWS 자체의 솔루션이라고 생각하면 편할 것 같다. 바로 실습을 들어가보자. Cloudformation 작동 순서 Cloudformation 은 다음과 같은 순서로 Infra를 생성한다! AWS console의 Cloudformation 사이트에 들어와, 스택 생성을 클릭! 준비된 템플릿을 기반으로 스택을 생성하는데, 템플릿 파일은 JSON 또는 YAML 파일로 업로드를 할 수 있다. 사실 JSON은 Rest API 통신에 매일 쓰니까 익숙했지만,YAML 파일은 어디서 봤지..하고 아리까리 했는데 Swagger API 설명 문서가 YAML파일이었다.나중에 찾아보니, XML이나 JSON이나 YAML 파일이나 Data를 표현하는 형식이고문법적인 차이만 있을 뿐, 내용이 오브젝트 형태로 들어간다는 것은 비슷했다. 파일을 스윽 보고, &lt;&gt; 꺽쇠가 많으면 XML, {} 중괄호가 많으면 JSON, 들여쓰기(Indentation)이 되어있고 뭐가 휑~하다 싶으면 YAML 파일이라고 구분하면 된다. 123456789101112131415161718192021222324252627282930313233343536373839Parameters: KeyName: Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. Linked to AWS Parameter Type: AWS::EC2::KeyPair::KeyName ConstraintDescription: must be the name of an existing EC2 KeyPair.Resources: MyInstance: Type: AWS::EC2::Instance Properties: ImageId: ami-0094965d55b3bb1ff InstanceType: t2.micro KeyName: !Ref KeyName Tags: - Key: Name Value: WebServer SecurityGroups: - !Ref MySG UserData: Fn::Base64: !Sub | #!/bin/bash yum install httpd -y systemctl start httpd echo &quot;&lt;h1&gt;Test Web Server&lt;/h1&gt;&quot; &gt; /var/www/html/index.html MySG: Type: AWS::EC2::SecurityGroup Properties: GroupDescription: Enable HTTP access via port 80 and SSH access via port 22 SecurityGroupIngress: - IpProtocol: tcp FromPort: 80 ToPort: 80 CidrIp: 0.0.0.0/0 - IpProtocol: tcp FromPort: 22 ToPort: 22 CidrIp: 0.0.0.0/0 실습용 YAML 파일은 위과 같이 생겼는데,스택에 이름과 파라미터(Key Name)을 입력해주면 생성하면 된다.YAML파일을 대충 읽어보니, 파라미터에는 생성하게 될 EC2 Instance 접속방법(키 페어 방식)이 적혀있고, Resource 안에 생성할 인스턴스의 타입, 이름, 스크립트.마지막으로, MySG 안에 HTTP와 SSH 접근으로 각각의 포트를 열어주는 내용을 입력하는 것 같다. YAML 파일 작성법은 나중에 따로 한번 더 다뤄야 할 것 같다. 실습이 끝난 이후에는, 스택을 삭제하는 걸 잊지 말자!스택을 삭제 하면 자동으로 안에 있는 리소스까지 같이 삭제됩니다. 출처) Cloudnet@ 팀의 ANOS (AWS Network Online Study 2기 학습 내용) https://cloudneta.github.io/","link":"/2021/01/20/aws-study4/"},{"title":"AWS VPC 프라이빗&#x2F;퍼블릭 서브넷 &amp; 인터넷 게이트웨이 &amp; 라우팅 테이블","text":"VPC를 설정 할 땐, 퍼블릭/프라이빗 영역설정이 중요하다 VPC (Virtual Private Cloud)란?VPC는 Virtual Private Cloud의 약자로 AWS 클라우드 내 논리적으로 독립된 섹션을 제공하여,사용자가 정의한 가상 네트워크상에서 다양한 AWs 리소스를 실행할 수 있게 지원한다.한 마디로 독립된 가상의 클라우드 네트워크 라 볼 수 있다. 사용자는 VPC 내에 IP 대역, 인터페이스, 서브넷, 라우팅 테이블, 인터넷 게이트웨이, 보안 그룹,네트워크 ACL 등을 생성하고 제어할 수 있다. 이쯤에서 네트워크 전송의 기본 개념에 대해 한 번 더 짚고 넘어가도록 하자. OSI 7계층 네트워크 동작 과정을 7개의 계층으로 나누어 네트워크 통신 흐름을 한눈에 알아 볼 수 있다.계층별로 하위 계층의 기능을 이용하고 상위 계층으로 기능을 제공하는 상하 관계! Physical 물리 계층 - 하드웨어 전송 기술 Data Link 계층 - 정보의 오류와 흐름을 관리하여 데이터의 전달 Network 계층 - 데이터를 목적지까지 빠르고 안전하게 전달(라우팅) / 최적의 노드경로 탐색 Transport 전송 계층 - 데이터의 유효성과 효율성 Session 계층 - 종단의 사용자 간의 응용 프로세스 통신 관리 Presentation 계층 - 데이터의 형식상 차이를 송/수신자간 이해할 수 있는 형태로 데이터를 표현 Application 계층 - 응용 프로세스와 직접 연계하여 실제 응용프로그램을 사용 퍼블릭 IP 와 프라이시 IP기본적으로 네트워크의 통신 용도에 따라 퍼블릭 / 프라이빗으로 구분 짓는다. 퍼블릭 - 실제 인터넷 구간으로 통신하는 공공 네트워크프라이빗 - 인터넷 구간이 아닌 내부적으로 통신하는 사설 네트워크 퍼블릭 IP (공인 IP) 인터넷 구간의 통신 대상을 식별하기 위해 ISP에서 제공하는 IP 주소. (전세계 유일) 프라이빗 IP (사설 IP) 독립된 네트워크에서 사용하는 내부 IP 주소. 3가지 대역 (Class)으로 고정 Class A : 10.0.0.0 ~ 10.255.255.255 Class B : 172.16.0.0 ~ 172.31.255.255 Class C : 192.168.0.0 ~ 192.168.255.255 서브넷과 서브넷 마스크 서브넷은 VPC내에 부분적인 네트워크. 서브넷 마스크는 IP주소에 네트워크 ID와 호스트 ID를 구분하는 기준값! 포트 번호TCP 와 UDP의 특성에 따라 제공되는 응용 프로그램 서비스가 있는데, 이때 포트 번호를 통해 구분한다.TCP의 포트 번호 80은 HTTP 서비스로 예약되며, UDP의 포트 번호 53은 DNS 서비스로 예약된다.보통 사용자들과의 접점이 되는 포트를 80번을 열어두는 이유가 바로 이 것 ㅎㅎ 라우팅 &amp; 라우터 &amp; 라우팅 테이블라우팅이란 네트워크 통신을 수행할 때 거쳐 가는 경로를 잡아주는 OSI 7계층에서도3계층인 네트워크 계층에서의 핵심적인 기능! 네트워크는 여러 개의 서브넷으로 이루어져 있어, 목적지 IP로 향할 때여러 노드를 거쳐서 통신이 된다. 복잡하게 연결된 네트워크 망에서 최적이 경로를 잡아 통신하는 것이 바로 라우팅!라우팅을 수행하는 장비 ? 라우터 !라우터가 경로를 파악하고 원하는 목적지 대상으로 데이터를 전달하는 표? 라우팅 테이블! AWS 의 VPC 서브넷 IP 대역 할당 정책12345678예를 들어 VPC A(10.0.0.0/16) 내부의 서브넷에 할당할 IP대역이 10.0.0.0/24이라면 10.0.0.0~10.0.0.255 중에서첫번째 주소: 10.0.0.0 - 네트워크 주소두번째 주소: 10.0.0.1 - AWS VPC 가상 라우터 주소세번째 주소: 10.0.0.2 - AWS DNS 서버 주소 네번째 주소: 10.0.0.3 - 향후 새로운 기능에 활용할 주소마지막 주소: 10.0.0.255 - 네트워크 브로드캐스트 주소VPC 내 여러 서브넷이 존재할 경우 첫번째 서브넷의 세번째 주소를 DNS 서버 주소로 사용합니다. 나머지 서브넷의 세번째 주소는 AWS에서 예약되어 있습니다. 인터넷 게이트웨이 (Internet Gateway)인터넷 게이트웨이는 VPC와 인터넷 간의 논리적인 연결 !즉, VPC에서 인터넷 구간으로 나가는 관문 (VPC당 1개 생성) 인터넷 게이트웨이는 퍼블릭 IP를 사용하는 퍼블릭 서브넷 내의 자원퍼블릭 서브넷은 라우팅 테이블에 외부 인터넷 구간으로 나가는 타깃지정 필수! NAT 게이트웨이 (Network Address Translation Gateway)NAT란 Network ADdress Translation의 약자로 즉, IP주소를 변환해 주는 기술!인터넷 게이트웨이는 공공 네트워크 구간으로 퍼블릭 서브넷의 IP 통신을 도와주기 때문에,프라이빗 IP는 인터넷 구간으로 넘어올 수가 없는데, 이때NAT게이트웨이가 프라이빗 IP를 퍼블릭 IP로 변환하여 통신을 도와준다!쉽게말하면, 인터넷 게이트웨이는 앞마당에 있는 대문! NAT 게이트웨이는 앞마당 옆 쪽문! 보안 그룹과 네트워크 ACL(Access Control List)VPC는 인스턴스 레벨과 서브넷 레벨 상에서 대상을 필터링 할 수 있는 보안 기술을 사용 가능.인스턴스 레벨 - 보안 그룹 (Security Group)서브넷 레벨 - 네트워크 ACL (Access Control List) 출처) Cloudnet@ 팀의 ANOS (AWS Network Online Study 2기 학습 내용) https://cloudneta.github.io/","link":"/2021/01/26/aws-study5/"},{"title":"AWS VPC 서브넷 구성과 네트워크 통신 과정","text":"TCP/IP 전송 방식은 기차놀이처럼 줄줄이 연결되어있다. 우리는 기차역을 만들 것이다. VPC 퍼블릭 / 프라이빗 서브넷 설정 실습VPC 생성VPC의 생성은 AWS의 VPC 메뉴에서 할 수 있다.VPC 생성 버튼을 클릭하면, 다음과 같은 화면이 나온다. VPC가 설정이 되면, 자동으로 라우팅 테이블도 생성이 된다. 라우터 테이블 메뉴에 들어가서 확인할 수 있다. 라우팅 테이블 생성뒤쪽의 VPC ID를 확인해보면, 원래 있던 계정의 Default VPC인지, 방금 생성한 VPC인지 확인 할 수 있다.기본 라우팅 테이블을 보면, 10.0.0.0/16 이라고 하는 로컬 대역의 라우팅 영역이 설정된 걸 볼 수 있다.(주의) 가상 라우팅 테이블은 숨겨져 있어서 볼 수 없음. 우리가 생성한 건 기본 라우팅 테이블) 이제는 VPC내에 서브넷을 생성해 보자. 서브넷 생성서브넷을 생성할 때, 어떤 VPC 내에 생성할 지 선택해주고,서브넷 이름과, 가용영역, CIDR 블록을 입력해준다.(❗ AZ의 a 와 c가 EC2 타입을 full로 지원한다.) 이제 우리가 만든 서브넷과 인터넷을 연결하기 위해선 인터넷 게이트 웨이가 필요하다 인터넷 게이트웨이 생성 간단하게 인터넷 게이트 웨이 역시 생성 할 수 있고, 서브넷과 연결 가능하다. 이제 퍼블릭 서브넷에 외부와 통신하는 라우팅 테이블 정보가 없으니,라우팅 테이블과 서브넷을 연결해 주자. 라우팅 테이블과 서브넷 연결라우팅 테이블의 서브넷 연결 탭을 보면, 아직 라우팅 테이블과 연결되어있지 않은서브넷의 목록이 보이는데, 이걸 서브넷 연결 편집 버튼을 눌러서브넷과 라우팅 테이블을 연결 시켜 준다. 라우팅 테이블의 의미는이 대역과 통신하려면 어느 대상으로 보낼 것인가? 의 의미이다즉 왼쪽의 대상은 목적지 대역, 오른쪽의 대상은 도착지 대역 지금 현재 세팅은 10.0.0.0/16은 local 대역으로 보내고,10.0.0.0/16 로 가는 걸 제외한 나머지 모든 통신은아까 만들었던 Internet Gateway로 보낸다 라는 의미! 서브넷 내에 EC2 생성하기인터넷 연결을 위해 퍼블릭 IP를 할당받고 생성을 해주면, EC2가 서브넷 내에 생성이 된다. 오늘 만든 시스템 아키텍처의 구성지금까지 만든 구성 환경 내에서 인터넷 연결이 되는 과정을도식으로 정리해 보면 다음과 같게 된다. EC2 에 접근해서 여러 정보를 찍어보자1234$route -n$ip neigh show$arp -e$curl ipinfo.io 출처) Cloudnet@ 팀의 ANOS (AWS Network Online Study 2기 학습 내용) https://cloudneta.github.io/","link":"/2021/01/27/aws-study6/"},{"title":"AWS Private Subnet내의 EC2 접속 &amp; NAT Gateway","text":"나만의 작고 귀여운 프라이빗 서브넷을 만들어보자. 물논 밖으로 나가려면 대문을 거쳐가야 한다. 프라이빗 서브넷 생성하기 VPC내에 Private 서브넷을 만들면 별도로 라우팅 테이블이 생성된다.하지만 이 라우팅 테이블은 외부와 연결되지 않기 때문에인터넷 연결을 하려면, 별도의 NAT 게이트 웨이가 필요하다.(프라이빗 서브넷 내의 EC2는 퍼블릭 IP 할당도 되지 않는다!) Private 서브넷의 라우팅 테이블을 NAT 게이트 웨이와 연결 시켜 보자. 퍼블릭과 서브넷 생성 방법은 다르지만, 프라이빗 과 퍼블릭 구별을 해주기 위해서 (서브넷 마스크 ❗)CIDR 블록을 10.0.1.0/24 로 설정해주는 걸 잊지 말자 NAT 게이트 웨이 생성지금 우리의 목표가 프라이빗 서브넷을 외부 인터넷 망과 연결하는 것이기 때문에,NAT Gateway 를 생성할 때, 왠지 프라이빗 서브넷 내에 만들어야 할 것 같은 기분이 드는데,절대 그렇지 않고 퍼블릭 Subnet 안에 만들어야 한다!! Private -&gt; Routing Table -&gt; NATGateway -&gt; InternetGateway -&gt; Internet 우리가 원하는 인터넷 통신의 경로가 이렇기에,Private 서브넷의 라우팅 테이블 까지가 Private의 영역,NATGateway 부터가 퍼블릭 서브넷의 영역이라고 이해해두면 좋을 것 같다. 그 뒤 NAT Gateway의 탄력적 IP도 할당받아주고, 생성! (Attention) NATGateway는 생성하는데 시간이 좀 걸린다. 허리를 한 번 피고 오자.) 프라이빗 라우팅 테이블 생성 그 뒤 서브넷 연결 편집 버튼을 클릭! 해주면 끝! ㅎㅎ 간단하쥬~? 검증 Private Subnet 내에 EC2 Instance를 생성한다. 생성한 VPC 내의 Private Subnet 으로 해주고,퍼블릭 IP는 어짜피 작동하지 않으니 비활성화로 해준다. 그리고 중요하게 설정해야 하는 것이 있는데, 아래쪽에 이 칸에 사용자 데이터 (EC2를 생성할 때 사용할 명령어)를 다음과 같이 입력해 준다. 12345678#!/bin/bash(echo &quot;qwe123&quot;echo &quot;qwe123&quot;) | passwd --stdin rootsed -i &quot;s/^PasswordAuthentication no/PasswordAuthentication yes/g&quot; /etc/ssh/sshd_configsed -i &quot;s/^#PermitRootLogin yes/PermitRootLogin yes/g&quot; /etc/ssh/sshd_configservice sshd restart 그 이유는, 프라이빗 서브넷내의 EC2 인스턴스는 외부에서의 ssh 접근을 자동으로 차단하기 때문이다.그래서 기본적으로 되어있는 비밀번호 로그인과, 루트 아이디로의 접근을 풀어주고root 아이디의 비밀번호를 기본 세팅값 (qwe123)으로 만들어주는 값을 EC2가 생성될 때 입력해준 것이다. (실제 프라이빗 서브넷은 이렇게 구성을 하면 절대 안됨! 보안에 허술) Private 서브넷 내의 EC2 접근하기Private 서브넷 내의 EC2 인스턴스에 접근 하려면,먼저 Public 서브넷의 EC2 인스턴스에 ssh 키로 접근 후,콘솔 내에서 ssh root@Private IP주소 로 입력하면 비밀번호를 입력하고 접근을 할 수 있게 된다. 짜잔!프라이빗 서브넷 내의 EC2 자원에서 인터넷 연결까지를 해보았다!! 실습이 끝난 후, 자원을 삭제 하는 것도 잊지 말자 ! ㅎㅎ 시간이 곧 돈이니깐 ㅎㅎ(지난달에 4만 5천원 요금 폭탄 맞은 사람 누구? 헤헿 나잖아) 삭제는? 설치의 역순 ㅎ 출처) Cloudnet@ 팀의 ANOS (AWS Network Online Study 2기 학습 내용) https://cloudneta.github.io/","link":"/2021/02/03/aws-study7/"},{"title":"어느날 .. 당신의 cmd 창이 심심하다면.. Figlet &amp; Toilet","text":"Hello .. My name is... SkyNet... (Feat. asciiview) 어느날, 나는 심심하고야 말았다원래 가장 바쁠 때, 가장 딴 짓이 하고 싶은 법.Linux 환경에서 vi로 이것저것 세팅값을 건드리고 있다가,매주 참여하는 AWS 스터디 (ANOS) 에, php 파일을 하나 만들어 기증해 보기로 했다. CUI 환경에서 ip ping test 를 하는 우리 스터디원 분들의 눈을1초라도 조금 더 즐겁게 만들어 보고자, CMD창에 텍스트를 그려주는 툴을 찾아보게 되었고,그 결과 더욱 어마어마한(?) 툴 들을 써보게 됐다.내가 찾은 Linux 상의 그리기 툴은 4가지 인데, 각각의 설치는 간단하다. Linux 환경에서 각각의 패키지를 다운받고, 명령어를 입력해주기만 하면 끝! Figlet 과 Toilet 은 텍스트를 예쁜 글자로 그려주는 패키지,AsciiView 와 Cacaview 는 이미지를 텍스트로 변환해주는 패키지이다. Figlet12sudo apt-get install figletfiglet &quot;원하는 텍스트&quot; Figlet의 기본 글자체는 큼직큼직하면서도 텍스트 공간을 많이 잡아 먹지 않아역시 내가 찾아본 여러 블로거들이 추천해줄만 한 패키지라는 걸 느꼈다.피글렛은 기본 글자체 외에도 다양한 글자체를 제공하는데, 1$ls /usr/share/figlet/ 명령어를 사용하면, 기본적으로 깔려있는 폰트들을 확인 할 수 있고, 1figlet -f 폰트이름 &quot;원하는 텍스트&quot; 를 사용하면 원하는 폰트로 텍스트를 출력할 수 있다. Toilet12sudo apt-get install toilettoilet &quot;원하는 텍스트&quot; Toilet 역시 비슷한 툴이다. 글자크기가 좀 더 큰 것 같다.Figlet의 글자체도 활용이 가능하다고 한다. AsciiView12sudo apt-get install aviewasciiview &quot;원하는 그림&quot; Asciiview 는 기본적으로 텍스트를 꽉 꽉 채워 그림을 표현하기 때문에,디테일이 많은 이미지나 배경이 있는 이미지는 눈에 잘 들어오지 않아서내 증명사진을 넣었더니.. 마치 SF영화 속 AI 인공지능의 얼굴이 나왔다 ㅋㅋㅋㅋ근데.. 나름 마음에 들어 버릴지도? CacaView12sudo apt-get install caca-utilscacaview &quot;원하는 그림&quot; Cacaview 역시 어마어마한 내 얼굴을 출력해주었다 ㅋㅋㅋㅋ컬러가 조금 더 들어가는 것 같은데, 뭔가 더 기괴해서 마음에 쏙 든다(?) 아무튼.. 공부 도중에 딴 짓은 너무 재밌고, 그게 컴퓨터로 하는 거면 더 재밌는 것 같다.오늘도 뿌-듯한 하루였따. Trouble Shootinglinux install error난 AWS 환경에서 EC2 인스턴스를 만들고 시작하느라,Unable to Locate package 오류가 떴었다.처음에 sudo apt-get upgrade 한번 해주는 것도 잊지 말자. asciiview12convert file.jpg file.pgmaview file.pgm asciiview 는 가끔 이미지 파일을 못 읽어 들일 때가 있는데,확장자를 pgm 파일로 convert 해주면 읽어 들일 수 있게 된다.","link":"/2021/02/04/figlet/"},{"title":"VPC Endpoint &amp; NAT Device &amp; MetaData","text":"VPC 끝포인트 설정을 통해 안전한 통신 환경을 제공해보자 VPC 엔드포인트 AWS에서 제공되는 대부분의 서비스에 접근하려면, 퍼블릭 네트워크 통신이 필요하다.하지만 금융 서비스처럼 강력한 보안 요건을 충족하려면, 격리된 프라이빗 서브넷 내에자원이 생성 되어야 하며, 인터넷 통신이 되지않는 프라이빗 서브넷이 외부 퍼블릭네트워크 통신이 가능하도록 만들어 주는 것이 VPC 엔드포인트이다! Endpoint 유형 크게 종류는 3가지로 나뉜다. 게이트웨이 엔드포인트 - AWS S3 , AWS DynamoDB 인터페이스 엔드포인트 - 그 외 나머지 모든 AWS 서비스 인터페이스 엔드포인트 서비스 - Custom VPC와 연결 3가지로 나뉘지만 대부분은 위쪽 2개를 쓴다.게이트웨이 엔드포인트가 S3, DynamoDB 와 연결되고,그 외 대부분의 AWS 서비스는 인터페이스 엔드포인트를 쓴다 라고 알면 된다. Endpoint 특징 보안 측면 강화(프라이빗 연결을 통해 외부 노출 X) 서비스 제약 (연결 대상 서비스는 동일 리전에 속한 서비스만 가능) 권한 제어 (AWS IAM기능을 통한 정책 수립) Endpoint 가격정책가격은 AWS 정책을 따져보고, 분석 해 봤을 때 2가지 결론이 나온다. 게이트웨이 엔드포인트(S3, DynamoDB)는 사용은 무료이며 트래픽 비용이 NAT Gateway 보다 저렴하니 무조건 사용하자 인터페이스 엔드포인트는 일반적으로 NAT Gateway 보다는 비용이 나오지만 안정성과 보안성을 제공하니 사용을 권장 Meta Data ? 메타데이터(Metadata)는 객체에 대한 키와 값 Key &amp; Value에 대한 집합 데이터.EC2 인스턴스의 정보를 갖고 있어, AWS 서비스 사용 시 혹은 EC2 설정 자동화 등에 활용 ex) Django의 setting.py 파일에 config setting 값을 json파일로 따로 저장해두고, aws s3에 대한 access_key_id 와 secret_access_key, Bucket 이름 등을 미리 저장해두고 Build 시킬 때, 읽어 오는 형식 실습 기본 구성은 Cloudformation 으로 미리 준비된 yaml 파일을 생성! (CF로 설정할때 스크립트로 Linux로 변수 선언을 해두어서 뜨는 것임) 123456AZ=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`IP=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4`yum install -y httpdservice httpd startchkconfig httpd onecho &quot;&lt;html&gt;&lt;h1&gt;Hello from Web Server - Region ( &quot;$AZ&quot; ) - Private IP ( &quot;$IP&quot; )&lt;/h1&gt;&lt;/html&gt;&quot; &gt; /var/www/html/index.html VPC -&gt; 엔드포인트 -&gt; 엔드포인트 생성하기 탭에서원하는 서비스 검색 + VPC 와 서브넷 구성을 눌러주면 엔드포인트가 생성되고프라이빗 서브넷에서 퍼블릭 aws 서비스까지 ping을 찍었을 때 응답이 오게 된다!(dig 는 DNS 서버에서 주소만 가져오는 것, ping이 통신) 출처) Cloudnet@ 팀의 ANOS (AWS Network Online Study 2기 학습 내용) https://cloudneta.github.io/","link":"/2021/02/11/aws-study8/"},{"title":"인터넷 게이트 웨이 &amp; NAT Device &amp; NAT Gateway","text":"AWS를 인터넷과 연결시켜보자 AWS의 인터넷 연결 인터넷 게이트 웨이 NAT 디바이스(NAT Gateway, NAT Instance) Proxy Instance Internet Gateway 내부 인스턴스 -&gt; 외부 웹서버로 HTTP 접속 시도 인터넷 게이트 웨이에서 출발지 IP 확인, NAT 정보로 출발지 IP 변경 (1:1 IP NAT 동작) 외부에서 요청 처리 및 응답 트래픽(출발지IP&lt;-&gt;목적지 IP)으로 변환 게이트웨이에서 다시 한번 NAT 정보로 트래픽 변환 내부 인스턴스에 도달 NAT Device 통신 순서는 Internet Gateway 와 비슷하나, 프라이빗 서브넷은 외부 인터넷과 직접 연결이 불가능하여, NAT Device (Nat Instance or NAT Gateway)를 거쳐서 들어 온다. 내부 인스턴스 -&gt; NAT Instance NAT Instance는 IP masquerading 기능을 통해 출발지 IP와 포트를 변환 후 인터넷 게이트 웨이로 전송 인터넷 게이트 웨이는 프라이빗 IP와 탄력적 IP간의 IP 변환(NAT) 수행 외부에서 요청 처리 후 응답 트래픽 (출발지IP &lt;-&gt; 목적지IP) IGW에서 목적지 IP를 NAT 변환하여 VPC 내부로 보냄 NAT Instance는 ‘변환 정보’에 따라 포트 변환하여 프라이빗 서브넷으로 보냄 최종 응답 트래픽 도착 Proxy Instance Proxy 는 일종의 대리자로 클라이언트와 서버 중간 통신을 대신 처리 해주는 역할을 한다.즉, 자체적으로 가진 인터넷 게이트웨이의 역할 및 주소 변환, 트래픽 전송 등의 기능을 OS 계층에 따라 여러번 수행 하지 않고, 미리 세팅된 Proxy 설정으로 한번에 대신 처리 해주는 역할을 한다. EC2 인스턴스 -&gt; HTTP 요청(미리 설정) -&gt; Proxy Instance로 전송 요청한 패킷을 Proxy Instance가 자체적으로 처리(IP 변환 및 질의 응답 값 변환) 새로운 TCP 연결 생성 및 목적지 포트 80 선택 HTTP 헤더에 EC2 인스턴스가 요청한 내용을 포함하여 전달 출처) Cloudnet@ 팀의 ANOS (AWS Network Online Study 2기 학습 내용) https://cloudneta.github.io/","link":"/2021/02/15/aws-study9/"},{"title":"AWS AI&#x2F;ML Innovate Online Conference 참가후기","text":"Machine Learning 뽕에 취한다... AWS AI / ML Innovate Online Conference 참가 후기때는 코로나 시국, Offline Conference들이 Online으로 많이 이루어진다.하지만, 오히려 좋아. Online 이니까, 참가비도, 교통비도 0원!올해 이루어졌던, AWS re:invent 도 참여했었고 (re:invent 는 System Architecture쪽 위주)도키도키한 마음으로 아기다리 고기다리AWS AI (Artificial Intelligence) &amp; ML (Machine Learning) Innovate Online Conference 의 날이 밝았다 ! 기조연설의 캡쳐본으로 어떤 내용이 진행 되었는지 Summary 해보았다. T1 기조연설 Summary 후기 및 대댓글 받은 썰 푼다..정말 다양한 산업 분야에 적용될 수 있고, 개발자 입장에서 써보고 싶은 라이브러리들이 API 형태로 손쉽게 제공되기 때문에, ML의 거대한 이론에 지레 겁 먹고 공부를 포기할 것이 아니라, 실제 적용 되는 서비스들을 만들어보고, 적용시키는 것이 너무 쉽고 용이 할 것 같아 가슴이 두근두근 해지는 Conference였다. 다음 프로젝트는 AWS ML 을 이용한 토이프로젝트로 바로 다아알려그아ㅏㅏㅏ - 그리고!!!! 실시간으로 성덕이 되었따.. 🙈 AWS 한국인 사용자 Slack 채널에 기조연설을 하신윤석찬(AWS 수석 테크 에반젤리스트) 님에게, 오늘 연설 너무 잘봤다고 댓글 달았더니 친절한 대댓글도 받았따!! 이 얼마나 좋은 세상 인가.. 21세기 만세.. ㅋㅋㅋ 추가) 이젠 AWS Korea 유튜브 채널에 기조연설이 업로드 되어, 언제든 볼 수 있다!https://www.youtube.com/watch?v=sfcCf55v5yo&amp;t=598s 다른 AWS Innovate 영상들도 볼 수 있다! 매우 유익함 출처) https://aws.amazon.com/ko/events/aws-innovate/machine-learning/","link":"/2021/02/24/aws-innovative/"},{"title":"Javascript 기초문법 가물가물할 때 5분 컷 내기","text":"Javascript 오빠는 풍각쟁이야~ 오빠는 심술쟁이야~ 난 몰라 난 몰라 문법 이렇게 만들어 놓으면 난 몰라~~ Javascript 문법은 봐도봐도 헷갈려Backend와 Frontend를 왔다리 갔다리 하다보면,Python식 사고방식으로 작성한 문법이 문제 없겠지? 하고 들여다보면Javascript 의 다양한 에러메시지를 주구장창 마주치게 된다. 오죽하면, What the fuck Javascript 라는 Dev Meme (개발자 유머)도 존재하고,Javascript의 가장 괴랄한(?) 부분만 모아놓아, 퀴즈 형식으로 풀게하는 레퍼지토리도 존재한다. 폴란드의 한 개발자 분이 만드신 것 같은데, 웃긴 건 이 페이지는 전부 Typescript로 제작 되었다는 것ㅋㅋㅋㅋㅋ 그만큼 JS를 싫어하신단거지 JS의 괴랄함을 겪어보고 싶으신분들은 사이트 들어가서 직접 풀어보자! :https://wtf-js-quiz.netlify.app/ Javascript 문법이 가물가물한 분들을 위해그래서, Javascript 문법을 처음 배우는 사람 말고! 봐도봐도 헷갈리는 사람을 위해, 5분만에 스윽 다시 읽어보고 아 맞다 이거였지! 할 수 있도록, 기초 JS 문법을 정리해봤다. 이미 아는 내용일거라 전제하에, 주석은 정말 기억을 되살릴 만큼만 적고, 설명을 최소화해서 5분만에 Javascript의 Type, For문, Function, Object 구조를 읽을 수 있도록 만들었다. 레쓰기릿 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147// 1. Javascript 의 Data Type // - 아무리 바빠도 Hello world 정도는 괜찮잖아?console.log('hello world');// let 과 const는 둘다 중복 생성 X// let은 재할당 가능 let a =123a = 456// const 는 재할당 불가능const b = 'hello'// b = 'worldconsole.log(typeof 123)// number라고 나온다!let name = 'javert'let hello_msg = `hello ${name}`// hello_msg = f'hello {name}' 과 같다(python f스트링)// 다만 따옴표가 아닌 백틱을 사용한다console.log(hello_msg)// True, False 는 소문자다console.log(true)console.log(undefined)// and 랑 or 는 &amp;&amp; , ||로 쓴다console.log(true &amp;&amp; true)console.log(true || true)// 삼항 연상자result = true ? 1: 2console.log(result)// 2. Javascript 의 for 문for (let a = 0 ; a &lt; 5 ; a++){ console.log('hello')}let menus = ['짜장면', '짬뽕']for (let menu of menus){ console.log(menu)}for (let menu in menus){ console.log(menu)}let numbers = { 'gj': 062, 'seoul': 02,}// key가 출력 (key값)for (let number in numbers){ console.log(number)}// // 에러가 발생 (value값)// for (let number of numbers){// console.log(number)// }// list는 for of / 오브젝트 형태는 for inmenus.forEach(function(menu){ console.log(menu)})// 3. Javascript의 함수 선언// def hello():// print('hello')// hello()// 함수 선언식function hello(){ console.log('hello')}hello()// 함수 표현식const world = function() { console.log('world')}world()// 화살표 함수const js = () =&gt; { console.log('js')}js()// 화살표 함수가 한줄 밖에 없을땐 이렇게도 표현가능하다const python = a =&gt; console.log(a)python('hello python')// 4. 자바스크립트의 함수란?// 1. 변수에 저장할 수 있다.// 2. 함수의 리턴값이 될 수 있다.// 3. 함수의 인자가 될 수 있다.let numbers = [1, 2, 3, 4, 5]for (let number of numbers) { console.log(number*2)}const hello = (num) =&gt; { console.log(num*2)}hello(10)// numbers.forEach(hello)// numbers.forEach((num)=&gt;{console.log(num*2)})numbers.forEach(num=&gt;console.log(num*2))// 익명함수(파이썬의 람다)는 재사용을 할 수 없다// 콜백함수 일회용으로만 사용할때 많이 사용// 5. Javascript의 Object 구조 (Python 의 Dictionary)const me = { name: 'javert', location: 'gj', language: ['python', 'js', 'sql'], products: { phone: 'iphone', computer: 'desktop', }, greeting: function(){return 'hihi'}, double: (age) =&gt; {console.log(age*2)}, double2: function(age){return age*2} }// console.log(me.greeting)// console.log(me.double(100))// console.log(me.double2(100))console.log(me)// jsonlet meJson = JSON.stringify(me)console.log(meJson)// 함수는 string화가 안된다JSON.parse() 중간중간 console.log 값이 뭐가 나오는지 궁금하다구요?구글 크롬 Console창을 킨 뒤, 직접 입력해 보자! 아니, 그냥 우리 .. Typescript 쓰자 … The End","link":"/2021/03/09/javascript-grammar/"},{"title":"내가 쓴 Django README를 다시 읽다.","text":"Django.. the \"D\" is Silent 얼마전 작년 3월에서 5월 사이에 만들었던 5차례의 Django 프로젝트들을 다시 읽어보다가,그때 너무나도 정성스럽게 적어두었던 Django Project의 README 파일들을 발견하게 되었다.하루에 8시간씩 개발을 하고 지쳐쓰러져도, 으으.. README는 써야해.. 하면서좀비같이 일어나 README를 쓰던 모습이 떠오른다. 당시엔 좌충우돌, Django를 처음 써보는 것이라 Python 에 HTML Bootstrap을 붙여 작업하는 것만으로도MVC 패턴이니, MVT 패턴이니.. HTML 문법이니 CSS니 허덕이며 작업했던 게 기억나는데,혹시 Django를 공부하는 분들에게 도움이 될까 싶어 Repository를 만들었다.호옥시 Django 공부하시는 분 있으시면 참고해보세요~ https://github.com/Jesuisjavert/Django_README","link":"/2021/03/02/django-readme/"},{"title":"대용량 트래픽 대처 AWS 시스템 아키텍쳐 토이 프로젝트","text":"이력서 클릭 한 방에, 10번이나 지원한다구? 작년 12월, 내가 면접을 봤던 연봉이 쌔기로 유명한 M모 회사의 DevOps 직군 과제는 다음과 같았다. Public Cloud (AWS, GCP, Azure 등) 상에서의 웹서비스 시스템 아키텍처를 설계하여 10분 내로 발표하시오. 웹 서비스는 고객사별로 활용하는 사이트 도메인이 구분되고, 특정 순간에 순간적인 대용량 트래픽이 발생할 수 있다. 처음 이 과제를 딱 받은 순간부터 멘붕이었다. 매일같이 SSAFY 최종 프로젝트를 진행하는 와중에 (심지어 내가 팀장) 준비할 수 있는 기간은 고작 일주일!!여차저차, PPT 자료 조사도 하고, Ssafy 시니어 개발자 친구님들에게 조언도 얻고, 컨설턴트님들과 화상통화로 PT의 부족한 점도 듣고, PPT도 세련되게(?) 만들고,대본도 칼같이 10분에 딱 맞춰 제작하고, 영상을 찍어, PT전형은 통과했지만결론부터 말하자면, 총 7차 면접 과정중 6차에서 떨어지고 말았다! ㅎㅎㅎ (인생은 쓰디쓴 법) PT 과제는, 그저 이론상으로 대용량 트래픽에 대응할 수 있는 시스템 아키텍쳐를 설계하고 구성하는 것 뿐이었지만 PT면접을 통과하고, 기술면접을 준비하던 와중에“내가 만든 시스템 아키텍쳐를 실제로 구현해 가야 겠다!!” 라는 생각이 들었다. 실제로 이론상으로 설계도를 그리는 것과, Backend - Frontend 로직 + Infra구성까지 다 하는 것은 하늘과 땅차이!! 고래서, 단 3일만에 부랴부랴 AWS 의 Auto Scaling, Route 53, Amazon RDS, Amazon S3, Cloudfront, ELB 기능을 포함한 토이 프로젝트를 개발했는데, 결론부터 말하자면 아니 이걸 어케 3일만에 다했지.. 싶을 정도의 나름 개고생한 흔적들이 보이는 토이 프로젝트가 나오게 되어서, Github 에 Open 하게 되었다. Backend는 Django, Frontend 는 Vue(Vuetify)로 작업했고,배포는 gunicorn, Nginx 를 사용했다. 기본적인 사이트의 컨셉은, 회원가입한 구직자가, 이력서를 간단히 작성하고원하는 부서에 이력서를 낼 때, 대용량의 사진을 여러장을 보내도 서버가 다운 되지 않도록 하는 것이었다.AutoScaling 기능을 추가했고, Cloudfront로 모니터링 하도록 했고, 요구사항이었던 고객사별 다른 도메인 주소를 구현하기 위해 Route 53을 붙였다.CDN (Cloudfront)도 붙여서 Image 로딩의 레이턴시를 줄였다. 또한, Frontend 단에서 SPA가 조금 더 가볍게 로딩될 수 있도록 디렉토리를 Refactoring 해 기본적으로각 세션단위 컴포넌트가 Lazy Loading 될 수 있게 만들었다. 컴포넌트를 재활용할 수 있게 만든 것은 덤이다. Backend 단에서는 Django로 S3 서버로 이미지를 바로 업로드 할 수 있게 만들었는데,이미지를 여러개를 업로드 할 수 있도록 Stack 을 만들고 그 안에서 For문을 돌며 챠라락 여러개의 이미지 업로드가 될 수 있게 만들었다. 사실은 제대로 된 테스팅을 해보려면 여러가지 부하툴을 사용했어야 했는데,Uhm… 사실은 개발을 다 끝내고 나니까 기력이 떨어져서 좀 귀찮았… (커허흠) 시간이 너무 없어서, 다 구현하지 못한 부분(ElastiCache 등)도 있고, 아직 이때는AWS의 이론에 대해 깊이 있는 학습을 마저 못한 것도 있어서 미흡하지만어쨋든, 깔끔하고 이쁜 모바일 반응형 웹 서비스를 3일만에 완성시켰다는 점에서 뿌-듯 했따고 한다. ㅎㅎ 프로젝트의 세부사항과 코드는 다음 링크의 README에 올려놓았습니다. 참조! https://github.com/Jesuisjavert/awsTest","link":"/2021/03/11/django-vue-aws/"}],"tags":[{"name":"AWS","slug":"AWS","link":"/tags/AWS/"},{"name":"Cloud","slug":"Cloud","link":"/tags/Cloud/"},{"name":"Amazon","slug":"Amazon","link":"/tags/Amazon/"},{"name":"Network","slug":"Network","link":"/tags/Network/"},{"name":"EC2","slug":"EC2","link":"/tags/EC2/"},{"name":"Cloudformation","slug":"Cloudformation","link":"/tags/Cloudformation/"},{"name":"MachineLearning","slug":"MachineLearning","link":"/tags/MachineLearning/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Tensorflow","slug":"Tensorflow","link":"/tags/Tensorflow/"},{"name":"etc","slug":"etc","link":"/tags/etc/"},{"name":"markdown","slug":"markdown","link":"/tags/markdown/"},{"name":"grammar","slug":"grammar","link":"/tags/grammar/"},{"name":"Region","slug":"Region","link":"/tags/Region/"},{"name":"AvailabilityZone","slug":"AvailabilityZone","link":"/tags/AvailabilityZone/"},{"name":"Edge","slug":"Edge","link":"/tags/Edge/"},{"name":"PoP","slug":"PoP","link":"/tags/PoP/"},{"name":"IaaS","slug":"IaaS","link":"/tags/IaaS/"},{"name":"PaaS","slug":"PaaS","link":"/tags/PaaS/"},{"name":"Serverless","slug":"Serverless","link":"/tags/Serverless/"},{"name":"SaaS","slug":"SaaS","link":"/tags/SaaS/"},{"name":"VPC","slug":"VPC","link":"/tags/VPC/"},{"name":"Subnet","slug":"Subnet","link":"/tags/Subnet/"},{"name":"InternetGateWay","slug":"InternetGateWay","link":"/tags/InternetGateWay/"},{"name":"Router","slug":"Router","link":"/tags/Router/"},{"name":"NATGateWay","slug":"NATGateWay","link":"/tags/NATGateWay/"},{"name":"PrivateSubnet","slug":"PrivateSubnet","link":"/tags/PrivateSubnet/"},{"name":"EndPoint","slug":"EndPoint","link":"/tags/EndPoint/"},{"name":"MetaData","slug":"MetaData","link":"/tags/MetaData/"},{"name":"S3","slug":"S3","link":"/tags/S3/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"ColorBashShell","slug":"ColorBashShell","link":"/tags/ColorBashShell/"},{"name":"Figlet","slug":"Figlet","link":"/tags/Figlet/"},{"name":"Toilet","slug":"Toilet","link":"/tags/Toilet/"},{"name":"AsciiView","slug":"AsciiView","link":"/tags/AsciiView/"},{"name":"Cacaview","slug":"Cacaview","link":"/tags/Cacaview/"},{"name":"InternetGateway","slug":"InternetGateway","link":"/tags/InternetGateway/"},{"name":"NATDevice","slug":"NATDevice","link":"/tags/NATDevice/"},{"name":"ProxyInstance","slug":"ProxyInstance","link":"/tags/ProxyInstance/"},{"name":"AWSInnovate","slug":"AWSInnovate","link":"/tags/AWSInnovate/"},{"name":"Javascript","slug":"Javascript","link":"/tags/Javascript/"},{"name":"Grammar","slug":"Grammar","link":"/tags/Grammar/"},{"name":"Django","slug":"Django","link":"/tags/Django/"},{"name":"Framework","slug":"Framework","link":"/tags/Framework/"},{"name":"MVC","slug":"MVC","link":"/tags/MVC/"},{"name":"MTV","slug":"MTV","link":"/tags/MTV/"},{"name":"Vue","slug":"Vue","link":"/tags/Vue/"},{"name":"Vuetify","slug":"Vuetify","link":"/tags/Vuetify/"},{"name":"AutoScaling","slug":"AutoScaling","link":"/tags/AutoScaling/"},{"name":"Cloudfront","slug":"Cloudfront","link":"/tags/Cloudfront/"},{"name":"Amazon S3","slug":"Amazon-S3","link":"/tags/Amazon-S3/"},{"name":"Route53","slug":"Route53","link":"/tags/Route53/"},{"name":"ELB","slug":"ELB","link":"/tags/ELB/"},{"name":"ElastiCache","slug":"ElastiCache","link":"/tags/ElastiCache/"}],"categories":[{"name":"Network","slug":"Network","link":"/categories/Network/"},{"name":"MachineLearning","slug":"MachineLearning","link":"/categories/MachineLearning/"},{"name":"Python","slug":"MachineLearning/Python","link":"/categories/MachineLearning/Python/"},{"name":"Tensorflow","slug":"MachineLearning/Python/Tensorflow","link":"/categories/MachineLearning/Python/Tensorflow/"},{"name":"etc","slug":"etc","link":"/categories/etc/"},{"name":"Markdown","slug":"etc/Markdown","link":"/categories/etc/Markdown/"},{"name":"AWS","slug":"Network/AWS","link":"/categories/Network/AWS/"},{"name":"Cloudformation","slug":"Network/AWS/Cloudformation","link":"/categories/Network/AWS/Cloudformation/"},{"name":"EC2","slug":"Network/AWS/EC2","link":"/categories/Network/AWS/EC2/"},{"name":"VPC","slug":"Network/AWS/VPC","link":"/categories/Network/AWS/VPC/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"Gateway","slug":"Network/AWS/Gateway","link":"/categories/Network/AWS/Gateway/"},{"name":"AWS","slug":"MachineLearning/AWS","link":"/categories/MachineLearning/AWS/"},{"name":"Innovate","slug":"MachineLearning/AWS/Innovate","link":"/categories/MachineLearning/AWS/Innovate/"},{"name":"Javascript","slug":"Javascript","link":"/categories/Javascript/"},{"name":"Grammar","slug":"Javascript/Grammar","link":"/categories/Javascript/Grammar/"},{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"Django","slug":"Python/Django","link":"/categories/Python/Django/"},{"name":"Vue.js","slug":"Javascript/Vue-js","link":"/categories/Javascript/Vue-js/"}]}