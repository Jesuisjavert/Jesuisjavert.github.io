{"pages":[{"title":"About me","text":"안녕하세요. Javert라는 필명을 쓰는 강동훈이라고 합니다. 재밌게도, 저의 대학전공은 프랑스어입니다. 졸업 이후삼성청년SW아카데미(SSAFY) 3기로 입학하게 되어한국어, 영어, 프랑스어를 공부했던 제가파이썬, 자바, 자바스크립트라는 언어를 배우게 되었습니다.😂 개발을 공부하면서 알게 되는 것들과 남겨야 할것 들을정리하기 위해 블로그를 운영하고 있습니다. 잘못된 부분이 있거나 논의가 필요한 부분은댓글이나 메일로 남겨주시면 감사하겠습니다. Hi. I’m Kang Dong-hoon, who uses the pseudonym Javert. Interestingly, my college major is French. After graduation,I entered Samsung Software Academy for Youth(SSAFY).I learned Korean, English and French andI’m learning Python, Java, and JavaScript, now. (Yeah I know.. that’s a lot..)😂 I am running a blog to organize what I learnand to leave behind while studying development Any part that is wrong or needs discussion, Please leave a comment.😊 Salut. Je suis Kang Dong-hoon, qui utilise le pseudonyme Javert. À l’université Hankuk des études étrangères, J’ai appris le français.Après l’obtention du diplôme,Je suis entré à la Samsung Software Academy for Youth (SSAFY).J’ai appris le coréen, l’anglais, le français etJ’apprends Python, Java et JavaScript, maintenant. (Oui.. je sais.. c’est trop bcp) 😂 Je dirige un blog pour organiser ce que j’apprendset de laisser derrière tout en étudiant le développement Toute partie erronée ou nécessitant une discussion,veuillez laisser un commentaire. Merci 😊","link":"/about/index.html"},{"title":"","text":"const num = 02020; console.log(num); // ❓❓❓","link":"/about/test.js"}],"posts":[{"title":"AWS Network Online Study (ANOS 2기) 시작!","text":"AWS(Amazon Web Services)란..?AWS가 세계를 휩쓸고 있다.클라우드 서비스는 기존의 온프레미스(On-Premise) 방식을 넘어업계의 표준으로 다가서고 있고, 많은 기업들이 서버를 클라우드로 이전하는 추세이다. 평소에 AWS를 활용해 서비스를 배포하고, 이것저것 기능을 더해 아키텍쳐를 설계해 본 경험은 있지만,네트워크에 대한 이론적 배경을 좀 더 자세히 공부하고 싶어서,AWS Network Online Study [ANOS 2기]를 시작하게 되었다. 따라하며 배우는 AWS 네트워크 입문 스터디는 기본적으론 이 책을 쓰신 저자(가시다)님이 책 내용을 설명해주시면서,같이 실습과제를 진행하는 식으로 진행이 되며,매주 일요일 저녁에 2시간씩 저녁 9시부터 11시까지 진행이 된다.아마 직장인들을 대상으로 하는 스터디라서, 늦은 시간에 진행을 하는 것 같다.ㅎㅎ 기본적으로는 2시간 동안, 미리 예습해온 내용에 대해서 설명해주시고, 실습내용을 따라해보고, 각 주차별로 진행된 실습 과제를 제출하여, 진도표를 공유하는 식으로 진행이 된다. AWS 스터디이지만, 개발자이신분들보다는 네트워크나 보안 쪽에서 현업으로 일하고 계신 분들을 위주로 진행되다보니, 네트워크쪽 내용들을 예습해 가야 할 것 같다. 이번이 ANOS 2기라고 하는데, Notion으로 주시는 공지나 책의 완성도, 스터디의 완성도 등정말 배울 점이 많은 분들에게 무료 강의를 듣는 기분이라서 굉장히 만족하고 있다. 앞으로는 AWS 카테고리에 각 주차별로 배운 점이나, 실습한 내용들을 올려볼 생각이다.","link":"/2021/01/12/aws-study1/"},{"title":"머신러닝 야학-머신러닝1 핵심 요약노트","text":"2021 머신러닝 야학 2기 개강평소 SSAFY 에서부터 관심이 생겼던 Machine Learning 분야에 새롭게 도전해 보았다.친구들이 딥러닝 프로젝트로 Image Scanning 이나 Classification 기술을 도입해서얼굴 관상 보기 프로젝트라던지, 물고기 종류 분류라던지 신박한 기술들을 많이 보여줬었는데,평소 자연어 처리에 관심 많았던지라, 그동안 배워왔던 빅데이터 기술들을 좀 더 딥하게 적용시켜 보고 싶어서머신러닝 야학 2기를 신청하게 되었다. 인공지능을 구현하는 기술, 머신러닝이란?기계학습이란? 기계를 학습시켜, 인간의 판단을 위임하기 위해서 고안된 기술! 전염병판정, 기계번역, 자율주행 등 많은 분야에서 활용되고 있다. 머신러닝의 가장 큰 키워드는 바로 인간의 결정 을 도와 준 다는 것. 결정 = 비교 + 선택 여러가지의 선택지가 있을 때, 객관적인 데이터를 기계에게 학습시켜 분석하여, 인간의 빠르고 정확한 결정을 도와주는 것. 여러 장의 사진을 학습시켜, 그 결과가 내가 정한 클래스에 속하는지 쉽게 이용해 볼 수 있는 사이트가 있다. 역시 갓구글..https://teachablemachine.withgoogle.com/ 머신러닝야학에선 이 google teachable machine에서 만들어준 model을간단한 App으로 만들어주는 활용 예제도 존재했다. 많은 사람들이 머신러닝에 대해 고민하고있고, 자신만의 기획서를 작성하기도 한다. 프로그래머로서 고민하는 것보다, 자신의 문제를 먼저 어떻게 해결할지 궁리 해보라는 강의의 포인트에 맞게, 남녀노소 다양한 사람들의 아이디어가 살아 숨쉬는 공간인 것 같다. https://bit.ly/ml-my-plan/ 좀 더 본격적으로 머신러닝을 시작해보자.아이디어를 현실화 하기 위해선, 데이터가 필요하다.그리고 그 데이터는 가장 효율적으로 2가지로 전달가능하다. 표 (Table) 과 좌표평면(Coordinates) 표라는 것을 좀 더 자세히 보자.표는 가로(row) 와 세로 (column), 즉 행과 열로 구성되어 있다. 이 표는 다양한 분야에서 다양한 이름으로 불리는데,특히 데이터 분야에서는 테이블을 데이터셋(DataSet)이라고 부르고, 주로 행의 데이터를 관측치, 열을 특성 및 변수라고 지칭한다. 독립변수와 종속변수변수(Variable)란? 즉, 변화하는 수!데이터셋에선 ‘열’을 의미한다. 독립변수란 원인이 되는 열, 종속변수는 그 원인으로 인해 결과가 되는 열이라고 이해하면 쉽다. 예를 들어 온도가 20도 일때, 맥주의 판매량이 40병이라는 데이터가 있다면,온도라는 원인에 의해 맥주의 판매량이 영향을 준다고 가정 했을때,온도는 결과에 영향을 받지 않는 독립적인 사건이지만, 결과는 원인에 종속되어서 발생한 사건이다. 물론 세상의 모든 데이터는 인과관계로 존재하지 않는다. 다양한 상관관계가 있을 수 있고, 인과관계는 그 중 하나일 것이다! 독립변수는 원인이다.종속변수는 결과다.독립변수와 종속변수의 관계를 인과관계라고 한다.인과관계는 상관관계에 포함된다. 머신러닝의 분류 지도 학습 (Supervised Learning) 정답이 있는 문제를 해결하는 것 보통은 과거의 데이터를 통해서 결과를 예측하는 것에 사용된다. (ex) 온도와 아이스크림 판매량 간의 원인-결과 분석을 통해 판매량을 예측하는 모델) 분류 (Classification)예측하고자 하는 종속변수가 이름일 때, 보통 사용됨.ex) 공부시간과 합격여부, 키,몸무게와 현역-공익, 메일 발신인과 스팸메일 여부 등 회귀 (Regression)예측하고자 하는 종속변수가 숫자일 때, 보통 사용됨.ex) 공부시간과 시험점수의 상관관계, 역세권과 집 값, 자동차 속도와 안전성, 나이와 키 등 비지도학습 (Unsupervised Learning) 관찰을 통해 새로운 의미나 관계를 밝혀내는 것 군집화 (Clustering)군집화란 비슷한 행을 찾아서 그룹을 만드는 것ex) 좌표평면내의 비슷한 위치의 좌표값들을 여러 단위의 군집(Cluster) 단위로 나누어 그룹핑하는 것 연관 규칙 학습(Association rule learning)서로 관련이 있는 특성을 그룹화 해주는 것ex) 쇼핑몰 내의 상품추천, 영화추천, 드라마 추천 등 관측치를 그룹핑 해주는것 -&gt; 군집화특성을 그룹핑 해주는 것 -&gt; 연관 규칙 학습 강화학습 (Reinforcement Learning) 더 좋은 보상을 받기 위해서 수련하는 것 현재의 상태를 관찰 -&gt; 관찰에 따라 행동 -&gt; 보상을 더 받을 수 있도록 Agent가 학습하는 일련의 과정을 반복하는 것. 머신러닝 지도 다음과 같은 판단 절차로 내게 필요한 머신러닝의 기법이 무엇인지 판단 할 수 있다. 출처) 생활코딩https://opentutorials.org/course/4548/28891 포스트 내의 삽화와 자료들은 생활코딩의 저작권 정책에 따라 작성되었습니다.","link":"/2021/01/05/machinelearning-python1/"},{"title":"머신러닝야학-Tensorflow (python) 핵심요약-1","text":"Deel Learning을 Tensorflow로 구현해보자Tensorflow로 주로 사용하는 Deep Learning Algorithm은지도 학습(회귀, 분류)을 위한 5가지가 주로 쓰인다. Decision Tree Random Forest KNN SVM Neural Network 이런 알고리즘을 구현하기 위한 라이브러리들도 여러가지가 있는데,TensorFlow, PyTorch, Caffe2, theano 등이 있다. 머신러닝의 프로세스 과거의 데이터를 준비한다. 데이터로 모델을 학습(Fit)한다. 모델의 구조를 만든다. 모델을 이용한다. Neural Net (인공 신경망)사람의 두뇌를 동작하는 방법을 모방해서 기계가 학습할 수 있도록 고안된 Algorithm. Pandas LibraryPython에서 대표적으로 표를 다루는 도구인 pandas 라이브러리를 통해 실습을 진행한다.pandas의 간단한 사용법을 통해 표를 불러오고, Shape를 확인하고, 원하는 칼럼을 선택하고, 칼럼의 대표 머릿값을 출력하는 등의 기능을 수행할 수 있다. 12345파일 읽어오기: read_csv('/경로/파일명.csv')모양 확인하기: 데이터.shape칼럼 선택하기: 데이터[['칼럼명1', '칼럼명2', '칼럼명3']]칼럼 이름 출력하기: 데이터.columns맨 위 5개 관측치 출력하기: 데이터.head() 모델을 학습시켜 보자.생활코딩에서 제공하는 예제 코드는 다음과 같다.각 주석 밑에 수업에서 제공하는 내용들을 첨가해서 설명을 각주로 달겠다. 머신러닝의 프로세스의 단계를 지켜 코드를 짠다.tensorflow의 오픈소스 신경만 라이브러리 중 하나인 keras를 사용한다.Keras는 유저가 손쉽게 딥 러닝을 구현할 수 있도록 도와주는 상위 레벨의 인터페이스 혹은 API이다. 1234567891011121314151617181920212223242526272829############################ 기본 라이브러리를 불러온다.import tensorflow as tfimport pandas as pd############################ 데이터를 전처리한다.파일경로 = 'https://raw.githubusercontent.com/blackdew/tensorflow1/master/csv/lemonade.csv'레모네이드 = pd.read_csv(파일경로)레모네이드.head()# 데이터의 상위 5가지 관측치를 통해 잘 불러와지는지 확인한다# 종속변수, 독립변수독립 = 레모네이드[['온도']]종속 = 레모네이드[['판매량']]print(독립.shape, 종속.shape)# 원인과 결과를 입력한다.############################ 모델을 만듭니다.X = tf.keras.layers.Input(shape=[1])Y = tf.keras.layers.Dense(1)(X)model = tf.keras.models.Model(X, Y)model.compile(loss='mse')# Tensorflow의 Keras 라이브러리의 Layer에 독립변수, 종속변수를 입력하는데 각각의 shape의 크기에 유의하여 입려개준다. Loss란? Loss란 학습된 모델의 예측값과 실제 결과 사이의 차이점을 손쉽게 알아보기 위한 값으로, Loss = (예측 - 결과)^2 의 평균 그래서 Loss 값이 0에 가까워 질 때, 학습이 잘 되고 있다는 증거이고, 학습을 반복해서 시킴으로써 Loss값을 줄일 수 있다. 123456789101112############################ 모델을 학습시킵니다. model.fit(독립, 종속, epochs=10)model.fit(독립, 종속, epochs=1000, verbose=0)#학습을 시킬때 epochs 값을 조절해가며 학습의 횟수를 설정할 수 있다. verbose = 0을 입력하지 않으면 epoch를 한 번 할때마다 출력값을 반환하지만, verbose=0을 입력해두면 최종 결과값 만을 출력하므로 학습 횟수가 많을 땐, verbose=0 값을 걸어 둔다.############################ 모델을 이용합니다. print(model.predict(독립))print(model.predict([[15]])) 결과 본 실습의 경우엔 독립변수가 하나, 종속변수가 하나이기 때문에 굉장히 단순한 모델이라, 예측값이 실제값과 꽤 많이 비슷한 모델을 학습하는 것을 알 수 있었다. 출처 생활코딩 Deep Learning Tensorflow (python) 강의 https://opentutorials.org/course/4570 생활코딩의 딥러닝 교육컨텐츠는 CCL 라이선스 BY를 따르고 있습니다.","link":"/2021/01/05/machinelearning-python2/"},{"title":"머신러닝야학-Tensorflow (python) 핵심요약-2","text":"독립변수와 종속변수가 여럿인 예제 (보스턴 집값 예측)중앙값 (Median Value)란?해당 지역 주택 값 중에 가장 가운데에 있는 값 (Range List 중 중앙 인덱스 값) 일반적으론 평균값이 집단을 대표하는 숫자로 많이 사용되지만, 평균값의 표준편차가 너무 커서, 평균의 대표성을 무너뜨리는 이상치(Outlier)가 평균을 왜곡시킬때, 중앙값을 많이 사용함. 보스턴 집값 모델 딥러닝 프로세스 보스턴 집값 예측 모델은 하나의 종속변수를 에측하기 위해 13개의 독립변수를 사용한다. 이런식으로 여러 독립변수가 목표한 종속변수에 미치는 영향을 분석하는 모형을 퍼셉트론이라고 부르고,각각의 변수(뉴런)가 종속변수에 미치는 영향력의 비율을 가중치라고 부른다. 각각의 뉴런으로 입력된 모든 값을 다 더한 다음(가중합)에 이 값에 더 해주는 상수를 편향이라고 한다. 즉, 하나의 뉴런에서 활성화 함수를 거쳐 최종적으로 편향을 더해야 예측값이 출력된다고 볼 수 있다. 퍼셉트론, 가중치, 편향 예제 코드는 레모네이드 예제와 거의 비슷하므로 생략한다. 추가로, get_weight 메소드를 통해머신러닝이 학습한 가중치와 편향값을 알아볼 수 있다. 생활코딩에선 이러한 딥러닝이 이루어지는 과정을 직접 실행해 보는 워크북을 제공한다. 가중치를 미분해가며 근사값을 대입해 가는 방식으로 딥러닝이 이루어지는데,Learning Rate는 따로 정해진 값이 아니라, 학습을 반복하면서 적절한 값을 컴퓨터가 선택하게 된다. 출처 생활코딩 Deep Learning Tensorflow (python) 강의 https://opentutorials.org/course/4570 생활코딩의 딥러닝 교육컨텐츠는 CCL 라이선스 BY를 따르고 있습니다.","link":"/2021/01/06/machinelearning-python3/"},{"title":"머신러닝야학-Tensorflow (python) 핵심요약-3","text":"아이리스 품종 분류 모델 예제다음 예제인 아이리스 품종 분류 모델은 여러 독립변수가 하나의 종속변수(품종)을 예측하는 모델인데, 예측해야 하는 종속변수가 양적변수가 아닌 범주형 데이터라는 차이점이 있다. 데이터 전처리 (범주 데이터 카테고리화)범주화를 위해선 각각의 종속변수를 종류별로 분류화하는 것이 필요하다. 각각의 종속변수의 범주가 해당될 때 1, 아닐 때 0 이란 값을 입력해두어 나중에 각각의 범주에 해당될 확률을 계산하기 용이하게 한다. One-Hot Encoding (원 핫 인코딩)12# 원핫인코딩아이리스 = pd.get_dummies(아이리스) 다음과 같이 범주를 분류화 하는 것을 원 핫 인코딩이라고 부르고 Pandas의 get_dummies() 메쏘드로 데이터셋을 변형시킬 수 있다. 시그모이드(Sigmoid) vs 소프트맥스(Softmax) 시그모이드 함수와 소프트맥스 함수는 각각의 용도에 따라 다르게 사용되는 함수인데, 이번 예제는 Multinomial Classification 이라 Softmax 함수로 분석을 진행한다. 강의에서는 Sigmoid 함수는 언급만 하고 넘어가지만 두 함수의 차이점을 정리해 보기로 했다. 함수 시그모이드 소프트맥스 구분 Binary Data(이진데이터) Multinomial classification (다항식 분류) 사용용도 주로 중간 층의 활성화 함수 주로 출력 함수 출력 값 범위 0~1 사이의 확률 값 0~1 사이의 확률값 (단, 결과 총합이 1) 출력 값 의미 기준치 이상,이하에 따라 True or False 여러 클래스에 분류될 확률이 각각 출력됨 시그모이드 함수는 학습을 반복할 수록 0 or 1에 수렴해서 최근들어 단독으로는 많이 사용되지 않으며 활성화 함수로 딥러닝의 한 단계(계단함수)로 자주 사용된다. 공통점: 둘다 공식이 굉장히 복잡하다.😂 문송합니다 퍼셉트론에서 활성화 함수를 계단함수에서 다른 함수로 변경하는 것이 신경망의 Loss를 줄이고 효율을 높이는 핵심!계단함수 -&gt; 1) Sigmoid, 2) ReLU 3) Softmax 예제 코드 출처 생활코딩 Deep Learning Tensorflow (python) 강의 https://opentutorials.org/course/4570 생활코딩의 딥러닝 교육컨텐츠는 CCL 라이선스 BY를 따르고 있습니다. https://cjw0107.tistory.com/7Sigmoid vs Softmax","link":"/2021/01/07/machinelearning-python4/"},{"title":"머신러닝야학-Tensorflow (python) 핵심요약-4","text":"신경망의 완성: 히든레이어 퍼셉트론을 깊게 연결한 딥러닝 신경망을 만드는 방법? 히든레이어!기존의 퍼셉트론을 여러개 연결하여, 층(Layer)을 늘려 연결해준다. 예제에선 총 506개의 관측치를 인풋레이어의 13개 노드에 담고, 이를 히든레이어의 총 5개의 노드로 연결 시켰다.그리고 히든레이어의 5개의 관측치를 softmax로 분류하여 최종 output layer의 1개 값을 예측하는 모델인 것이다.즉, 노드들의 가중치를 분석할 때, 활성화함수를 여러개 사용함으로써, Accuracy를 올리고, Loss를 줄일 수 있다. Swish 활성화 함수를 통해 히든 레이어 Swish ? 최근에 발표된 성능이 좋은 활성화함수 중 하나.특징 : ReLU를 대체하기 위해 구글이 고안한 함수. 시그모이드 함수에 X를 곱한 아주 간단한 형태를 보이지만, 깊은 레이어를 학습시킬 때 ReLU보다 더 뛰어난 성능을 보임. 최종 예제 코드123456789X = tf.keras.layers.Input(shape=[4])H = tf.keras.layers.Dense(8, activation=&quot;swish&quot;)(X)H = tf.keras.layers.Dense(8, activation=&quot;swish&quot;)(H)H = tf.keras.layers.Dense(8, activation=&quot;swish&quot;)(H)Y = tf.keras.layers.Dense(3, activation='softmax')(H)# 이런 식으로 Layer를 더욱 층층이 쌓으면 좀 더 똑똑한 모델이 된다.model = tf.keras.models.Model(X, Y)model.compile(loss='categorical_crossentropy', metrics='accuracy') 출처 생활코딩 Deep Learning Tensorflow (python) 강의 https://opentutorials.org/course/4570 생활코딩의 딥러닝 교육컨텐츠는 CCL 라이선스 BY를 따르고 있습니다.","link":"/2021/01/10/machinelearning-python5/"},{"title":"머신러닝야학-Tensorflow (python) 핵심요약-5","text":"딥러닝 데이터의 전처리 과정데이터 타입의 변경 원핫 인코딩, 즉 카테고리의 범주화가 필요한 데이터인데, 품종 이라는 변수가 int 값으로 되어 있어서 원핫 인코딩이 되지 않는 상태? int(정수형)타입을 category(범주형)타입으로 바꿔주자. 데이터 NA 값의 처리 학습이 더 잘되게 만드는 TipBatchNormalization layer 활용학습을 다 마치고 나서도 Loss가 원하는 만큼 떨어지지 않는다면, BatchNormalization Layer를 각 Layer의 층마다 배치시키면, 같은 모델임에도 불구하고 학습 효과를 더욱 증대시킬 수 있다. 개선 전) 1234567X = tf.keras.layers.Input(shape=[13])H = tf.keras.layers.Dense(8, activation='swish')(X)H = tf.keras.layers.Dense(8, activation='swish')(H)H = tf.keras.layers.Dense(8, activation='swish')(H)Y = tf.keras.layers.Dense(1)(H)model = tf.keras.models.Model(X, Y)model.compile(loss='mse') 개선 후) 1234567891011121314151617X = tf.keras.layers.Input(shape=[13]) H = tf.keras.layers.Dense(8)(X)H = tf.keras.layers.BatchNormalization()(H)H = tf.keras.layers.Activation('swish')(H) H = tf.keras.layers.Dense(8)(H)H = tf.keras.layers.BatchNormalization()(H)H = tf.keras.layers.Activation('swish')(H) H = tf.keras.layers.Dense(8)(H)H = tf.keras.layers.BatchNormalization()(H)H = tf.keras.layers.Activation('swish')(H) Y = tf.keras.layers.Dense(1)(H)model = tf.keras.models.Model(X, Y)model.compile(loss='mse') 실제로 모델을 BatchNormalization 으로 개선한 결과,개선 전에는 1000번을 학습해도 20이하로 떨어지지 않았지만,개선 후에는 200번 정도를 학습했을 때, 개선 전의 Loss 값과 비슷하게 나왔고, 1000번을 학습했을 땐 훨씬 낮은 정도의 Loss 값을 보였다. 후기일주일 간, 머신러닝의 기본교양강의부터 python으로 딥러닝을 구현하는 실습예제까지 진행해 보았다. 처음 머신러닝과 딥러닝에 대해 잘 모를 땐, 대학시절 들었던 빅데이터 수업 때문에, 여러 분석 모델들의 수학적 난해함에 지레 겁을 먹고, 어렵단 인식이 강했는데,머신러닝도 결국, 하면 된다 라는 것을 깨닫게 되었다. 어려워 보이는 알고리즘도, 모델링도,코딩 라이브러리도 결국 사용법을 배우고, 과정을 이해하고, 활용하는 과정의 연속 일 뿐인 것이다. 난해함은 잠시 접어두고, 완전히 1000% 이해하지 못하고 이용해보더라도 어느 누구도 뭐라하지 않는다. 즉, 시그모이드 모형과 소프트맥스 수학식을 수학적으로 유도하지 못한다고 해서, 딥러닝을 못하는게 아닌 것이다. 그냥 하면 된다!! 왜냐? 우리에겐 구글님이 있으니깐..ㅎ 앞으로도 새로운 문제를 직면할 때마다, 딥러닝으로 이 문제를 해결 할 수 있겠다. 라는 자신감을 심어주는 강의를 들은 것 같아, 내 자신도 굉장히 뿌듯함을 느꼈고, 이런 좋은 강의와 기회를 마련해준 머신러닝야학 강사 및 스탭 분들에게도 감사를 드린다. 출처 생활코딩 Deep Learning Tensorflow (python) 강의 https://opentutorials.org/course/4570 생활코딩의 딥러닝 교육컨텐츠는 CCL 라이선스 BY를 따르고 있습니다.","link":"/2021/01/11/machinelearning-python6/"},{"title":"Markdown 문서를 보기 좋게 작성해보자","text":"VScode에서 Markdown Preview Extension을 이용하면 보기 편하다 마크다운이란?Markdown은 2004년 미국의 개발자 John Gruber와 Aaron Swartz가 개발한 경량형 마크업 언어로, 쉽고 빠른 포맷을 지녀 많은 개발자들에 의해 널리 사랑받고 있습니다. Github 의 README, 블로그의 글, 개발 TIL 작성 등, 여러 분야에서 활용 되고 있습니다. 마크다운의 문법 요소들을 정리해두어, 앞으로 작성할 블로그의 포스팅에 어느정도의 Guideline을 만들어 두려고 합니다. Heading기본적인 heading은 #의 갯수로 헤더의 크기를 정할 수 있습니다. 123456# Heading 1## Heading 2### Heading 3#### Heading 4##### Heading 5###### Heading 6 Heading 1Heading 2Heading 3Heading 4Heading 5Heading 6 밑줄1___ 표시는 밑줄을 표시합니다. 인용 표시 (Quote)1&gt; 표시는 뒷 배경과 Text를 강조할 수 있습니다. 뭔가 명언 같은 걸 넣어야 할 것 같다. Bold &amp; Italic &amp; Strikethrough1234**Bold** *Italic* ~~Strikethrough~~ **로 감싸면 굵은 글씨로 표시가 됩니다.*로 감싸면 이태릭 체로 표시가 됩니다.~~로 감싸면 삭선처리가 됩니다. BoldItalicStrikethrough Bullet List &amp; Numbered List12345To do List:- Something new- Something good1. Something important2. Something interesting To do List: Something new Something good Something important Something interesting HTML Link &amp; Image 넣기123Click Here → [MyGitHubPage](https://github.com/jesuisjavert)![Image](https://picsum.photos/seed/picsum/200/300) Click Here → MyGitHubPage In-line 코드 강조1`print('hello Javert')` print('hello Javert') Table 삽입123456과일 | 특징 | 특이사항--|:--:|--:`Apple` | 사과는 맛있어 | `맛있으면 빨개``Lemon` | 레몬은 셔 | 여기는 우측 정렬`Lime` | 라임은 상큼해 |`Grape` | 포도는 달아 | 과일 특징 특이사항 Apple 사과는 맛있어 맛있으면 빨개 Lemon 레몬은 셔 여기는 우측 정렬 Lime 라임은 상큼해 Grape 포도는 달아","link":"/2020/12/12/markdown-grammar/"},{"title":"AWS Global Infra 및 주요 개념 소개","text":"AWS Global Infrastructure AWS는 전 세계적으로 분포한 데이터센터를 통해, AWS를 서비스 하고 있다.현재 AWS는 24개의 Region(리전)과 77개의 가용영역(Availability Zone),220개 이상의 연결구간 POP(Point of Presence)를 운영하고 있다. 참조) AWS Global Infra Official info sitehttps://aws.amazon.com/ko/about-aws/global-infrastructure/ 글로벌 네트워크들은 해저 광케이블을 통해 연결되어 있고, 물론 반갑게도 서울을 찍어보면 도쿄와 홍콩으로 연결된 해저 광케이블을 볼 수 있다.물리적으로 케이블의 거리가 멀면 ping은 비례하겠거니.. 생각이 든다. Latency, 전파 지연Latency : 패킷을 전송하는 곳에서부터 전달받는 곳까지 이동하는 데 걸리는 시간! 전파 지연 : 송신측 -&gt; 수신측으로 이동하는데 필요한 시간. 이동거리 대비 신호가 이동하는 속도로 측정. 대부분의 사람들은 300밀리 초 이상 시에 ‘느리다’라고 인식을 한다고 한다.(한국 사람들은 .. 100이지 않을까? ㅎㅎ) 대부분의 레이턴시는 다른 네트워크 레이턴시를 제외하고 케이블에서의 지연만 얘기할 때 보통 쓴다. 가용 영역 Availability Zone가용 영역은 각 리전 내에 있는 격리 영역(Isolated locations) 이라고 정의할 수 있는데, 쉽게 말하자면, 각 지역내에 최종 사용자에게 가까운 컴퓨팅, 스토리지 등의 리소스를 배치하는 기능을 제공하기 위해 만든 것이라고 볼 수 있다. AWS 리전의 배치 기준은 재해극복과 네트워크 지연을 방지하기 위해서이다.그 기준은,각 국가별 네트워크 지연시간: 10ms &lt; AZ 배치 기준 &lt; 100ms 라고 한다! 우리는 한 리전 내에서도, 서비스가 안정적으로 서비스 되기 위해선, 하나의 가용 영역(AZ)에서 장애가 날 수도 있기 때문에 멀티 가용영역(AZ)으로 구축해야 한다. AZ의 northeast-1은 Tokyo, 2가 Seoul 엣지 POP (Point of Presence)엣지 POP(ex CDN) 라고 하는 것은인터넷 사용자가 인터넷 서비스 제공자(ISP: Internet Service Provider)를 만나는 곳을 의미. 일반적으로 콘텐츠를 고속으로 내보내거나 가져오는 CDN(Content Delivery Network) 서비스(ex)AWS Cloudfront)를 제공하기 위해 만든다. IaaS &amp; PaaS &amp; Serverless &amp; SaaS AWS Cloud 서비스의 종류는 크게 4가지로 구분할 수 있는데,클라우드 사업자와 사용자가 관리 하는 영역에 따라 구분한다. IaaS : EC2 (Computing), VPC (Network), EBS(Storage) PaaS : AWS Elastic Beanstalk Serverless : AWS Lambda, API Gateway (API Proxy) SaaS : Web Mail, MSoffice365, Dropbox …","link":"/2021/01/18/aws-study2/"},{"title":"AWS EC2 생성 &amp; Cloudformation 활용","text":"EC2 인스턴스를 생성해 보자!","link":"/2021/01/18/aws-study3/"}],"tags":[{"name":"AWS","slug":"AWS","link":"/tags/AWS/"},{"name":"Cloud","slug":"Cloud","link":"/tags/Cloud/"},{"name":"Amazon","slug":"Amazon","link":"/tags/Amazon/"},{"name":"Network","slug":"Network","link":"/tags/Network/"},{"name":"EC2","slug":"EC2","link":"/tags/EC2/"},{"name":"Cloudformation","slug":"Cloudformation","link":"/tags/Cloudformation/"},{"name":"MachineLearning","slug":"MachineLearning","link":"/tags/MachineLearning/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Tensorflow","slug":"Tensorflow","link":"/tags/Tensorflow/"},{"name":"etc","slug":"etc","link":"/tags/etc/"},{"name":"markdown","slug":"markdown","link":"/tags/markdown/"},{"name":"grammar","slug":"grammar","link":"/tags/grammar/"},{"name":"Region","slug":"Region","link":"/tags/Region/"},{"name":"AvailabilityZone","slug":"AvailabilityZone","link":"/tags/AvailabilityZone/"},{"name":"Edge","slug":"Edge","link":"/tags/Edge/"},{"name":"PoP","slug":"PoP","link":"/tags/PoP/"},{"name":"IaaS","slug":"IaaS","link":"/tags/IaaS/"},{"name":"PaaS","slug":"PaaS","link":"/tags/PaaS/"},{"name":"Serverless","slug":"Serverless","link":"/tags/Serverless/"},{"name":"SaaS","slug":"SaaS","link":"/tags/SaaS/"}],"categories":[{"name":"Network","slug":"Network","link":"/categories/Network/"},{"name":"MachineLearning","slug":"MachineLearning","link":"/categories/MachineLearning/"},{"name":"Python","slug":"MachineLearning/Python","link":"/categories/MachineLearning/Python/"},{"name":"Tensorflow","slug":"MachineLearning/Python/Tensorflow","link":"/categories/MachineLearning/Python/Tensorflow/"},{"name":"etc","slug":"etc","link":"/categories/etc/"},{"name":"Markdown","slug":"etc/Markdown","link":"/categories/etc/Markdown/"},{"name":"AWS","slug":"Network/AWS","link":"/categories/Network/AWS/"},{"name":"Cloudformation","slug":"Network/AWS/Cloudformation","link":"/categories/Network/AWS/Cloudformation/"}]}